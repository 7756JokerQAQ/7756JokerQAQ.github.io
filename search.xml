<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>线段树学习</title>
      <link href="/2022/08/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
      <url>/2022/08/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h1><p>​     用途：线段树主要用来搜寻一个区间里的最大或者最小值亦或者一个区间内的数据之和，线段树是一种<a href="https://baike.baidu.com/item/二叉搜索树/7077855?fromModule=lemma_inlink">二叉搜索树</a>，与<a href="https://baike.baidu.com/item/区间树/5772433?fromModule=lemma_inlink">区间树</a>相似，它将一个区间划分成一些单元区间，每个单元区间对应线段树中的一个叶结点，使用线段树可以快速的查找某一个节点在若干条线段中出现的次数，时间复杂度为O(logN)。而未优化的空间复杂度未2N，实际应用时一般还要开4N的数组已免越界，因此有时候需要离散化让空间压缩。</p><h2 id="1-线段树的原理"><a href="#1-线段树的原理" class="headerlink" title="1.线段树的原理"></a>1.线段树的原理</h2><ol><li><code>E[]tree</code>  线段树   <code>E[] data</code>线段树的私有数组 存储传进来的数组  <code>Merger&lt;E&gt; merger</code> 一个函数接口 用于对线段树找到的一个区间内的值进行比较。</li><li><code>public SegmentTree(E[]arr,Merger&lt;E&gt;merger)</code> 对传入的数组进行初始化到<code>data</code>数组中,对接口也进行初始化 然后在调用<code>buildSegmentTree()</code> 函数。</li><li><code>buildSegmentTree(int treeIndex,int l,int r)</code>该函数是建造线段树</li><li><code>E get(int index)</code> 得到下标为index的值</li><li><code>getSize()</code> 得到传入数组的大小</li><li><code>leftChild(index) rightChild</code> 得到下标为index的左右孩子的下标</li><li><code>query(int queryL,int queryR)</code> 公共接口调用重构函数<code>query(treeIndex,l,R,quaryL,quaryR)</code> 函数</li><li><code>query(int treeIndex, int l, int r, int queryL, int queryR)</code> 该函数实现查找一个区间内元素并进行Merger操作；</li><li><code>set(int index,E e)</code> 该函数寻找下标为index的值并对其进行修改操作递归调用其私有函数<code>set(int treeIndex, int l, int r, int index, E e)</code> </li><li><code>set(int treeIndex, int l, int r, int index, E e)</code> 当修改元素成功后 对一个区间内的元素进行Merger操作实现动态操作</li></ol><ul><li><p>线段树的原理：线段树除了最后一层之外，是一颗满<a href="https://so.csdn.net/so/search?q=二叉树&amp;spm=1001.2101.3001.7020">二叉树</a>，假设区间中存在n个数据，则倒数第二层节点数大于为n，从第一层到倒数第三层的节点数大约为n-1，最后一层节点数很少，但是为了使用数组存储整棵树，最后一层大约需要开2n的空间，因此一共需要开辟4n的空间存储线段树。</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/195253.png" alt=""></p></li></ul><p><strong>为了使该线段树方便构造A[0]下面应该也有两个null的左右子树同理A[1]~A[7]都有</strong></p><p><u>在这里我们让左子树的数目少于右子树 即当区间分割时向下取整</u> </p><p>理论原理：假如我们搜寻区间下标[2-5]则从根节点出发 因为 mid :7/2=3(向下取整) 2<3 &&5>3 所以该区间在根节点的左右子树上  然后我们来到左子树 以左子树[0,3]作为根节点 mid: 3/2=1 因为2&gt;1故改区间为[2,3]  同理 可以求出右子树上的区间范围为[4,5];最后将两个区间进行合并求merger操作；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//(1)SegmentTree 构造函数</span><br> <span class="hljs-keyword">public</span> <span class="hljs-title function_">SegmentTree</span><span class="hljs-params">(E[] arr, Merger&lt;E&gt; merger)</span> &#123;<br>          <span class="hljs-comment">//对改merger操作进行初始化</span><br>        <span class="hljs-built_in">this</span>.merger = merger;     <br>        <span class="hljs-comment">//!!将data类型 格式转化为Objiect 并赋予与arr.length 一样的空间</span><br>        data = (E[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[arr.length];  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            data[i] = arr[i];  <span class="hljs-comment">//arr将数组中的值进行拷贝到data</span><br>        &#125;<br>     <span class="hljs-comment">//首先对线段树的内存空间进行初始化 并对其进行类型的转换然后才能接收到data[]内的值</span><br>        tree = (E[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">4</span> * arr.length]; <br>        <span class="hljs-comment">//建造线段树 (节点0，最小下标，和最大下标)</span><br>       <span class="hljs-comment">//调用建造线段树的函数</span><br>        buildSegmentTree(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, data.length - <span class="hljs-number">1</span>); <br>    &#125;<br>   <span class="hljs-comment">//当一切都进行初始化完毕然后就调用私有函数buildSegmentTree</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildSegmentTree</span><span class="hljs-params">(<span class="hljs-type">int</span> treeIndex, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> &#123;<br>        <span class="hljs-comment">// 该函数是个递归函数 先考虑结束情况当r==l是程序结束 也就是只剩下一个叶子节点 </span><br>        <span class="hljs-keyword">if</span> (r == l) &#123;<br>            tree[treeIndex] = data[r];  <span class="hljs-comment">//将叶子节点挂在tree树上</span><br>            <span class="hljs-keyword">return</span>;      <br>        &#125;<br>      <span class="hljs-comment">//线段树的建造流程 </span><br>       <span class="hljs-comment">//首先进行中间下标的求解 这样写是为了防止越界</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> l + (r - l) / <span class="hljs-number">2</span>;    <br>      <span class="hljs-comment">//得到左右孩子的下标用于作为根节点进行递归调用 </span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">leftTreeIndex</span> <span class="hljs-operator">=</span> leftChild(treeIndex);  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">rightTreeIndex</span> <span class="hljs-operator">=</span> rightChild(treeIndex); <br>    <span class="hljs-comment">//开始递归的调用该函数首先以左孩子下标为跟节点建造 区间（L,mid）同理右孩子为(mid+1,r)</span><br>        buildSegmentTree(leftTreeIndex, l, mid);<br>        buildSegmentTree(rightTreeIndex, mid + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-comment">//当调用到底层的时候也就是 叶子节点 他们存的值为 自己左右孩子进行外部接口的merger操作后存入该节点 同理递归的往上调用</span><br>        tree[treeIndex] = merger.merge(tree[leftTreeIndex], tree[rightTreeIndex]);<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>当线段树构造完成以后完成一些以上函数所调用的函数</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> E <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;   <br>       <span class="hljs-comment">//获取下标为index的值 需要判断数组是否越界了</span><br>       <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt;= data.length)<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Index is illegal&quot;</span>);<br>         <span class="hljs-comment">//然后在data数组中直接返回</span><br>       <span class="hljs-keyword">return</span> data[index];  <br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">return</span> data.length;<br>   &#125;<br>   <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">leftChild</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>       <span class="hljs-comment">//根据二叉树的性质可以得出左孩子下标和有孩子下标</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * index + <span class="hljs-number">1</span>;  <br>   &#125;<br>   <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">rightChild</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * index + <span class="hljs-number">2</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>当以上两步都完成的时候，可以进行查询区间的操作</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//该函数因为需要递归调用 所以要传入根节点 左右下标和 查询的左右区间下标  </span><br><span class="hljs-keyword">private</span> E <span class="hljs-title function_">query</span><span class="hljs-params">(<span class="hljs-type">int</span> treeIndex, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> queryL, <span class="hljs-type">int</span> queryR)</span> &#123;<br>    <span class="hljs-comment">//首先对递归到第的情况进行判断 就是当l和r与查询的queryL,queryR的下标相同时直接返回根节点的值   </span><br>    <span class="hljs-keyword">if</span> (l == queryL &amp;&amp; r == queryR) &#123;  <br>            <span class="hljs-keyword">return</span> tree[treeIndex];<br>        &#125;<br>    <span class="hljs-comment">//正常流程先 求取中间值的下标</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> l + (r - l) / <span class="hljs-number">2</span>;<br>    <span class="hljs-comment">//得到左右孩子的下标</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">leftTreeIndex</span> <span class="hljs-operator">=</span> leftChild(treeIndex);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rightTreeIndex</span> <span class="hljs-operator">=</span> rightChild(treeIndex);<br>    <span class="hljs-comment">//判断该区间是否在 线段树的右子树如果是的化就以右孩子为根节点搜寻[mid+1,r]内的值</span><br>        <span class="hljs-keyword">if</span> (queryL &gt;= mid + <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> query(rightTreeIndex, mid + <span class="hljs-number">1</span>, r, queryL, queryR);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (queryR &lt;= mid) &#123; <br>            <span class="hljs-comment">//判断是否在左子树上 如果是则递归调用query直至找到</span><br>            <span class="hljs-keyword">return</span> query(leftTreeIndex, l, mid, queryL, queryR);<br>        &#125;<br>    <span class="hljs-comment">//当即不再左子树又不在右子树上的时候就是mid在【queryL,queryR】的中间</span><br>    <span class="hljs-comment">//则需要顶一个E 类型的变量分别接收最后返回的【l,mid】和[mid+1,r]的值</span><br>    <span class="hljs-comment">//然后对两个区间的结果进行merger操作并返回</span><br>        <span class="hljs-type">E</span> <span class="hljs-variable">leftResult</span> <span class="hljs-operator">=</span> query(leftTreeIndex, l, mid, queryL, mid);<br>        <span class="hljs-type">E</span> <span class="hljs-variable">rightResult</span> <span class="hljs-operator">=</span> query(rightTreeIndex, mid + <span class="hljs-number">1</span>, r, mid + <span class="hljs-number">1</span>, queryR);<br>        <span class="hljs-keyword">return</span> merger.merge(leftResult, rightResult);<br>    &#125;<br><br></code></pre></td></tr></table></figure><h2 id="2-线段树的动态查询"><a href="#2-线段树的动态查询" class="headerlink" title="2.线段树的动态查询"></a>2.线段树的动态查询</h2><blockquote><p>拓展</p></blockquote><p>以上是对于一个固定区间固定数值的操作然而现实中也需要，当修改一个数据后能够更新整个线段树然后在查找一个区间进行相关的操作具体函数如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//首先将位于index下标的值进行修改</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(<span class="hljs-type">int</span> index, E e)</span> &#123;<br>    <span class="hljs-comment">//每次进行下标搜查需要考虑是否越界和下标是否合法</span><br>        <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt;= data.length)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Index is illegal&quot;</span>);<br>        data[index] = e;     <span class="hljs-comment">//修改</span><br>        <span class="hljs-comment">//调用set的重构函数对区间【0,data.lengt-1】内的一个下标进行修改为e</span><br>      set(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, data.length - <span class="hljs-number">1</span>, index, e); <br>    &#125;<br> <span class="hljs-comment">//重构函数定义为私有变量防止外部调用参数意义（根节点,左范围，右范围,索引值，要修改的值）</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(<span class="hljs-type">int</span> treeIndex, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> index, E e)</span> &#123;<br>        <span class="hljs-comment">//递归终止的条件就是当l==r也就是找到那个元素了</span><br>        <span class="hljs-keyword">if</span> (l == r) &#123;  <br>            tree[treeIndex] = e;  <span class="hljs-comment">//修改</span><br>            <span class="hljs-keyword">return</span>;  <br>        &#125;<br>        <span class="hljs-comment">//正常流程 首先得到中间的下标</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> l + (r - l) / <span class="hljs-number">2</span>;<br>        <span class="hljs-comment">//其次得到左右孩子的下标 后面递归使用</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">leftTreeIndex</span> <span class="hljs-operator">=</span> leftChild(treeIndex);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rightTreeIndex</span> <span class="hljs-operator">=</span> rightChild(treeIndex);<br>        <span class="hljs-comment">//接着 `index &gt;= mid + 1`:如果要搜查的值在右子树则对右子树递归调用以 rightTreeIndex为根节点 </span><br>        <span class="hljs-keyword">if</span> (index &gt;= mid + <span class="hljs-number">1</span>) &#123;<br>            set(rightTreeIndex, mid + <span class="hljs-number">1</span>, r, index, e);<br>        &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">//反之则在左子树同右子树相同不过根节点换成了左孩子的下标值</span><br>            set(leftTreeIndex, l, mid, index, e);<br>        &#125;<br>        <span class="hljs-comment">//当找到后不是整个线段树的节点值都改变在index以后的值节点保持不变而在index以前的节点值要改变</span><br>        <span class="hljs-comment">//所以这里直接调用调用merger函数即可以自动实现。</span><br>        tree[treeIndex] = merger.merge(tree[leftTreeIndex], tree[rightTreeIndex]);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="3-LeeCode练习题讲解"><a href="#3-LeeCode练习题讲解" class="headerlink" title="3.LeeCode练习题讲解"></a>3.LeeCode练习题讲解</h2><h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3><p>力扣题303<a href="[303. 区域和检索 - 数组不可变 - 力扣（LeetCode）](https://leetcode.cn/problems/range-sum-query-immutable/">区域和检索-数组不可变</a>)   该题是要实现一个NumArray类实现一个区间内元素的总和所以解题步骤：</p><ol><li>首先定义一个私有变量sum数组存储从0-n 个区间的总和 例如sum[6]表示 sum[0]+…+sum[5] 故有此情形可以知道sum的空间开辟大小为nums.length+1 ,而且sum[0]=0;</li><li>对数据成员对象的初始化将 nums内的元素相加和拷贝到sum数组中</li><li>实现sumRange类 返回结过 例如：如果要求下标【4，8】区间内元素的总和则需要sum[9]-sum[4] 就可以。</li></ol><blockquote><p>代码如下所示</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NumArray</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> []sum;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NumArray</span><span class="hljs-params">(<span class="hljs-type">int</span> []nums)</span>&#123;<br>        sum=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[nums.length+<span class="hljs-number">1</span>];<br>        sum[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//对sum[1]~sum[n]逐个进行赋值 从i=1开始 sum[1]=sum[0]+nums[0];sum[2]=sum[1]+nums[1]...</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; sum.length; i++) &#123;<br>            sum[i]=sum[i-<span class="hljs-number">1</span>]+nums[i-<span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//返回最终结果</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sumRange</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j)</span>&#123;<br>        <span class="hljs-keyword">return</span> sum[j+<span class="hljs-number">1</span>]-sum[i];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Trie前缀树"><a href="#Trie前缀树" class="headerlink" title="Trie前缀树"></a><code>Trie</code>前缀树</h1><blockquote><p>概念介绍</p></blockquote><p>前缀树又称为字典树，是一种有序的树，它用于保存关联的数组，其中的键通常是字符串，也就是这个节点对应的字符串，而根节点对应字符串，一般情况下，不是所有的节点都有对应的值，只有叶子节点和部分的内部节点所对应的键才有的相关的值。</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/hehehe.png" alt=""></p><blockquote><p>前缀树的3个基本性质</p></blockquote><ol><li>根节点不包含字符，除根节点外每一个节点都只包含一个字符。</li><li>从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串</li><li>每个节点的所有子节点包含的字符都不相同。</li></ol><blockquote><p>tire树的应用</p></blockquote><p>常用于搜索的提示，例如输入一个网址出现可能的结果，还用于微信聊天记录的搜寻。时间复杂度O(longN)</p><blockquote><p>tire树的实现</p></blockquote><ul><li>首先定义一个节点类<code>class Node</code> 其中函数如下</li><li><code>public boolean isWorld</code> 表示到该节点是否为一个单词</li><li><code>public TreeMap&lt;Character,Node&gt;next</code> 表示下一个节点所存储的结构</li><li><code>Node(boolean isWorld)</code> 对节点的初始化和next的初始化</li><li>此处开始定义<code>class Trie</code> 内的函数 <code>Node root</code> 定义一个节点 <code>int size</code> 该tire树的大小。</li><li><code>add(String word)</code> 添加一个单词word</li><li><code>contains（String word）</code> 查询单词word是否在Tire中</li><li><code>isPrefix(String prefix)</code> 判断该单词是否是前缀</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>（1）首先定义一个节点内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> isWorld;<br>        <span class="hljs-comment">//Character是个假设 可以适用于不同的情况 能够分为一个一个的单元</span><br>        <span class="hljs-keyword">public</span> TreeMap&lt;Character, Node&gt; next;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">boolean</span> isWorld)</span> &#123;<br>            <span class="hljs-built_in">this</span>.isWorld = isWorld;<br>            next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;();<br>        &#125;<br><span class="hljs-comment">//当该节点不是个单词的时候直接赋值为false </span><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-built_in">this</span>(<span class="hljs-literal">false</span>);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>（2）在Trie类中定义相关的函数和私有变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">private</span> Node root;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br><span class="hljs-comment">//初始化 Tire 并对成员变量初始化赋值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Trie</span><span class="hljs-params">()</span> &#123;<br>        root = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>();<br>        size = <span class="hljs-number">0</span>;<br>    &#125;<br><span class="hljs-comment">//得到该Trie树中单词的数目</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size;<br>    &#125;<br></code></pre></td></tr></table></figure><p>（3）实现add函数 向Tire中添加单词word</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String word)</span> &#123;<br>    <span class="hljs-comment">//首相从根节点开始 顶一个cur指针指向根节点</span><br>     <span class="hljs-type">Node</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> root;<br>     <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; word.length(); i++) &#123; <span class="hljs-comment">//其对对传入的单词进行遍历</span><br>         <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> word.charAt(i);  <span class="hljs-comment">//将第i个字母赋值给c</span><br>         <span class="hljs-keyword">if</span> (cur.next.get(c) == <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">//判断cur的下一个节点是否为空如果是的话，则新建一个节点直接将该字母放在cur.next的下一个节点</span><br>             cur.next.put(c, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>());<br>         &#125;<br>         <span class="hljs-comment">//如果不为空的话让cur指针指向该不为空的节点便于下次循环操作</span><br>         cur = cur.next.get(c);<br>     &#125;<br>    <span class="hljs-comment">//当所有的节点都add上了后 此时判断该节点下的isWorld是否为true,不是的话改为true并且size++</span><br>     <span class="hljs-keyword">if</span> (!cur.isWorld) &#123;<br>         cur.isWorld = <span class="hljs-literal">true</span>;<br>         size++;<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>(3) contains 函数的实现类似于add函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查询单词 word是否在Trie中</span><br> <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(String word)</span>&#123;<br>     Node cur=root;  <span class="hljs-comment">//定义指针指向根节点</span><br>     <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; word.length(); i++) &#123; <span class="hljs-comment">//遍历word单词</span><br>         <span class="hljs-type">char</span> c=word.charAt(i);<br>         <span class="hljs-keyword">if</span>(cur.next.get(c)==<span class="hljs-literal">null</span>)&#123; <span class="hljs-comment">//如果cur.next为空的话则直接判断不存在</span><br>             <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>         &#125;<br>         cur= cur.next.get(c);  <span class="hljs-comment">//不为空的话 开始对下一个字母进行校验</span><br>     &#125;<br>     <span class="hljs-keyword">return</span> cur.isWorld;  <span class="hljs-comment">//当上面的while循环完成 则直接返回cur.isWrold证明该单词存在</span><br> &#125;<br></code></pre></td></tr></table></figure><p>（4）isPrefix函数判断该前缀是否存在tire树内于以上两种方法相似</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPrefix</span><span class="hljs-params">(String prefix)</span>&#123;<br>    Node cur=root;   <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;prefix.length();i++)&#123;<br>        <span class="hljs-type">char</span> c=prefix.charAt(i);<br>        <span class="hljs-keyword">if</span>(cur.next.get(c)==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        cur=cur.next.get(c);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="LeeCode题目讲解"><a href="#LeeCode题目讲解" class="headerlink" title="LeeCode题目讲解"></a>LeeCode题目讲解</h2><p>1.<a href="[208. 实现 Trie (前缀树">实现Trie前缀树</a> - 力扣（LeetCode）](<a href="https://leetcode.cn/problems/implement-trie-prefix-tree/">https://leetcode.cn/problems/implement-trie-prefix-tree/</a>)) 跟以上过程完全相似</p><p>（1）存在四个函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Trie</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Trie</span><span class="hljs-params">()</span> &#123;  <span class="hljs-comment">//初始化</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(String word)</span> &#123;  <span class="hljs-comment">//增加</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">search</span><span class="hljs-params">(String word)</span> &#123;  <span class="hljs-comment">//查找</span><br>    &#125;    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">startsWith</span><span class="hljs-params">(String prefix)</span> &#123;  <span class="hljs-comment">//前缀</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>代码实现</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Trie</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> isWorld;<br>        <span class="hljs-comment">//Character是个假设 可以适用于不同的情况 能够分为一个一个的单元</span><br>        <span class="hljs-keyword">public</span> TreeMap&lt;Character, Node&gt; next;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">boolean</span> isWorld)</span> &#123;<br>            <span class="hljs-built_in">this</span>.isWorld = isWorld;<br>            next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;();<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-built_in">this</span>(<span class="hljs-literal">false</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">private</span> Node root;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Trie</span><span class="hljs-params">()</span> &#123;<br>        root = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(String word)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> root;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; word.length(); i++) &#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> word.charAt(i);<br>            <span class="hljs-keyword">if</span> (cur.next.get(c) == <span class="hljs-literal">null</span>) &#123;<br>                cur.next.put(c, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>());<br>            &#125;<br>            cur = cur.next.get(c);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!cur.isWorld) &#123;<br>            cur.isWorld = <span class="hljs-literal">true</span>;<br><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">search</span><span class="hljs-params">(String word)</span> &#123;<br>        Node cur=root;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; word.length(); i++) &#123;<br>            <span class="hljs-type">char</span> c=word.charAt(i);<br>            <span class="hljs-keyword">if</span>(cur.next.get(c)==<span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            cur= cur.next.get(c);<br>        &#125;<br>        <span class="hljs-keyword">return</span> cur.isWorld;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">startsWith</span><span class="hljs-params">(String prefix)</span> &#123;<br>        Node cur=root;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; prefix.length(); i++) &#123;<br>            <span class="hljs-type">char</span> c=prefix.charAt(i);<br>            <span class="hljs-keyword">if</span>(cur.next.get(c)==<span class="hljs-literal">null</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            cur=cur.next.get(c);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.[<a href="https://leetcode.cn/problems/design-add-and-search-words-data-structure/">211. 添加与搜索单词 </a>] 题目简介设计一个数据结构，指出添加新的单词和查找字符串是否与任何先前添加的字符串匹配。</p><ul><li>还有内部节点Node类 其中的定义与上文相同这里不需要定义私有变量size。</li><li><code>WordDictionary</code> 对该字典类的初始化</li><li><code>addWorld</code> 与上文的add函数相同</li><li>重点实现<code>search(String word)</code> 函数</li></ul><blockquote><p>相同代码预览</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>      <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> isWorld;<br>      <span class="hljs-comment">//Character是个假设 可以适用于不同的情况 能够分为一个一个的单元</span><br>      <span class="hljs-keyword">public</span> TreeMap&lt;Character, Node&gt; next;<br>      <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">boolean</span> isWorld)</span> &#123;<br>          <span class="hljs-built_in">this</span>.isWorld = isWorld;<br>          next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;();<br>      &#125;<br>      <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">()</span> &#123;<br>          <span class="hljs-built_in">this</span>(<span class="hljs-literal">false</span>);<br>      &#125;<br>  &#125;<br>  <span class="hljs-keyword">private</span> Node root;<br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">WordDictionary</span><span class="hljs-params">()</span> &#123;<br>      root = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>();<br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addWord</span><span class="hljs-params">(String word)</span> &#123;<br>      <span class="hljs-type">Node</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> root;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; word.length(); i++) &#123;<br>          <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> word.charAt(i);<br>          <span class="hljs-keyword">if</span> (cur.next.get(c) == <span class="hljs-literal">null</span>) &#123;<br>              cur.next.put(c, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>());<br>          &#125;<br>          cur = cur.next.get(c);<br>      &#125;<br>      cur.isWorld = <span class="hljs-literal">true</span>;<br>  &#125;<br></code></pre></td></tr></table></figure><p><strong>(2)重点实现的search函数和match函数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">search</span><span class="hljs-params">(String word)</span> &#123;<br>     <span class="hljs-keyword">return</span> match(root, word, <span class="hljs-number">0</span>);  <span class="hljs-comment">//调用match函数从根节点开始 word单词 0为下标</span><br> &#125;<br></code></pre></td></tr></table></figure><p><strong>接着实现match函数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//从根节点开始 搜查单词为word 下标为index=0开始</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">match</span><span class="hljs-params">(Node node, String word, <span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span> (index == word.length()) &#123;  <span class="hljs-comment">//首先判断递归到底的情况就是index=单词的长度</span><br>            <span class="hljs-keyword">return</span> node.isWorld;  <span class="hljs-comment">//返回true 证明找到了</span><br>        &#125;<br>    <span class="hljs-comment">//先取出word的第一个字母进行匹配</span><br>        <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> word.charAt(index);  <br>        <span class="hljs-keyword">if</span> (c != <span class="hljs-string">&#x27;.&#x27;</span>) &#123;  <span class="hljs-comment">//因为体感说&#x27;.&#x27;表示一个任意的字母 当不为.的时候</span><br>            <span class="hljs-keyword">if</span> (node.next.get(c) == <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">//先判断c的下一个单词是否存在 不存在直接返回false</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-comment">//如果存在的话就递归调用以当前node.next.get(C)为节点 index+1 为下标的匹配函数</span><br>            <span class="hljs-keyword">return</span> match(node.next.get(c), word, index + <span class="hljs-number">1</span>); <br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//当然当下一个单词为&#x27;.&#x27;的时候可以直接遍历nextChar数组的 ‘keySet（）’--它表示的是取出word的下一个字母 </span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> nextChar :<br>                    node.next.keySet()) &#123;<br>                <span class="hljs-comment">// 此处以下一个字母为根节点 查找word 然后下标继续为index+1</span><br>                <span class="hljs-keyword">if</span> (match(node.next.get(nextChar), word, index + <span class="hljs-number">1</span>))<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微机接口</title>
      <link href="/2022/08/29/%E5%A4%A7%E4%B8%89%E4%B8%8A%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E5%BE%AE%E6%9C%BA%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/"/>
      <url>/2022/08/29/%E5%A4%A7%E4%B8%89%E4%B8%8A%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E5%BE%AE%E6%9C%BA%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="微机接口技术"><a href="#微机接口技术" class="headerlink" title="微机接口技术"></a>微机接口技术</h2><h4 id="课程学习内容及目的"><a href="#课程学习内容及目的" class="headerlink" title="课程学习内容及目的"></a>课程学习内容及目的</h4><p>  <strong>成绩=期末×0.7+平时×0.3</strong></p><p>1.汇编语言就是机器语言，熟知底层编程，了解计算机工作原理</p><p>2.微机接口技术就是把处理器、存储器等组成的基本系统与外部设备连接起来，从而实现计算机或者（CPU）与外部设备通信的一门技术，学习微机接口技术对微机在工业控制，数据采集和系统控制等领域的应用具有非常重要的作用；</p><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="1-1-微型计算机系统的组成"><a href="#1-1-微型计算机系统的组成" class="headerlink" title="1.1 微型计算机系统的组成"></a>1.1 微型计算机系统的组成</h3><pre><code>   应用软件- -&gt;  操作系统 --&gt; 硬件驱动层（软件）- -&gt;  指令层(ISA) --&gt; 硬件层(主板)     `计算机系统层次结构`</code></pre><p>硬件包括 处理芯片和外围硬件</p><p>软件：操作系统 编译器 各种应用软件</p><p>1.硬件层：其功能实在程序控制下的自动完成计算机的物理操作</p><p>2.硬件驱动层：（抽象层）：这些驱动层的软件直接控制着底层硬件的运行。这种组织结构，是的用户对硬件功能的调用不必了解其原理；</p><p>3.操作系统：计算机的所有软硬件资源的控制着，决定着计算机各种资源的使用和分配。</p><p>4.应用软件：通过操作系统提供的服务，BIOS提供的服务即使对计算机底层硬件的直接控制，完成对计算机各个方面应用的具体要求。</p><p>5.指令集：指示计算机硬件执行某种运算、处理功能的命令称为指令，CPU固有的指令系统</p><h4 id="1-1-2-卫星计算机软件"><a href="#1-1-2-卫星计算机软件" class="headerlink" title="1.1.2 卫星计算机软件"></a>1.1.2 卫星计算机软件</h4><h4 id="1-1-3-微型计算机的基本工作方法"><a href="#1-1-3-微型计算机的基本工作方法" class="headerlink" title="1.1.3 微型计算机的基本工作方法"></a>1.1.3 微型计算机的基本工作方法</h4><p>1.指令</p><p>指令在微处理器内是以二进制代码形式出现和施展控制的，每一条指令都有一个唯一的指令代码；</p><p>2.程序</p><p>​    当人们要用计算机我弄成某项工作时，就要把指令排列起来 这就是程序。</p><p>3.存储程序和控制程序</p><p>微处理器就顺序的、周而复始的从内存中取出指令，八至零码变成控制序列信号（指令译码）完成指令规定的操作（称为指令执行）完成全部指令称为（执行程序）    ——-执行程序必须调入内存运行。</p><h4 id="1-1-4-微机系统的启动和操作系统的装载"><a href="#1-1-4-微机系统的启动和操作系统的装载" class="headerlink" title="1.1.4 微机系统的启动和操作系统的装载"></a>1.1.4 微机系统的启动和操作系统的装载</h4><p>1.BIOS（主板自带的软件）是一个ROM</p><p>2.存储器地址  </p><h3 id="1-2-IA-32-微处理器体系结构"><a href="#1-2-IA-32-微处理器体系结构" class="headerlink" title="1.2 IA-32 微处理器体系结构"></a>1.2 IA-32 微处理器体系结构</h3><p>1.EU  指令</p><p>2.BIU 接口</p><p> CS SS DS ES IP  内部暂存器——&gt;通过地址的加法器 ——&gt;总线控制逻辑 ——&gt;指令对立寄存器</p>]]></content>
      
      
      <categories>
          
          <category> 微机课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微机理论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记模板</title>
      <link href="/2022/08/27/%E4%BB%A3%E7%A0%81%E5%BF%AB%E6%BC%94%E7%A4%BA/%E6%BC%94%E7%A4%BA/"/>
      <url>/2022/08/27/%E4%BB%A3%E7%A0%81%E5%BF%AB%E6%BC%94%E7%A4%BA/%E6%BC%94%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="Page-模板"><a href="#Page-模板" class="headerlink" title="Page 模板"></a>Page 模板</h1><p> title: 【必须】 页面标题<br> date: 【必需】页面创建日期<br> updated: 【可选】页面更新日期<br> type: 【必需】标签、分类和友情链接三个页面需要配置<br> comments: 【可选】显示页面评论模块(默认 true)<br> description: 【可选】页面描述<br> keywords: 【可选】页面关键字<br> top_img: 【可选】页面顶部图片<br> highlight_shrink: 【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)</p><h3 id="直接复制"><a href="#直接复制" class="headerlink" title="直接复制"></a>直接复制</h3><p> title:<br> date:<br> type:<br> comments:<br> description:<br> keywords:<br> updated:<br> top_img:<br> highlight_shrink:</p><h1 id="文章设置"><a href="#文章设置" class="headerlink" title="文章设置"></a>文章设置</h1><p> title: 【必需】文章标题<br> date: 【必需】文章创建日期<br> updated: 【可选】文章更新日期<br> tags: 【可选】文章标签<br> categories: 【可选】文章分类<br> keywords: 【可选】文章关键字<br> description: 【可选】文章描述<br> top_img: 【可选】文章顶部图片<br> cover:【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)<br> copyright: 【可选】显示文章版权模块(默认为设置中post_copyright的enable配置<br> copyright_author: 【可选】文章版权模块的文章作者<br> copyright_author_href: 【可选】文章版权模块的文章作者链接<br> copyright_url: 【可选】文章版权模块的文章连结链接<br> copyright_info: 【可选】文章版权模块的版权声明文字 </p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
