<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux学习笔记</title>
      <link href="/2022/10/19/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/LINUX%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/10/19/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/LINUX%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="LINUX理论学习"><a href="#LINUX理论学习" class="headerlink" title="LINUX理论学习"></a>LINUX理论学习</h1><p>网络链接的三种模式：</p><p>1.桥接模式，虚拟系统可以和外部系统通讯，但容易造成IP冲突</p><p>2.NAT模式，网络地址转换模式，虚拟系统可以和外部系统通讯，不造成IP冲突</p><p>3.主机模式：独立的系统</p><h4 id="2-虚拟机克隆"><a href="#2-虚拟机克隆" class="headerlink" title="2.虚拟机克隆"></a>2.虚拟机克隆</h4><ol><li>直接拷贝一份安装好的虚拟机文件</li><li>使用vmware软件</li><li>注意科隆时关闭虚拟机linux系统</li></ol><h4 id="3-虚拟机的快照"><a href="#3-虚拟机的快照" class="headerlink" title="3.虚拟机的快照"></a>3.虚拟机的快照</h4><p>如果在使用虚拟机系统的时候，想回到原先的某一个状态，也就是担心有可能进行误操作造成的系统的异常，需要回到原先某个正常运行的状态，vmware也提供了这样的功能叫做快照管理。</p><p>应用实例：</p><ol><li>安装好系统以后，先做一个快照A</li><li>进入到系统创建一个文件夹，再存一个快照b</li><li>回到系统刚刚安装好的状态即快照A</li></ol><h4 id="3-Linux目录结构"><a href="#3-Linux目录结构" class="headerlink" title="3. Linux目录结构"></a>3. Linux目录结构</h4><ol><li>Linux的文件系统时采用级层式的树状目录结构</li><li>在Linux 中一切皆文件</li></ol><p><strong>目录结构详解</strong></p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/d253f567a574442c98facc4e74aebf66.bmp" alt="img"></p><div class="table-container"><table><thead><tr><th style="text-align:center"><strong>目录</strong></th><th style="text-align:center"><strong>注解</strong></th><th style="text-align:center"><strong>介绍</strong></th></tr></thead><tbody><tr><td style="text-align:center">/bin</td><td style="text-align:center">常用</td><td style="text-align:center">是 Binary 的缩写, 这个目录存放着最经常使用的命令；子目录：/usr/bin 和 /usr/local/bin</td></tr><tr><td style="text-align:center">/sbin</td><td style="text-align:center"></td><td style="text-align:center">s 就是 Super User 的意思，这里存放的是系统管理员使用的系统管理程序；子目录：/usr/sbin 和 /usr/local/sbin</td></tr><tr><td style="text-align:center">/home</td><td style="text-align:center">常用</td><td style="text-align:center">存放普通用户的主目录，在 Linux 中每个用户都有一个自己的目录，一般该目录名是以用户的账号命名</td></tr><tr><td style="text-align:center">/root</td><td style="text-align:center">常用</td><td style="text-align:center">该目录为系统管理员，也称作超级权限者的用户主目录</td></tr><tr><td style="text-align:center">/lib</td><td style="text-align:center"></td><td style="text-align:center">系统开机所需要最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库</td></tr><tr><td style="text-align:center">/etc</td><td style="text-align:center">常用</td><td style="text-align:center">所有的系统管理所需要的配置文件和子目录, 比如安装 mysql 数据库 my.conf</td></tr><tr><td style="text-align:center">/user</td><td style="text-align:center">常用</td><td style="text-align:center">这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与 windows 下的 program files 目录</td></tr><tr><td style="text-align:center">/boot</td><td style="text-align:center">常用</td><td style="text-align:center">存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件</td></tr><tr><td style="text-align:center">/proc</td><td style="text-align:center"></td><td style="text-align:center">这个目录是一个虚拟的目录，它是系统内存的映射，访问这个目录来获取系统信息</td></tr><tr><td style="text-align:center">/srv</td><td style="text-align:center"></td><td style="text-align:center">service 缩写，该目录存放一些服务启动之后需要提取的数据</td></tr><tr><td style="text-align:center">/sys</td><td style="text-align:center"></td><td style="text-align:center">这是 linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs</td></tr><tr><td style="text-align:center">/tmp</td><td style="text-align:center"></td><td style="text-align:center">这个目录是用来存放一些临时文件的</td></tr><tr><td style="text-align:center">/dev</td><td style="text-align:center"></td><td style="text-align:center">类似于 windows 的设备管理器，把所有的硬件用文件的形式存储</td></tr><tr><td style="text-align:center">/media</td><td style="text-align:center">常用</td><td style="text-align:center">linux 系统会自动识别一些设备，例如 U 盘、光驱等等，当识别后，linux 会把识别的设备挂载到这个目录下</td></tr><tr><td style="text-align:center">/mnt</td><td style="text-align:center">常用</td><td style="text-align:center">系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将外部的存储挂载在/mnt/上，然后进入该目录就可以查看里的内容了。 (比如共享文件)</td></tr><tr><td style="text-align:center">/opt</td><td style="text-align:center"></td><td style="text-align:center">这是给主机额外安装软件所存放的目录(想要安装某个软件，把它的安装软件放在这个目录下)。如想要在虚拟系统上安装 ORACLE 数据库就可以先把其安装文件放在该目录下。默认为空</td></tr><tr><td style="text-align:center">/user/local</td><td style="text-align:center">常用</td><td style="text-align:center">这是另一个给主机额外安装软件所安装的目录(软件安装后的目标目录)。一般是通过编译源码方式安装的程序</td></tr><tr><td style="text-align:center">/var</td><td style="text-align:center">常用</td><td style="text-align:center">这个目录中存放着在不断扩充着的东西，习惯将经常被修改的目录放在这个目录下。包括各种日志文件</td></tr><tr><td style="text-align:center">/selinux</td><td style="text-align:center">security-enhanced linux</td><td style="text-align:center">SELinux 是一种安全子系统,它能控制程序只能访问特定文件, 有三种工作模式，可以自行设置. 类似于360，保证系统安全。这个目录看不到，因为没有被启用</td></tr></tbody></table></div><h4 id="4-为什么需要远程登录Linux"><a href="#4-为什么需要远程登录Linux" class="headerlink" title="4.为什么需要远程登录Linux"></a>4.为什么需要远程登录Linux</h4><p>说明: 公司开发时候，具体的应用场景是这样的：</p><ol><li>linux 服务器是开发小组共享 </li><li>正式上线的项目是运行在公网</li><li>因此程序员需要远程登录到 Linux 进行项目管理或者开发</li></ol><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/6db4149faa9c4a2f82cce5210927803e.bmp" alt="img"></p><p><strong>Xshell和Xftp6</strong></p><p>远程登录工具Xshell：<br>    1.Xshell 是目前最好的远程登录到 Linux 操作的软件，流畅的速度并且完美解决了中文乱码的问题，是目前程序员首选的软件。<br>    2.Xshell 是一个强大的安全终端模拟软件，它支持 SSH1, SSH2, 以及 Microsoft Windows 平台的 TELNET 协议。<br>    3.Xshell 可以在 Windows 界面下用来访问远端不同系统下的服务器，从而比较好的达到远程控制终端的目的。</p><p>注意：<br>1.使用Xshell之前，需要知道Linux的ip地址<br>    如何知道ip地址？<br>        在Linux中，鼠标右击桌面打开终端，输入ifconfig指令，ens33中，就可以知道ip地址了。<br>2.要保证本机可以ping通虚拟主机<br>    在本机DOS命令窗口中输入命令：ping 虚拟主机ip地址</p><p>登录Xshell：<br>    打开Xshell—-&gt;添加会话—-&gt;主机(虚拟主机ip地址)—-&gt;确定<br>    双击密钥—-&gt;选择接受并保存主机密钥(就不用重复接受了)<br>    远程登陆成功</p><p>远程上传下载文件Xftp：<br>    是一个基于 windows 平台的功能强大的 SFTP、FTP 文件传输软件。<br>    使用了 Xftp 以后，windows 用户能安全地在 UNIX/Linux 和 Windows PC 之间传输文件</p><pre><code>操作同上注意：xftp打开时乱码：属性---&gt;选项---&gt;UTF-8编码</code></pre><h4 id="5-vi-和-vim-的基本介绍"><a href="#5-vi-和-vim-的基本介绍" class="headerlink" title="5. vi 和 vim 的基本介绍"></a>5. vi 和 vim 的基本介绍</h4><p> <strong>Linux 系统会内置 vi 文本编辑器</strong></p><p>​     Vim可以看作是Vi的增强版本，Vim 具有程序编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程序设计。代码补完、编译及错误跳转等方便编程的功能特别丰富。</p><p> <strong>vi 和 vim 常用的三种模式</strong></p><ol><li>正常模式： 以 vim 打开一个档案就直接进入一般模式了(这是默认的模式)。 在这个模式中，你可以使用『上下左右』按键来移动光标， 可以使用『删除字符』或『删除整行』来处理档案内容， 也可以使用『复制、粘贴』来处理你的文件数据。</li><li>插入模式 按下 i, I, o, O, a, A, r, R 等任何一个字母之后才会进入编辑模式, 一般来说按 i 即可. 可以写东西了。 </li><li>命令行模式 在这个模式当中，可以提供你相关指令，完成读取、存盘、替换、离开 vim，显示行号等动作。</li></ol><p><strong>例子：</strong></p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs tcl">案例：使用 vim 开发一个 Hello.java 程序<br>使用xshell登录编写(因为以后工作都是这样写的)：<br>首先输入：vi Hello.java 或者 vim Hello.java (使用vim编辑器编写java程序)<br>回车后进入正常模式<br>之后输入i等字母，进入插入模式(编辑模式)<br>然后可是写代码：<br>public class Hello&#123;<br>public static void main(String[] args)&#123;<br>System.out.println(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>&#125;<br>&#125;<br>然后保存，怎么保存？<br>先 按 Esc 回到正常模式<br>然后输入冒号:  接着输入wq (代表写入并退出write quit)<br>回车<br>结束<br>输入ls命令，就可以看到Hello.java文件<br>还想修该文件：再输入 vim Hello.java (按Tab键 代码补全) 就有回到了上面<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/138b0786b5ae48c8a5d0fdbc2c712419.bmp" alt="img"></p><p> <strong>vi 和 vim 快捷键</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">快捷键</th><th style="text-align:center">模式</th><th style="text-align:center">介绍</th></tr></thead><tbody><tr><td style="text-align:center">yy</td><td style="text-align:center">正常模式</td><td style="text-align:center">复制当前行</td></tr><tr><td style="text-align:center">p</td><td style="text-align:center">正常模式</td><td style="text-align:center">粘贴</td></tr><tr><td style="text-align:center">5yy</td><td style="text-align:center">正常模式</td><td style="text-align:center">复制当前行向下的5行</td></tr><tr><td style="text-align:center">dd</td><td style="text-align:center">正常模式</td><td style="text-align:center">删除当前行</td></tr><tr><td style="text-align:center">5dd</td><td style="text-align:center">正常模式</td><td style="text-align:center">删除当前行向下的5行</td></tr></tbody></table></div><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs tcl">在文件中查找某个单词：<br>初始在正常模式，输入/，进入命令行模式，然后输入要查找的单词，回车查找<br>输入n查找到下一个<br>想查找另一个单词：输入/，重复上述即可<br>正常模式---&gt;命令行模式<br>给文件每行设置行号：<br>先冒号: <br>然后<span class="hljs-keyword">set</span> nu  (<span class="hljs-keyword">set</span> number)<br>回车<br>取消行号：<br>先冒号:<br>然后<span class="hljs-keyword">set</span> nonu<br>回车<br>快捷键到该文档的最首行(正常模式)：gg<br>快捷键到该文档的最末行(正常模式)：G<br>撤销动作(比如删除某一行，发现删错了，然后恢复这一行)(正常模式)：u<br>在某个文件中，想让光标移动到第<span class="hljs-number">20</span>行(正常模式)：输入<span class="hljs-number">20</span>，再输入 shift+g<br>更多的快捷键：有整理的文档和下图<br><br></code></pre></td></tr></table></figure><p> <strong>关机和重启命令</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">介绍</th></tr></thead><tbody><tr><td style="text-align:center"><code>shutdown -h now</code></td><td style="text-align:center">立即关机(h—&gt;halt停止)</td></tr><tr><td style="text-align:center"><code>halt</code></td><td style="text-align:center">立即关机，同上</td></tr><tr><td style="text-align:center"><code>shutdown</code></td><td style="text-align:center">1分钟后关机</td></tr><tr><td style="text-align:center"><code>shutdown -h 1</code></td><td style="text-align:center">同上，给每一个登录到Linux系统的用户发一条消息：1分钟后关机</td></tr><tr><td style="text-align:center"><code>shutdown -h 2</code></td><td style="text-align:center">2分钟后关机</td></tr><tr><td style="text-align:center"><code>shutdonw -r now</code></td><td style="text-align:center">现在重新启动(r—&gt;rboot重启)</td></tr><tr><td style="text-align:center"><code>reboot</code></td><td style="text-align:center">现在重新启动，同上</td></tr><tr><td style="text-align:center"><code>sync</code></td><td style="text-align:center">把内存的数据同步到磁盘</td></tr><tr><td style="text-align:center">注意</td><td style="text-align:center">不管是重启还是关机，首先要运行 sync 命令，把内存中的数据写到磁盘中；目前的 <code>shutdown/reboot/halt</code> 等命令均已经在关机前进行了sync，但还是手动执行一下sync保险</td></tr></tbody></table></div><p> <strong>用户登录和注销</strong></p><p><strong>用户登录：</strong><br>    登录时尽量少用 root 帐号登录，因为它是系统管理员，最大的权限，避免操作失误。<br>    而且以后也用不到root，除非你是系统管理员。<br>    可以利用普通用户登录，登录后再用”su - 用户名’命令来切换成系统管理员身份.</p><p><strong>注销：</strong><br>    在提示符下输入 logout  即可注销用户</p><p>注意：logout 注销指令在图形运行级别无效，在运行级别 3 下有效.<br>运行级别后面讲。</p><p><strong>验证：</strong><br>    使用普通用户登录<br>    使用Xshell远程登陆Linux<br>    输入命令：su - root   变为root用户<br>    再输入：logout  注销用户回到普通用户<br>    再输入：logout 退出系统</p><p><strong>注意：</strong>退出系统后，如何要重新连接到Linux，双击左栏会话再重新输入即可。</p><h4 id="6-Linux-实操篇"><a href="#6-Linux-实操篇" class="headerlink" title="6.Linux 实操篇"></a>6.Linux 实操篇</h4><ol><li><strong>介绍</strong></li></ol><p>Linux 系统是一个多用户多任务的操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</p><p>一个Linux系统中只有一个root用户，但是由root用户可以创建多个其他用户，可以给这些用户分配权限，<br>其中每个用户会对应一个目录，这个目录叫做家目录。</p><ol><li><strong>添加用户</strong></li></ol><p>语法：<strong>useradd 用户名</strong><br>比如：useradd milan 注册新用户milan</p><p>注意：当创建用户成功后，会自动创建和用户同名的家目录，该用户的家目录默认在home目录下</p><p>也可以给新用户指定家目录：<strong>useradd -d 指定目录 新用户名</strong><br>比如：<strong>useradd -d /home/test king 创建一个新用户king，其家目录test</strong></p><ol><li><strong>指定修改密码</strong></li></ol><p>语法：<strong>passwd 用户名</strong>  给某个用户设置/更改密码</p><p>注意：要写用户名。不写用户名默认设置当前用户，如果当前用户是root就麻烦了。</p><p>比如：给milan设置密码 </p><p>命令：pwd —-&gt;显示当前用户所在目录 Print Working Directory</p><ol><li><strong>删除账户</strong></li></ol><p>语法： <strong>userdel 用户名</strong></p><p>普通用户不能删除别的用户，只有root用户可以；并且不能自己删除自己</p><ul><li><p>删掉用户，但是保留其家目录：    userdel 用户名</p></li><li><p>将用户和其家目录一起删除(这个操作要谨慎)：  user -r 用户名</p></li></ul><p>​     一般情况，建议保留家目录(不删除)</p><ol><li><strong>查询用户信息</strong></li></ol><p><strong>语法：id 用户名</strong><br>id root:<br><code>uid=0(root) gid=0(root) 组=0(root)  userid是0 gruopid组id是0 所在组0</code></p><p>当用户不存在：返回无此用户 no such user</p><ol><li><strong>切换用户</strong></li></ol><p>在操作 Linux 中，如果当前用户的权限不够，可以通过 su - 指令，切换到高权限用户(比如 root)</p><p>语法： <strong>su - 切换用户名</strong></p><p>注意：</p><ul><li>从权限高的用户切换到权限低的用户，不需要输入密码，反之需要。</li><li>当需要返回到原来用户时，使用 exit/logout 指令</li></ul><ol><li><strong>查看当前用户</strong></li></ol><p><strong>语法：who am i 或者 who am I</strong><br><code>who am i ---&gt;第一个登录该系统的用户信息</code></p><p>假设A用户登录系统，切换到B用户，B输入命令who am i，输出的还是A用户的信息</p><ol><li><strong>用户组</strong></li></ol><p>介绍：类似于角色，系统可以对有共性/有相同的权限的多个用户进行统一的管理</p><p><strong>新增组：groupadd 组名</strong></p><p>介绍：类似于角色，系统可以对有共性/有相同的权限的多个用户进行统一的管理<br><strong>新增组：groupadd 组名</strong><br>    例子：增加一个用户zwj，把他直接放到组wudang中<br>    命令：<br>        <strong><code>groupadd wudang</code></strong><br>        <strong><code>useradd -g wudang zwj</code></strong><br><code>id zwj：uid=1001(zwj) gid=1001(wudang) 组=1001(wudang)</code><br>修改用户的组：<strong>usermod -g 用户组 用户名</strong><br>    例子：把zwj 放到组 mojiao 中<br>    命令：<br>        <code>groupadd mojiao</code><br>        <code>usermod -g mojiao zwj</code><br>        <code>id zwj：uid=1001(zwj) gid=1002(mojiao) 组=1002(mojiao)</code><br>    新增一个用户john，怎么把john放进组mojiao中？<br>        <code>useradd jhon</code><br>        <code>usermod -g mojiao jhon</code><br>        新增一个用户john，john在以自己的名字命名的组john中，从john组到mojiao组<br><strong>删除组：groupdel 组名</strong></p><ol><li><strong>用户和组的相关文件</strong></li></ol><p>(1)<code>/etc/passwd</code> 文件<br>每增加一个用户，就会把用户的信息保存到该文件。<br>用户（user）的配置文件，记录用户的各种信息<br>每行都是一个用户，每行的含义：用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell</p><p>主目录：用户所在的家目录</p><p>shell：命令解释程序<br>    将发布的指令通过shell解析，再传给Linux内核<br>    Linux是看不懂发布的指令的<br>    shell有很多种，中国一般用的是bash</p><p>命令：<code>vim /etc/passwd</code> 可以查看该文件(还有其他命令)</p><p>(2)/etc/shadow 文件<br>口令的配置文件<br>每行的含义：登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</p><p>(3)<code>/etc/group</code> 文件<br>组(group)的配置文件，记录 Linux 包含的组的信息每行含义：组名:口令:组标识号:组内用户列表</p><h4 id="7-Linux-实操篇-实用指令"><a href="#7-Linux-实操篇-实用指令" class="headerlink" title="7.Linux 实操篇-实用指令"></a>7.Linux 实操篇-实用指令</h4><ol><li>运行级别</li></ol><p>Linux系统运行级别：<br>0：关机<br>1：单用户【可以找回丢失密码】<br>2：多用户状态没有网络服务(一般不用，没网络)<br>3：多用户状态有网络服务<br>4：系统未使用保留给用户<br>5：图形界面<br>6：系统重启<br>常用运行级别是 3 和 5</p><p>切换运行级别命令：init 选0-6</p><p>指定默认运行级别：<br>    CentOS7之前是在文件<code>/etc/inittab</code>文件中设置<br>    CentOS7之后对设置进行了简化：<br>        用 <code>multi-user.target</code> 代表3运行级别<br>        用 <code>graphical.target</code> 代表5运行级别<br>        7版本之后主要用3和5运行级别。</p><p>用命令：<code>systemctl get-default</code> 查看当前系统运行级别<br>用命令：<code>systemctl set-default multi-user.target /graphical.target</code>  设置默认运行级别</p><ol><li><strong>帮助指令</strong></li></ol><p><strong>语法：man 命令或配置文件</strong><br>是manual的简写，manual是手册的意思</p><p>功能：获得帮助信息<br>例子：查看ls命令的帮助信息</p><p>输入 man ls 之后，会看到ls的具体信息(要回到前一个页面，输入q)<br>注意：可能不止一页，使用空格或下键，可以往下看</p><p>ls命令：列出目录内容<br>格式：<code>ls [选项] [文件名...]</code><br>     <code>ls  -a</code>  —-&gt;列出所有文件，包括隐藏文件(隐藏文件以 . 开头)<br>     <code>ls  -l</code>  —-&gt;单列输出 </p><p>选项以 - 开始<br>选项可以组合使用，没有顺序：<br>比如： ls -al  也可以 ls -a -l  表示列出所有的文件 并 单列输出</p><p>ls默认是对当前目录下的文件<br>也可以指定某个目录：</p><p>如： <code>ls -al /root</code>  把root目录下的所有文件单列输出</p><p>语法：help 命令<br>功能：获得 shell 内置命令的帮助信息<br>例子：查看 cd 命令的帮助信息<code>help cd</code></p><p>语法：man [命令或配置文件]<br>功能：获得帮助信息<br>例子：查看ls命令的帮助信息<code>man ls</code></p><ol><li><strong>文件目录指令</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">基本语法：pwd    (print working directory)<br>功能：显示当前目录的绝对路径<br>---------------------------------------------------------------------<br><br>基本语法：ls [选项] [目录或是文件]<br>常用选项：<br>-a：显示当前目录所有的文件和目录，包括隐藏的。<br>-l：以列表的方式显示信息<br>---------------------------------------------------------------------<br><br>基本语法：cd [参数]<br>功能：切换到指定目录<br><br>cd ~ 或者 cd ---&gt;回到当前用户的家目录 <br>cd ..   ---&gt;回到当前目录的上一级目录<br><br>案例 1：使用绝对路径切换到 root 目录<br>cd /root<br><br>案例 2：使用相对路径到 root 目录<br>比如当前在 /home/tom <br>cd ../../root    ../..回到了根目录,再/root<br><br>---------------------------------------------------------------------<br><br>基本语法：mkdir [选项] 要创建的目录路径<br>功能：创建目录<br>常用选项：<br>-p：创建多级目录<br><br>案例1：在home下创建一个目录dog<br>mkdir /home/dog<br><br>案例2：在home下创建多级目录 /home/animal/tiger <br>mkdir -p /home/animal/tiger<br><br>---------------------------------------------------------------------<br><br>基本语法：rmdir [选项] 要删除的空目录路径<br>功能：删除一个空目录<br><br>案例:删除一个目录 /home/dog<br>rmdir /home/dog<br><br>注意：<br>rmdir 删除的是空目录，如果目录下有内容是无法删除的。<br>如果需要删除非空目录，需要使用命令：rm -rf 要删除的目录<br>比如： 删除animal目录<br>rm -rf /home/animal<br>---------------------------------------------------------------------<br><br>基本语法：touch 文件名称<br>功能：创建空文件<br><br>案例:：在/home 目录下，创建一个空文件 hello.txt<br>touch /home/hello.txt<br>或者当前目录是home：touch hello.text<br><br>---------------------------------------------------------------------<br><br>基本语法：cp [选项] 被拷贝的文件 拷贝到哪个地方<br>功能：拷贝文件到指定目录<br>常用选项：<br>-r：递归复制整个文件夹<br><br>案例1：将 /home/hello.txt  拷贝到/home/bbb  目录下<br>若在根目录下操作：<br>先创建 bbb目录<br>mkdir /home/bbb<br>然后复制<br>cp /home/hello.txt /home/bbb<br><br>案例2：递归复制整个文件夹，比如将 /home/bbb 整个目录，拷贝到 /opt <br>cp -r /home/bbb /opt<br><br>注意：强制覆盖不提示的方法：\cp<br>\cp -r /home/bbb /opt<br><br>---------------------------------------------------------------------<br><br>基本语法：rm[选项] 要删除的文件或目录<br>功能：移除文件或目录<br>常用选项：<br>-r：递归删除整个文件夹<br>-f：强制删除不提示<br><br>案例1：将 /home/hello.txt 删除 <br>rm/home/hello.txt<br><br>案例2：递归删除整个文件夹 /home/bbb ，并不提示<br>rm -rf /home/bbb <br><br>注意：强制删除不提示的方法：带上 -f 参数即可<br>---------------------------------------------------------------------<br><br>功能：移动文件与目录或重命名<br>基本语法：<br>mv原文件名 新文件名      (功能描述：重命名)<br>mv  被移动的文件 移动到哪   (功能描述：移动文件)<br><br>案例 1: 将 /home/cat.txt 文件 重新命名为 pig.txt<br>[root@hspEdu01 ~]# cd /home<br>[root@hspEdu01 home]# touch cat.txt<br>[root@hspEdu01 home]# ls<br>cat.txt  jack  king  milan  zwj<br>[root@hspEdu01 home]# mv cat.txt pig.txt<br>[root@hspEdu01 home]# ls<br>jack  king  milan  pig.txt  zwj<br><br>案例 2:将 /home/pig.txt文件 移动到 /root 目录下<br>[root@hspEdu01 home]# mv pig.txt /root<br>[root@hspEdu01 home]# ls<br>jack  king  milan  zwj<br>[root@hspEdu01 home]# cd /root<br>[root@hspEdu01 ~]# ls<br>Hello.java  pig.txt <br><br>移动并重名：mv pig.txt /root/cow.txt<br><br>案例 3: 移动整个目录,比如将 /opt/bbb  移动到 /home 下<br> mv /opt/bbb /home/<br><br>---------------------------------------------------------------------<br>前面学过一个查看：vim<br>cat也可以查看，cat只能查看不能修改，cat更安全。<br><br>基本语法：cat[选项] 要查看的文件<br>功能：查看文件内容<br>常用选项：<br>-n：显示行号<br><br>案例1：查看 /etc/profile 文件内容，并显示行号。<br>cat-n /etc/profile <br>注意：<br>cat 只能浏览文件，而不能修改文件；为了浏览方便再加上管道命令 | more <br>管道命令：把前面的结果再交给下一个指令进行处理。<br>语法：| 其他指令<br><br>cat-n /etc/profile | more <br>意思：先执行cat -n /etc/profile 然后，按回车键输出一行，按空格翻页等。<br><br>---------------------------------------------------------------------<br><br>基本语法：more 要查看的文件<br>功能：<br>more 指令是一个基于 VI 编辑器的文本过滤器，它以全屏幕的方式按页显示文本文件的内容。<br>more 指令中内置了若干快捷键(交互的指令)，详见操作说明：<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/567c27b6513c4c8f948226bc232b38dc.bmp" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">基本语法：less 要查看的文件<br>功能：<br>less 指令用来分屏查看文件内容，它的功能与 more 指令类似，但是比 more 指令更加强大，支持各种显示终端。<br>less 指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，对于显示大型文件具有较高的效率。<br><br>有一个文件是100M，用vim查看会将其全部加载再显示出来，这样会很慢。<br>使用less，会先加载一部分显示出来，再根据指令显示剩下的，这样更快。<br><br>所以要查找一些大的文件，建议用less。<br>案例: 采用 less 查看一个大文件文件 /opt/杂文.txt<br>首先使用xftp将杂文.txt传输到opt下<br>然后输入指令：less /opt/杂文.txt  <br><br>下面操作中：<br>想要找某个字或词<br>输入：/要找的字或词    然后按n向下找  按N向上找<br>操作说明：<br></code></pre></td></tr></table></figure><h2 id="第七章-Linux-实操-开机、重启和用户注销"><a href="#第七章-Linux-实操-开机、重启和用户注销" class="headerlink" title="第七章 Linux 实操-开机、重启和用户注销"></a>第七章 Linux 实操-开机、重启和用户注销</h2><h3 id="7-1-关机-amp-重启命令"><a href="#7-1-关机-amp-重启命令" class="headerlink" title="7.1 关机&amp;重启命令"></a>7.1 关机&amp;重启命令</h3><ul><li><code>shutdown</code>   -h   now     立刻进行关机</li><li>shutdown   -h     1               “hello,1分钟后就会关机了” </li><li>shutdown    -r     now             现在重新启动计算机</li><li>halt                                            关机</li><li>reboot                                      现在重新启动计算机</li><li>sync                                           把内存的数据同步到磁盘上</li></ul><p>注意：不管重启系统还是关闭系统，首先要运行sync命令，把内存的数据写到磁盘中</p><p>其中<code>shutdown/reboot/halt</code> 等命令均已在关机前进行了sync</p><h3 id="7-2-用户登录和注销"><a href="#7-2-用户登录和注销" class="headerlink" title="7.2  用户登录和注销"></a>7.2  用户登录和注销</h3><ol><li><code>su -用户名</code>用来切换成管理员身份和用户身份</li><li><code>logout</code> 立即注销用户</li></ol><p>注意：<code>logout</code>注销命令在图形运行级别无效，在运行级别3以下有效</p><h2 id="第八章-LINUX实操篇-用户管理"><a href="#第八章-LINUX实操篇-用户管理" class="headerlink" title="第八章 LINUX实操篇-用户管理"></a>第八章 LINUX实操篇-用户管理</h2><h3 id="8-1-基本介绍"><a href="#8-1-基本介绍" class="headerlink" title="8.1 基本介绍"></a>8.1 基本介绍</h3><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/image-20221019090240881.png" alt="image-20221019090240881"></p><h3 id="8-2-添加用户"><a href="#8-2-添加用户" class="headerlink" title="8.2 添加用户"></a>8.2 添加用户</h3><h4 id="8-2-1-基本语法"><a href="#8-2-1-基本语法" class="headerlink" title="8.2.1 基本语法"></a>8.2.1 基本语法</h4><p><code>useradd</code> 用户名</p><ul><li>细节:当创建用户完成后，会自动创建和用户同名的家目录</li><li>也可以通过useradd -d 指定目录 新的用户名 ，给新创建的用户指定家目录</li></ul><h3 id="8-3-指定修改密码"><a href="#8-3-指定修改密码" class="headerlink" title="8.3 指定修改密码"></a>8.3 指定修改密码</h3><p><code>passwd</code> 用户名           例子：  passwd    milan   给米蓝 指定密码</p><h3 id="8-4-删除用户"><a href="#8-4-删除用户" class="headerlink" title="8.4 删除用户"></a>8.4 删除用户</h3><p><code>userdel</code>   用户名</p><ul><li>userdel  milan  删除用户但是保留家目录</li><li>删除用户及用户的主目录：userdel -r tom</li></ul><h3 id="8-5-查询用户信息指令"><a href="#8-5-查询用户信息指令" class="headerlink" title="8.5 查询用户信息指令"></a>8.5 查询用户信息指令</h3><p>id 用户名       例如   # id  root    查询root的信息 </p><p>细节：当用户不存在是，返回无此用户</p><h3 id="8-6-切换用户"><a href="#8-6-切换用户" class="headerlink" title="8.6 切换用户"></a>8.6 切换用户</h3><p>su       切换用户名</p><ul><li>从权限高的用户切换到权限低的用户，不需要输入密码反之需要</li><li>当需要返回到原来用户的桌面是，使用exit/logout 指令</li></ul><h3 id="8-7-查看当前用户-登录用户"><a href="#8-7-查看当前用户-登录用户" class="headerlink" title="8.7 查看当前用户/登录用户"></a>8.7 查看当前用户/登录用户</h3><p><code>whoami/ who  an  i</code></p><h3 id="8-8-用户组"><a href="#8-8-用户组" class="headerlink" title="8.8 用户组"></a>8.8 用户组</h3><p><code>groupadd</code>   组名</p><p>删除组：<code>gropudel</code> 组名</p><ul><li>增加用户时直接加入组</li><li>useradd -g 用户组  用户名</li><li>增加一个用户 zwj  直接指定他的组为 wudang</li><li>groupadd wudang           useradd -g wudang zwj</li></ul><p>修改用户的组</p><figure class="highlight plaintext"><figcaption><span>-g```  用户组  用户名</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><code class="hljs usermod"><br>### 8.9 用户和组的相关文件<br><br>`/etc/passwd` 文件 每行的含义 :用户名：口令：用户标识符：注释性描述：主目录：登录Shell<br><br>`/etc/shadow` 文件 每行的含义：登录名：加密口令：最后一次修改的时间：最小时间间隔：最大时间间隔：不活动时间：失效时间：标志<br><br>`/etc/group` 文件  每行的含义:组名：组标识号：组内用户列表<br><br>## 第九章 LINUX实操篇-实用指令<br><br>0：关机<br><br>1：单用户【可以找回丢失密码】<br><br>2：多用户状态没有网络服务(一般不用，没网络) <br><br>3：多用户状态有网络服务 <br><br>4：系统未使用保留给用户 <br><br>5：图形界面 <br><br>6：系统重启<br><br>常用运行级别是 3 和 5  切换运行级别命令：init  * (选则0-6的一个)<br><br>CentOS7之前是在文件/etc/inittab文件中设置在其之后设置进行了简化：<br><br>`multi-user.target:analogous to runlevel 3`<br><br>`graphical.target:analogous to runlevel 5`<br><br>`systemctl get-default` 查看当前系统运行级别<br><br>`systemctl set-default multi-user.target /graphical.target`  设置默认运行级别<br><br>**找回用户密码**<br><br>1. 再开机启动进入开机界面按&#x27;e&#x27;进入编辑界面然后<br>2. 找到以 LINXU16开头的行 在最后输入的`init=/bin/sh`<br>3. 输入完成后按`Ctrl+x`进入单用户模式<br>4. 接着在光标闪烁的位置中输入 : `mount -o remount,rw /` 每个单词间有空格 完成后回车<br>5. 在新的一行最后输入: passwd  完成修改 再次输入密码<br>6. 接着在鼠标闪烁的最后一行中输入:`touch /.autorelable`  (注意touch与/后有一个空格)完成后回车<br>7. 接着在输入 `exec /sbin/init` 完成后回车等待系统重启<br><br>**帮助指令**<br><br>man 【命令或配置文件】<br><br>例如 输入 `man ls` 之后，会看到ls的具体信息(要回到前一个页面，输入q)<br><br>ls   （列出目录内容）<br><br>指令：ls [选项] [文件名...]<br><br>​            ls  -a  ---&gt;列出所有文件，包括隐藏文件(隐藏文件以 . 开头)<br><br>​ls  -l  ---&gt;单列输出 <br><br>可以以 -开始使用组合，没有顺序<br><br>例如： `ls -al`  或者 `ls -a -l`  ：表示列出所有的文件并单列输出<br><br>​`ls -al /root`  ：把root目录下的所有文件单列输出<br><br>`help` 命令：获得 shell 内置命令的帮助信息<br><br> **关于文件目录的指令**<br><br>`pwd    (print working directory)` ：显示当前目录的绝对路径<br><br>基本语法：`ls  [选项] [目录或是文件]`<br><br>常用选项：`-a：显示当前目录所有的文件和目录，包括隐藏的。`<br><br>​`-l：以列表的方式显示信息`<br><br>基本语法：`cd [参数]`  ：切换到指定目录<br><br>​`cd ~ 或者 cd` ：回到当前用户的家目录 <br><br>​`cd ..`  ：回到当前目录的上一级目录<br><br>​`cd /root`：使用绝对路径切换到 root 目录<br><br>基本语法：`mkdir [选项] 要创建的目录路径` ：创建目录<br><br>​`madir -p 要创建的目录路径` :   创建多级目录<br><br>例如： `mkdir /home/dog` ：在home下创建一个目录dog<br><br>​`mkdir -p /home/animal/tiger`  ：在home下创建多级目录 /home/animal/tiger <br><br>基本语法：`rmdir [选项] 要删除的空目录路径`  ：删除一个空目录<br><br>注意： rmdir 删除的是空目录，如果目录下有内容是无法删除的。 如果需要删除非空目录，需要使用命令：rm -rf 要删除的目录<br><br>例如：`rm -rf /home/animal` ：删除animal目录<br><br>基本语法：`touch 文件名称 ` ：创建空文件<br><br>例如; `touch /home/hello.txt`  :在/home 目录下，创建一个空文件 hello.txt<br><br>基本语法：`cp [选项] 被拷贝的文件 拷贝到哪个地方 ` :拷贝文件到指定目录<br><br>​选项-r：递归复制整个文件夹<br><br> 例如：`cp /home/hello.txt /home/bbb` ：将 /home/hello.txt  拷贝到/home/bbb  目录下<br><br>​`cp -r /home/bbb /opt `：递归复制整个文件夹，比如将 /home/bbb 整个目录，拷贝到 /opt <br><br>​`\cp -r /home/bbb /opt` ：强制覆盖不提示的方法：\cp<br><br>基本语法：`rm[选项] 要删除的文件或目录` ：移除文件或目录<br><br>常用选项：-r：递归删除整个文件夹<br><br>​-f：强制删除不提示<br><br>例如： `rm -rf /home/bbb`  ：递归删除整个文件夹 /home/bbb ，并不提示<br><br>注意：强制删除不提示的方法：带上 -f 参数即可<br><br>```shell<br>基本语法：<br>mv原文件名 新文件名      (功能描述：重命名)<br>mv  被移动的文件 移动到哪   (功能描述：移动文件)<br>案例 :将 /home/cat.txt 文件 重新命名为 pig.txt<br>[root@hspEdu01 ~]# cd /home<br>[root@hspEdu01 home]# touch cat.txt<br>[root@hspEdu01 home]# ls<br>cat.txt  jack  king  milan  zwj<br>[root@hspEdu01 home]# mv cat.txt pig.txt<br>[root@hspEdu01 home]# ls<br>jack  king  milan  pig.txt  zwj<br>案例 2:将 /home/pig.txt文件 移动到 /root 目录下<br>[root@hspEdu01 home]# mv pig.txt /root<br>[root@hspEdu01 home]# ls<br>jack  king  milan  zwj<br>[root@hspEdu01 home]# cd /root<br>[root@hspEdu01 ~]# ls<br>Hello.java  pig.txt <br>移动并重名：mv pig.txt /root/cow.txt<br>案例 3: 移动整个目录,比如将 /opt/bbb  移动到 /home 下<br> mv /opt/bbb /home/<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim 和 cat 都可以查看但是：cat只能查看不能修改，cat更安全。<br>基本语法：<br>cat[选项] 要查看的文件<br>功能：查看文件内容<br>常用选项：<br>-n：显示行号<br>案例1：查看 /etc/profile 文件内容，并显示行号。<br>cat-n /etc/profile<br>注意：        <br>cat 只能浏览文件，而不能修改文件；为了浏览方便再加上管道命令 | more <br>管道命令：把前面的结果再交给下一个指令进行处理。<br>语法：| 其他指令<br><br>cat-n /etc/profile | more <br>意思：先执行cat -n /etc/profile 然后，按回车键输出一行，按空格翻页等。<br>基本语法：more 要查看的文件<br>功能:<br>more 指令是一个基于 VI 编辑器的文本过滤器，它以全屏幕的方式按页显示文本文件的内容。<br>more 指令中内置了若干快捷键(交互的指令)，详见操作说明：<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/image-20221019100037822.png" alt="image-20221019100037822"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">基本语法：less 要查看的文件</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">功能：</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">less 指令用来分屏查看文件内容，它的功能与 more 指令类似，但是比 more 指令更加强大，支持各种显示终端。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">less 指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，对于显示大型文件具有较高的效率。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">有一个文件是100M，用vim查看会将其全部加载再显示出来，这样会很慢。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用less，会先加载一部分显示出来，再根据指令显示剩下的，这样更快。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">所以要查找一些大的文件，建议用less。</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例: 采用 less 查看一个大文件文件 /opt/杂文.txt</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">输入指令：</span><br>less /opt/杂文.txt  <br><span class="hljs-meta prompt_">#</span><span class="language-bash">下面操作中：</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">想要找某个字或词</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">输入：/要找的字或词    然后按n向下找  按N向上找</span><br></code></pre></td></tr></table></figure><p>操作说明：</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/image-20221019100348211.png" alt="image-20221019100348211"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">基本语法：echo [选项][输出内容]<br><span class="hljs-meta prompt_">#</span><span class="language-bash">功能：输出内容到控制台</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例: 使用 <span class="hljs-built_in">echo</span>  指令输出环境变量</span><br>echo $HOSTNAME (环境变量一般加$)<br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例: 使用 <span class="hljs-built_in">echo</span> 指令输出 hello,world!</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">输入：<span class="hljs-built_in">echo</span> hello,world!</span><br> echo &quot;hello,world!&quot;  #加不加引号都可以<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">功能：<span class="hljs-built_in">head</span> 用于显示文件的开头部分内容，默认情况下 <span class="hljs-built_in">head</span> 指令显示文件的前 10 行内容。</span><br>基本语法：<br>head  文件    #(功能描述：查看文件头 10 行内容)<br>head -n 5 文件#(功能描述：查看文件头 5 行内容，5 可以是任意行数)<br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例: 查看/etc/profile 的前面 5 行代码</span><br>head -n 5 /etc/profile<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#功能：tail 用于输出文件中尾部的内容，默认情况下 tail 指令显示文件的前 10 行内容。</span></span><br>基本语法：<br>tail 文件    #（功能描述：查看文件尾 10 行内容）<br>tail -n 5 文件#（功能描述：查看文件尾 5 行内容，5 可以是任意行数）<br>tail -f文件    #（功能描述：实时追踪该文档的所有更新，只要该文件改动了什么内容就可实时看到）<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">指令和&gt;&gt;指令：</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">输出重定向(覆盖)</span><br>    &gt;&gt; 追加<br>基本语法：<br>ls -l &gt;文件1         #(功能描述：将列表的内容写入文件1中(覆盖写))<br>ls -al &gt;&gt;文件1        #(功能描述：将列表的内容追加到文件1的末尾)<br>cat 文件 1 &gt; 文件 2  #(功能描述：将文件 1 的内容覆盖到文件 2)<br>echo &quot;内容&quot;&gt;&gt; 文件1     #(将内容追加到文件1的末尾)<br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例 1: 将 /home 目录下的文件列表 写入到 /home/info.txt 中,覆盖写入。</span><br>ls -l /home &gt; /home/info.txt#[如果 info.txt 没有，则会自动创建] <br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例 2: 将当前日历信息 追加到/home/mycal 文件中</span><br>cal &gt;&gt; /home/mycal<br><span class="hljs-meta prompt_">#</span><span class="language-bash">功能：给原文件创建一个软链接</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 软链接也称为符号链接，类似于 windows 里的快捷方式，主要存放了链接其他文件的路径</span><br>基本语法：<br>ln -s [原文件或目录] [软链接名] #（功能描述：给原文件创建一个软链接）<br>ln是link<br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例1：在/home 目录下创建一个软连接 myroot，连接到 /root 目录</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">(这样 切换到myroot 其实就是切换到root)</span><br>ln -s /root/home/myroot<br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例2: 删除软连接 myroot</span> <br>rm/home/myroot<br><span class="hljs-meta prompt_">#</span><span class="language-bash">当我们使用 <span class="hljs-built_in">pwd</span> 指令查看目录时，仍然看到的是软链接所在目录。</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">功能：查看已经执行过历史命令,也可以执行历史指令</span><br>基本语法：<br>history #（功能描述：查看已经执行过历史命令）<br><span class="hljs-meta prompt_">#</span><span class="language-bash">可以看其他登录的用户做了什么操作。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例 1: 显示所有的历史命令</span><br>history<br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例 2: 显示最近使用过的 10 个指令。</span><br>history 10<br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例 3：执行历史编号为 5 的指令</span><br>!5<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs shell">date指令：<br>1.显示当前日期<br>基本语法：<br>date  （功能描述：显示当前时间）<br>date +%Y  （功能描述：显示当前年份）<br>date +%m  （功能描述：显示当前月份）<br>date +%d  （功能描述：显示当前是哪一天）<br>date &quot;+%Y-%m-%d %H:%M:%S&quot;（功能描述：显示年月日时分秒）<br>Y year<br>m month<br>d day<br>H hour<br>M minute<br>S second<br>案例 1: 显示当前时间信息<br>date<br>案例 2: 显示当前时间年月日<br>date &quot;+%Y-%m-%d&quot;<br>案例 3: 显示当前时间年月日时分秒<br>date &quot;+%Y-%m-%d %H:%M:%S&quot;<br><br>2.设置日期<br>基本语法：<br>date -s字符串时间<br><br>案例 1: 设置系统当前时间<br>date -s &quot;2020-11-03 20:02:10&quot;<br><br><br>cal指令：<br>查看日历指令 cal<br><br>基本语法：<br>cal [选项]（功能描述：不加选项，显示本月日历）<br><br>案例 1: 显示当前日历 <br>cal<br>案例 2: 显示 2020 年日历 <br>cal 2020<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">find 指令<br><span class="hljs-meta prompt_">#</span><span class="language-bash">从指定目录向下递归地遍历其各个子目录，将满足条件的文件或者目录显示在终端。</span><br>    <br>    基本语法：<br>find [搜索范围] [选项]<br></code></pre></td></tr></table></figure><p>选项说明：</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/image-20221019101315674.png" alt="image-20221019101315674"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">案例 1: 按文件名：根据名称查找 /home 目录下的 hello.txt 文件</span><br>find /home -name hello.txt<br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例 2：按拥有者：查找 /opt 目录下，用户名称为 nobody 的文件</span><br>find /opt -user nobody<br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例 3：查找整个 linux 系统下大于 200M 的文件</span><br>+n 大于<br>    -n 小于<br>    n 等于<br>单位有 k,M,G <br>find / -size +200M<br>例子：<br>[root@hspEdu01 opt]# find / -size +200M<br>/run/media/root/CentOS 7 x86_64/LiveOS/squashfs.img (这个文件大于200M)<br>[root@hspEdu01 opt]# cd /run/media/root/CentOS\ 7\ x86_64/LiveOS/<br>[root@hspEdu01 LiveOS]# ls<br>squashfs.img  TRANS.TBL<br>[root@hspEdu01 LiveOS]# ls -l<br>总用量 442741<br>-rw-r--r--. 1 root root 453365760 11月 26 2018 squashfs.img<br>-r--r--r--. 1 root root       224 11月 26 2018 TRANS.TBL<br>[root@hspEdu01 LiveOS]# ls -lh  #(上面的总用量大小看不懂，加上h human 能看懂的内容)<br>总用量 433M<br>-rw-r--r--. 1 root root 433M 11月 26 2018 squashfs.img<br>-r--r--r--. 1 root root  224 11月 26 2018 TRANS.TBL<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">locate 指令<br><span class="hljs-meta prompt_">#</span><span class="language-bash">可以快速定位文件路径。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">利用事先建立的系统中所有文件名称及路径的 locate 数据库实现快速定位给定的文件。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Locate 指令无需遍历整个文件系统，查询速度较快。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">为了保证查询结果的准确度，管理员必须定期更新 locate 时刻</span><br><br>基本语法:<br>locate 搜索文件<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">注意：</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">由于 locate 指令基于数据库进行查询，</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">所以第一次运行前，必须使用 updatedb 指令创建 locate 数据库。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例 1: 请使用 locate 指令快速定位 hello.txt 文件所在目录</span><br>updatedb<br>locate hello.txt<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">grep 指令和 管道符号 |  <br><span class="hljs-meta prompt_">#</span><span class="language-bash">grep指令往往和管道符号 | 结合使用</span><br>grep：过滤查找<br>管道符：“|”<br><span class="hljs-meta prompt_">#</span><span class="language-bash">表示将前一个命令的处理结果输出传递给后面的命令处理。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">比如：先 <span class="hljs-built_in">cat</span> a.txt，然后又想看a.txt文件中有没有hello这个词</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">那么就 <span class="hljs-built_in">cat</span> a.txt | grep <span class="hljs-string">&quot;hello&quot;</span> ---&gt;先找到a.txt，然后再在a.txt中找hello</span><br><br>基本语法：<br>grep [选项] 查找内容 源文件<br>常用选项：<br>-n  显示匹配行及行号<br>-i   忽略字母大小写<br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例 1: 请在 hello.txt 文件中，查找<span class="hljs-string">&quot;yes&quot;</span>所在行，并且显示行号</span><br>写法 1: <br>        cat /home/hello.txt| grep &quot;yes&quot;      #引号写不写都行<br>cat /home/hello.txt| grep -n &quot;yes&quot;   # 显示行号    <br>写法 2: <br>        grep -n &quot;yes&quot; /home/hello.txt<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">gzip/gunzip 指令<br>gzip    #用于压缩文件<br>gunzip  #用于解压的<br>    基本语法：<br>gzip 文件  #功能描述：压缩文件，只能将文件压缩为*.gz 文件）<br>gunzip 文件.gz #（功能描述：解压缩文件命令）<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#案例 1: gzip 压缩，将 /home 下的 hello.txt 文件进行压缩</span></span><br>gzip /home/hello.txt<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例 2: gunzip 解缩，将 /home 下的 hello.txt.gz 文件进行解压</span><br>gunzip /home/hello.txt.gz<br><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">zip/unzip 指令<br>zip 用于压缩文件<br>unzip 用于解压的 <br><span class="hljs-meta prompt_">#</span><span class="language-bash">（这个在项目打包发布中很有用的）</span><br><br>基本语法：<br>zip[选项] XXX.zip 将要压缩的内容    #（功能描述：压缩文件和目录的命令）<br>unzip [选项] XXX.zip              #（功能描述：解压文件）<br>    <br>    zip 常用选项<br>-r：递归压缩，即压缩目录<br><br>unzip 的常用选项<br>-d&lt;目录&gt; ：指定解压后文件的存放目录<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例 1:将 /home 下的所有文件/文件夹压缩成 myhome.zip</span><br>zip -r myhome.zip /home/#[将 home 目录及其包含的文件和子文件夹都压缩] <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例 2:将 myhome.zip 解压到 /opt/tmp 目录下</span><br>mkdir /opt/tmp<br>unzip -d /opt/tmp /home/myhome.zip<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar 指令<br><span class="hljs-meta prompt_">#</span><span class="language-bash">tar 指令是打包指令，最后打包后的文件是 .tar.gz 的文件。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">把一个或者多个文件（夹）用压缩软件进行压缩的过程，一般可称之为打包。</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">tar指令可以压缩也可以解压。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">根据选项来 压缩还是解压。</span><br><br>基本语法：<br>tar[选项] XXX.tar.gz 打包的内容 # (功能描述：打包目录，压缩后的文件格式.tar.gz)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/image-20221019102258590.png" alt="image-20221019102258590"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">案例 1:压缩多个文件，将 /home/pig.txt 和 /home/cat.txt 压缩成 pc.tar.gz</span> <br>tar -zcvf pc.tar.gz /home/pig.txt /home/cat.txt<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#使用了选项：-z -c -v -f</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">多个文件就 空格直接写在后面就好了</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例 2:将 /home 的文件夹压缩成 myhome.tar.gz</span> <br>tar -zcvf myhome.tar.gz /home/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例 3:将 pc.tar.gz 解压到当前目录</span><br>tar -zxvf pc.tar.gz<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例 4:将 myhome.tar.gz 解压到 /opt/tmp2 目录下</span><br>mkdir /opt/tmp2 <br>   tar -zxvf /home/myhome.tar.gz -C /opt/tmp2<br><span class="hljs-meta prompt_">#</span><span class="language-bash">注意：-C 后写要解压到的位置</span><br></code></pre></td></tr></table></figure><h2 id="第十章-LINXU组管理和权限管理"><a href="#第十章-LINXU组管理和权限管理" class="headerlink" title="第十章 LINXU组管理和权限管理"></a>第十章 LINXU组管理和权限管理</h2><p>在 linux 中的每个用户必须属于一个组，不能独立于组外。<br>在 linux 中每个文件都有所有者、所在组、其它组的概念。</p><p>1)    所有者<br>2)    所在组<br>3)    其它组<br>4)    改变用户所在的组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">一般为文件的创建者，谁创建了该文件，就自然的成为该文件的所有者。<br>但是所有者也可以更改。<br><br>1.查看文件/目录的所有者(在/home下才能看到)<br>指令：ls –ahl<br>-ahl是三个选项<br>-h human 让输出的结果方便人看(文件的大小容易看)<br><br>drwxr-xr-x.  6 root root   4.0K 2月  23 13:59 .<br>dr-xr-xr-x. 18 root root   4.0K 2月  20 16:45 ..<br>-rw-r--r--.  1 root root     24 2月  22 21:59 hello.txt<br>...<br>第三列就是文件的所有者<br><br>2.修改文件/目录所有者指令：chown 新所有者 文件名<br>案例：<br>要求：使用 root 创建一个文件 apple.txt ，然后将其所有者修改成 tom<br>  chown tom apple.txt<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">基本指令:<br>groupadd 组名<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例：创建一个组 monster</span> <br>groupadd monster<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建一个用户 fox ，并放入到monster 组中</span><br>useradd -g monster fox<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">当某个用户创建了一个文件后，这个文件的所在组就是该用户所在的组(默认)。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看文件/目录所在组</span><br>指令:<br>ls –ahl  或者ll<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">ll并不是linux下一个基本的命令，它实际上是<span class="hljs-built_in">ls</span> -l的一个别名。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Ubuntu默认不支持命令ll，必须用 <span class="hljs-built_in">ls</span> -l，这样使用起来不是很方便。</span><br><br>案例：使用 fox 来创建一个文件，看看该文件属于哪个组?<br>使用fox创建一个文件：<br>su fox<br>然后touch ok.txt<br>然后ll<br><br>-rw-r--r--. 1 fox monster 0 11 月 5 12:50 ok.txt<br><span class="hljs-meta prompt_">#</span><span class="language-bash">第三列：文件的所有者(谁创建了这个文件，就是这个文件的所有者)</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">第四列：文件的所在组(某个用户创建了一个文件，该文件所在组=该用户所在组)</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">注意：/etc/group下存放着所有的组</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用指令：<span class="hljs-built_in">cat</span> /etc/group 可以查看所有的组</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">比如查看有没有mojiao这个组</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">可以使用管道命令和grep过滤</span><br>cat /etc/group | grep mojiao<br><span class="hljs-meta prompt_">#</span><span class="language-bash">当一个文件很大，想找某个关键词就可以这个过滤！</span><br><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改文件/目录所在的组</span><br>指令：<br>chgrp 组名 文件名<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例：使用 root 用户创建文件 orange.txt ,看看当前这个文件属于哪个组，</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 然后将这个文件所在组，修改到 fruit 组。</span><br><br>groupadd fruit<br>touch orange.txt<br><span class="hljs-meta prompt_">#</span><span class="language-bash">看看当前这个文件属于哪个组 -&gt; root 组</span><br>chgrp fruit orange.txt<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在添加用户时，可以指定将该用户添加到哪个组中，同样的用 root 的管理权限可以改变某个用户所在的组。</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">改变用户所在组</span><br>usermod–g新组名用户名<br>usermod–d目录名用户名 (改变该用户登陆的初始目录)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">特别说明：用户需要有进入到新目录的权限。</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如何查看用户所在的组？</span><br>id 用户名  ---&gt;显示用户信息<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例：</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">将 zwj 这个用户从原来所在组，修改到 wudang 组</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">先查看zwj在哪个组：</span><br>id zwj<br><span class="hljs-meta prompt_">#</span><span class="language-bash">然后查看有没有wudang这个组：</span><br>cat /etc/group | grep wudang<br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改：</span><br>usermod -g wudang zwj<br><br></code></pre></td></tr></table></figure><p><strong>权限的基本介绍</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls -l 中显示的内容如下：<br>-rwxrw-r-- 1 root root 1213 Feb 2 09:39 abc<br>第一列共10位<br><br>0-9 位说明：<br> 第 0 位确定文件类型(d, - , l , c , b)<br>d 是目录，相当于 windows 的文件夹<br>- 代表是普通文件(.txt)<br>l 是链接，相当于 windows 的快捷方式<br>c 是字符设备文件，比如鼠标，键盘    ---&gt; /dev/目录下可以看到<br>b 是块设备，比如硬盘    ---&gt; /dev/目录下可以看到<br><br>第 1-3 位确定 该文件的所有者 对该文件的 权限。---User<br>第 4-6 位确定 该文件所属的组和该组中的用户 对该文件的 权限。---Group <br>第 7-9 位确定 其他用户(不是所有者，也不是同一组的其他用户) 对该文件的权限 ---Other<br></code></pre></td></tr></table></figure><p>rwx权限的详解</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">权限有三种：<br>r 代表可读(read)<br>w 代表可写(write)<br>x 代表可执行(execute)<br><br>rwx 作用到文件：<br>r: 可以读取,查看<br>w: 可以修改,但是不代表可以删除该文件<br>   删除一个文件的前提条件是 对该文件所在的目录 有 写权限，才能删除该文件.<br>x: 可以被执行,前提是可执行文件<br><br>rwx 作用到目录：<br>r: 可以读取，可以用 ls 查看目录内容<br>w: 可以修改, 可以对目录进行 创建+删除+重命名目录<br>x: 可以进入该目录<br></code></pre></td></tr></table></figure><p><strong>文件/目录权限的实际案例</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls -l 中显示的内容如下：<br>-rwxrw-r-- 1 root root 1213 Feb 2 09:39 abc<br><br>第一列中 10 个字符 确定不同用户能对文件干什么(权限)：<br>第一个字符代表文件类型： - l d c b<br>其余字符每 3 个一组(rwx) 读(r) 写(w) 执行(x) <br><br>第一组 rwx：文件所有者的权限是 读、写和执行<br>第二组 rw-：与文件所有者同一组的用户的权限是 读、写但不能执行<br>第三组 r- ：不与文件拥所有者同组的其他用户 的权限是 读不能写和执行<br><br>也可以用数字表示对应的权限：<br>r=4,w=2,x=1  <br>因此 rwx=4+2+1=7 <br>数字可以进行组合<br><br>其它说明：<br>第二列：1如果是普通文件，直接就是1；<br>如果是目录，代表该目录下有多少内容(即子目录数+文件数)<br><br>第三列：root该文件/目录的所有者<br>第四列：root该文件/目录的所在组<br>第五列：1213文件大小(这里是字节)<br>第六列：Feb 2 09:39最后修改日期<br>第七列：abc文件名<br><br></code></pre></td></tr></table></figure><p><strong>修改权限</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">基本说明：</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">通过 <span class="hljs-built_in">chmod</span> 指令，可以修改文件或者目录的权限。</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">第一种方式：通过 + 、-、=  变更权限</span><br>u:所有者<br>g:所在组(同一个组的其他用户)<br>o:其他人(不同一个组的其他用户)<br>a:所有人(所有用户)(u、g、o 的总和)<br><br>chmod u=rwx,g=rx,o=x#文件/目录名  (该文件/目录的u的权限是rwx，g的权限是rx，o的权限是x)<br>chmodo+w#文件/目录名  (该文件/目录的o的权限加上w)<br>chmoda-x#文件/目录名  (取消该文件/目录的a的x权限)<br><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例演示：</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">1.给 abc 文件 的所有者读写执行的权限，给所在组读执行权限，给其它组读执行权限。</span><br>chmod u=rwx,g=rx,o=rx abc<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">2.给 abc 文件的所有者除去执行的权限，增加组写的权限</span><br>chmod u-x,g+w abc<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">3.给 abc 文件的所有用户添加读的权限</span><br>chmod a+r abc<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">注意：</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">可执行文件 图标   绿色</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">普通文件 图标    白色</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">目录/文件夹图标    蓝色</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#压缩文件图标    红色</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">第二种方式：通过数字变更权限</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">权限可以用数字代替：r=4 w=2 x=1</span><br> <br>chmod u=rwx,g=rx,o=x 文件/目录名<br><span class="hljs-meta prompt_">#</span><span class="language-bash">相当于</span> <br>chmod 751     文件/目录名<br><br>rwx=4+2+1=7<br>rx=4+1=5<br>x=1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例演示</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">要求：将 /home/abc.txt 文件的权限修改成rwxr-xr-x,使用给数字的方式实现：</span><br>rwxr-xr-x：u-rwx g=r-x o=r-x<br>chmod 755 /home/abc.txt<br><br></code></pre></td></tr></table></figure><p><strong>修改文件/目录的所有者-chown</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">基本介绍<br>chownnewowner文件/目录#(修改所有者)<br>chown newowner:newgroup文件/目录 #(同时修改所有者和所在组)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">选项：-R如果是目录 则使其下所有子文件或目录递归生效</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例演示</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">1.请将 /home/abc.txt 文件的所有者修改成 tom</span><br>chown tom /home/abc.txt<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">2.请将 /home/test 目录下所有的文件和目录的所有者都修改成 tom</span> <br>chown -R tom /home/test<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">R:Recursive递归</span><br></code></pre></td></tr></table></figure><p>修改文件/目录的所在组-chgrp</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">chgrp  newgroup  文件/目录(改变所在组)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例演示:</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">1.请将 /home/abc.txt 文件的所在组修改成 shaolin (少林)</span> <br>groupadd shaolin<br>chgrp shaolin /home/abc.txt<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">2.请将 /home/test 目录下所有的文件和目录的所在组都修改成 shaolin(少林)</span> <br>chgrp -R shaolin /home/test<br><br></code></pre></td></tr></table></figure><p>例子实验：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">有两个组：police组，bandit组</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">有四个用户：jackie,jerry,xh,xq</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">jackie,jerry: 警察</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">xh,xq: 土匪</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">1.创建组</span><br>groupadd police<br>groupadd bandit<br><span class="hljs-meta prompt_">#</span><span class="language-bash">2.创建用户(直接放到对应组)</span><br>useradd -g police jackie<br>useradd -g police jerry<br>useradd -g bandit xh<br>useradd -g bandit xq<br><span class="hljs-meta prompt_">#</span><span class="language-bash">3.jackie 创建一个文件，自己可以读 r 写 w，本组人可以读，其它组没人任何权限</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">首先jackie登录，可以使用切换用户：su jackie ----&gt;这样不行，无法创建文件，权限不够</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用jackie登录，先设置密码123，然后退出系统用jackie登录：passwd jackie</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">然后创建文件：<span class="hljs-built_in">touch</span> jackie.txt</span> <br><span class="hljs-meta prompt_">#</span><span class="language-bash">权限设置：</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">原权限：rw-r--r--</span><br>chmod o-r jackie.txt <br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改后权限：rw-r-----</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">也可以直接使用数字方式：<span class="hljs-built_in">chmod</span> 640 jackie.txt</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">4.jackie 修改该文件，让其它组人可以读，本组人可以读写</span><br>chmod g+w o+r jackie.txt <br><span class="hljs-meta prompt_">#</span><span class="language-bash">或者</span><br>chmod 664 jackie.txt<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#改后权限：rw-rw-r--</span></span><br><br>5.xh投靠警察<br><span class="hljs-meta prompt_">#</span><span class="language-bash">由root执行这条指令</span><br>usermod -g police xh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">6.测试xh和xq能不能对jackie.txt文件进行读写</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">分别使用xh和xq登录(首先对其设置密码123)</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">jackie.txt文件在jackie目录下</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">要想对jackie.txt文件进行操作，首先进入jackie目录</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">但是jackie目录权限是：rwx------</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">所以xh连jackie目录都进不去</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment">#解决办法：登录jackie，对jackie目录权限进行修改(也可以登录root进行修改)(必须都在home下才能执行这个修改权限命令)</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">登录</span><br>cd /home/<br>ll<br><span class="hljs-meta prompt_">#</span><span class="language-bash">得到jackie原目录权限：rwx------</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改权限：<span class="hljs-built_in">chmod</span> 770 jackie(权限中有x才能进入目录)</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改后jackie目录权限：rwxrwx---</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">这时xh就可以进入jackie目录，并对jackie.txt进行读写</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">结论：如果要对目录内的文件进行操作，首先要有对该目录有相应权限</span><br></code></pre></td></tr></table></figure><p>联系2：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#1.建立两个组（神仙(sx),妖怪(yg)）</span></span><br>groupadd sx<br>groupadd yg<br><span class="hljs-meta prompt_">#</span><span class="language-bash">2.建立四个用户(唐僧,悟空，八戒，沙僧)</span><br>useradd ts<br>useradd wk<br>useradd bj<br>useradd ss<br><span class="hljs-meta prompt_">#</span><span class="language-bash">3.设置密码(都为123)</span><br>passwd ts<br>passwd wk<br>passwd bj<br>passwd ss<br><span class="hljs-meta prompt_">#</span><span class="language-bash">4.妖怪组：悟空，八戒；神仙组：唐僧，沙僧</span><br>usermod -g yg wk<br>usermod -g yg bj<br>usermod -g sx ts<br>usermod -g sx ss<br><span class="hljs-meta prompt_">#</span><span class="language-bash">5.用悟空建立一个文件 monkey.txt ，该文件要输出 i am a monkey</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">先使用悟空登录</span><br>vim monkey.txt<br>i am a monkey<br>:wq<br><span class="hljs-meta prompt_">#</span><span class="language-bash">6.给八戒一个可以 r w 的权限</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">悟空和八戒是一组的</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">当前monkey.txt权限：-rw-r--r--</span><br>3此时八戒只能r<br><span class="hljs-meta prompt_">#</span><span class="language-bash">命令：</span><br>chmod g+w monkey.txt<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#现在monkey.txt权限：-rw-rw-r--</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">7.八戒修改 monkey.txt 加入一句话( i am a pig)</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">monkey.txt文件在wk目录下</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">八戒要修改monkey.txt文件就要先进入wk目录</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">但是此时wk目录权限：rwx------</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">八戒进不去wk目录</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">所以先修改wk目录权限：<span class="hljs-built_in">chmod</span> g+r+w+x wk  (先把所以权限都给，在wk的home下写指令或root的home下写指令，因为目录在home下)</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">现在wk目录权限：rwxrwx---</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">这时八戒就能进入wk目录了</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">8.唐僧 沙僧 对该文件没有权限</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">唐僧和沙僧是其他组，进不去wk目录</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">9.把 沙僧 放入妖怪组</span><br>usermod -g yg ss<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">10.让沙僧修改该文件 monkey.txt, 加入一句话 (<span class="hljs-string">&quot;我是沙僧，我是妖怪!&quot;</span>);</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用沙僧登录</span><br>cd /home/wk<br>viw monkey.txt<br>...<br>:wq<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">注意：</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">rwx权限对于 文件夹(目录) 的细节讨论和测试!!!</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">x: 表示可以进入到该目录,比如 <span class="hljs-built_in">cd</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">r: 表示可以 <span class="hljs-built_in">ls</span> ,将目录的内容显示</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">w: 表示可以在该目录下删除或者创建文件</span><br></code></pre></td></tr></table></figure><h2 id="第十一章Linux-定时任务调度"><a href="#第十一章Linux-定时任务调度" class="headerlink" title="第十一章Linux 定时任务调度"></a>第十一章Linux 定时任务调度</h2><p><strong>crond任务调度</strong></p><p>1.概述<br>任务调度：是指系统在某个时间执行特定的命令或程序。<br>crond—-&gt;周期任务<br>任务调度分类：<br>    (1)系统工作：有些重要的工作必须周而复始地执行。如病毒扫描等<br>    (2)个别用户工作：个别用户可能希望执行某些程序，比如对 mysql 数据库的备份。<br>示意图：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3481/image-20221019110415747.png" alt="image-20221019110415747"></p><p>2.基本语法<br>    <code>crontab [选项]</code><br>    功能：进行定时任务的设置<br>    <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3481/image-20221019110439761.png" alt="image-20221019110439761"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">4.快速入门</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在/etc/下有一个crontab文件，在这个文件中写入所有的定时任务</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">输入</span><br>crontab -e  #就会进入crontab文件<br><span class="hljs-meta prompt_">#</span><span class="language-bash">然后在文件中写入定时任务：</span><br>*/1 * * * * ls –l/etc/ &gt; /tmp/to.txt<br><span class="hljs-meta prompt_">#</span><span class="language-bash">意思说每小时的每分钟执行 <span class="hljs-built_in">ls</span> –l /etc/ &gt; /tmp/to.txt 命令</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">最后保存退出</span><br></code></pre></td></tr></table></figure><p>参数细节说明：</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/image-20221019104157830.png" alt="image-20221019104157830"></p><p><strong>特殊符号说明</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3481/image-20221019110548932.png" alt="image-20221019110548932"></p><p>特定的事件执行任务案例：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3481/image-20221019110616007.png" alt="image-20221019110616007"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">5.应用实例</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例 1：每隔 1 分钟，就将当前的日期信息，追加到 /tmp/mydate 文件中</span><br>crontab -e<br>*/1 * * * * date &gt;&gt; /tmp/mydate<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例 2：每隔 1 分钟，将当前日期和日历都追加到 /home/mycal 文件中</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">第一种方法：</span><br>crontab -e<br><span class="hljs-meta prompt_">#</span><span class="language-bash">在crontab文件中输入：</span><br>*/1 * * * * date &gt;&gt; /home/mycal <br>*/1 * * * * cal &gt;&gt; /home/mycal <br><span class="hljs-meta prompt_">#</span><span class="language-bash">保存退出</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">第二种方法：</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">将 <span class="hljs-built_in">date</span> &gt;&gt; /home/mycal 和  cal &gt;&gt; /home/mycal 命令写在文件 /home/my.sh中</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">就是将命令都写在shell脚本中，直接调用shell脚本</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">步骤：</span><br>vim /home/my.sh<br>在my.sh中写入：<br>date &gt;&gt; /home/mycal<br>cal &gt;&gt; /home/mycal<br>:wq<br><span class="hljs-meta prompt_">#</span><span class="language-bash">给 my.sh 增加执行权限：<span class="hljs-built_in">chmod</span> u+x /home/my.sh (否则无法使用crontab命令)</span><br>crontab -e<br>在crontab中写入：*/1 * * * */home/my.sh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">注意：可以写脚本也可以不写脚本</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例 3:每天凌晨 2:00  将 mysql 数据库 testdb 备份到文件中。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">提示: 指令为 mysqldump -u root -p密码 数据库 &gt; /home/db.bak</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">步骤(1)</span> <br>crontab -e<br><span class="hljs-meta prompt_">#</span><span class="language-bash">步骤(2)</span><br>0 2 * * * mysqldump -u root -proot testdb &gt; /home/db.bak<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">6. crond 相关指令</span><br>conrtab –r：#终止任务调度。<br>crontab –l：#列出当前有那些任务调度<br>service crond restart：重启任务调度<br><br></code></pre></td></tr></table></figure><p>at定时任务调度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">1.基本介绍<br>(1)at 命令是一次性定时计划任务，at 的守护进程 atd 会以后台模式运行，检查作业队列来运行；<br>(2) 每个作业队列(任务队列)中都有作业(作业里是指令/脚本)；<br>(3)默认情况下，atd 守护进程每 60 秒检查作业队列；<br>有作业时，会检查作业运行时间，如果时间与当前时间匹配，则运行此作业；<br>运行完这个作业(任务)之后，这个作业就不会再被执行了；<br>(4)at 命令是一次性定时计划任务，执行完一个任务后不再执行此任务了；<br>(5)在使用 at 命令的时候，一定要保证 atd 进程的启动，可以使用相关指令来查看<br>ps -ef| grep atd //可以检测 atd 是否在运行<br>ps -ef ---&gt; 查看所有的进程<br>总结：at命令就是对某个定时任务只执行一次<br></code></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3481/image-20221019110826307.png" alt="image-20221019110826307"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">2. at 命令格式</span><br>at [选项] [时间]<br>然后输入两次：Ctrl + D(结束 at 命令的输入)<br><span class="hljs-meta prompt_">#</span><span class="language-bash">3. at 命令选项：</span><br><br></code></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3481/image-20221019113608977.png" alt="image-20221019113608977"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs shell">4. at 指定时间的方法：<br><br>(1)接受在当天的 hh:mm（小时:分钟）式的时间指定。<br>假如该时间已过去，那么就放在第二天执行。 例如：04:00<br>(2)使用 midnight（深夜），noon（中午），teatime（饮茶时间，一般是下午 4 点）等比较模糊的词语来指定时间。<br>(3)采用 12 小时计时制，即在时间后面加上 AM（上午）或 PM（下午）来说明是上午还是下午。 <br>例如：12pm<br>(4)指定命令执行的具体日期，指定格式为 month day（月 日）或 mm/dd/yy（月/日/年）或 dd.mm.yy（日.月.年），指定的日期必须跟在指定时间的后面。 <br>例如：04:00 2021-03-1 (小的时间写前面，大的时间写后面)<br>(5)使用相对计时法。<br>指定格式为：now + count time-units<br>now 就是当前时间，time-units 是时间单位，这里能够是 minutes（分钟）、hours（小时）、days（天）、weeks（星期）。<br>count 是时间的数量，几天，几小时。 <br>例如：now + 5 minutes<br>(6)直接使用 today（今天）、tomorrow（明天）来指定完成命令的时间。<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">5.应用实例</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例 1：2 天后的下午 5 点执行 /bin/ls /home</span><br>at 5pm + 2 days<br>/bin/ls /home<br><span class="hljs-meta prompt_">#</span><span class="language-bash">两次ctrl+D</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例 2：atq 命令来查看系统中没有执行的工作任务</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">直接输入atq 查询</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例 3：明天17点钟，输出时间到指定文件内 比如 /root/date100.<span class="hljs-built_in">log</span></span><br>at 5pm tomorrow<br>date &gt; /root/date100.log<br>两次ctrl+D<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例 4：2分钟后，输出时间到指定文件内 比如 /root/date200.<span class="hljs-built_in">log</span></span><br>at now + 2 minutes<br>date &gt; /root/date200.log<br>两次ctrl+D<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例 5：删除已经设置的任务</span><br>atrm 任务编号<br>atrm 4   #//表示将 job 队列，编号为 4 的 job 删除.<br><br>atq:<br>2Thu Feb 24 09:53:00 2022 a root<br>1Fri Feb 25 17:00:00 2022 a root<br><span class="hljs-meta prompt_">#</span><span class="language-bash">第一列就是编号</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">注意：也可以执行脚本</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">比如：</span><br>at now +2 minutes<br>/root/my.sh  <br><span class="hljs-meta prompt_">#</span><span class="language-bash">但要有这个脚本，并且有执行权限x</span><br><br></code></pre></td></tr></table></figure><h2 id="第十二章-Linux实操篇磁盘分区、挂载"><a href="#第十二章-Linux实操篇磁盘分区、挂载" class="headerlink" title="第十二章 Linux实操篇磁盘分区、挂载"></a>第十二章 Linux实操篇磁盘分区、挂载</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">(1) Linux 无论有几个分区，分给哪一目录使用，它归根结底就只有一个根目录，一个独立且唯一的文件结构 <br>Linux 中每个分区都是用来组成整个文件系统的一部分。<br><br>(2)Linux 采用了一种叫“载入”的处理方法，它的整个文件系统中包含了一整套的文件和目录，且将一个分区和一个目录联系起来。<br>这时要载入的一个分区将使它的存储空间在一个目录下获得。<br>(3)图解：<br>硬盘上的一个分区 通过挂载mount机制 与文件系统中的某个目录联系起来<br>即分区挂载到目录<br>访问这个目录即访问这个分区<br>可以通过指令查看挂载情况，下面会说。<br></code></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3481/image-20221019113855644.png" alt="image-20221019113855644"></p><p><strong>硬盘说明：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">(1)Linux 硬盘主要分为：<br> IDE 硬盘和 SCSI 硬盘<br> 目前基本上是 SCSI 硬盘<br><br>(2)对于 IDE 硬盘，驱动器标识符为“hdx~”<br>其中“hd”表明分区所在设备的类型，这里是指 IDE 硬盘<br><br>“x”为盘号<br>a 为基本盘 第一个硬盘<br>b 为基本从属盘 第二个硬盘<br>c 为辅助主盘 第三个硬盘<br>d 为辅助从属盘 第四个硬盘<br><br>“~”代表分区<br>前四个分区用数字 1 到 4 表示，它们是主分区或扩展分区，从 5 开始就是逻辑分区<br><br>例：hda3 表示为第一个 IDE 硬盘上的第三个主分区或扩展分区<br>     hdb2 表示为第二个 IDE 硬盘上的第二个主分区或扩展分区<br>     <br>(3)对于 SCSI 硬盘则标识为“sdx~”<br>SCSI 硬盘是用“sd”来表示分区所在设备的类型的，其余则和 IDE 硬盘的表示方法一样<br><br></code></pre></td></tr></table></figure><p>查看所有设备挂载情况：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs shell">命令 ：lsblk或者 lsblk -f<br><br>lsblk：list block devices <br><br>NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT<br>sda      8:0    0   20G  0 disk <br>├─sda1   8:1    0    1G  0 part /boot<br>├─sda2   8:2    0    2G  0 part [SWAP]<br>└─sda3   8:3    0   17G  0 part /<br>sr0     11:0    1  4.3G  0 rom <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">sda1分区挂载到/boot目录</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">sda2分区挂载到swap目录</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">sda3分区挂载到根目录</span><br><br>lsblk -f  #(更加详细的显示)<br><br>NAME   FSTYPE  LABEL           UUID                                 MOUNTPOINT<br>sda                                                                 <br>├─sda1 ext4                    bd7b7249-b3fa-434f-acfd-5127a56c0673 /boot<br>├─sda2 swap                    4381675a-652c-4ffa-9a9d-cb23d19be79b [SWAP]<br>└─sda3 ext4                    531c2867-a7e9-4ae7-8f79-4453ceb76c5b /<br>sr0    iso9660 CentOS 7 x86_64 2018-11-25-23-54-16-00    <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">第一列可以看到设备/硬盘分区情况</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#FSTYPE:文件系统类型</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">UUID:格式化之后，会给每一个分区分配一个 唯一的 不重复的 40位 的 字符串</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">MOUNTPOINT:挂载点</span><br></code></pre></td></tr></table></figure><p>如何增加一块硬盘:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">1)虚拟机添加硬盘<br>2)分区<br>3)格式化<br>4)挂载<br>5)设置可以自动挂载<br></code></pre></td></tr></table></figure><ol><li>虚拟机添加硬盘</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">在【虚拟机】菜单中选择【设置】<br>然后设备列表里添加硬盘<br>然后一路【下一步】<br>中间只有选择磁盘大小的地方需要修改，至到完成<br><br>使用命令lsblk发现没有新增的硬盘？<br>需要重启系统（才能识别）<br><br>NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT<br>sda      8:0    0   20G  0 disk <br>├─sda1   8:1    0    1G  0 part /boot<br>├─sda2   8:2    0    2G  0 part [SWAP]<br>└─sda3   8:3    0   17G  0 part /<br>sdb      8:16   0    1G  0 disk <br>sr0     11:0    1  4.3G  0 rom  <br>新增硬盘sdb，还未分区。<br></code></pre></td></tr></table></figure><ol><li>分区</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs shell">对sdb进行分区：<br><br>分区命令：fdisk /dev/sdb   (dev目录下是一些设备)<br>步骤：<br>开始分区后输入 n  (新增分区)<br>然后选择 p     (分区类型为主分区)<br>两次回车<br>最后输入 w  (写入分区并退出)(若不保存并退出输入 q，即上面步骤出错了想重来就可以输入q)<br><br>说明：<br>m显示命令列表           <br>p显示磁盘分区 (同 fdisk –l) <br>n新增分区<br>d删除分区<br>w写入并退出<br><br><br>命令(输入 m 获取帮助)：m<br>命令操作<br>   a   toggle a bootable flag<br>   b   edit bsd disklabel<br>   c   toggle the dos compatibility flag<br>   d   delete a partition<br>   g   create a new empty GPT partition table<br>   G   create an IRIX (SGI) partition table<br>   l   list known partition types<br>   m   print this menu<br>   n   add a new partition<br>   o   create a new empty DOS partition table<br>   p   print the partition table<br>   q   quit without saving changes<br>   s   create a new empty Sun disklabel<br>   t   change a partition&#x27;s system id<br>   u   change display/entry units<br>   v   verify the partition table<br>   w   write table to disk and exit<br>   x   extra functionality (experts only)<br><br><br>选择分区类型：主分区/扩展分区<br>命令(输入 m 获取帮助)：n<br>Partition type:<br>   p   primary (0 primary, 0 extended, 4 free)<br>   e   extended<br>Select (default p): p<br><br><br>分区号 (1-4，默认 1)：                  ---&gt;输入2，硬盘就有2个分区<br>起始 扇区 (2048-2097151，默认为 2048)：<br>将使用默认值 2048<br>Last 扇区, +扇区 or +size&#123;K,M,G&#125; (2048-2097151，默认为 2097151)：<br>将使用默认值 2097151<br>分区 1 已设置为 Linux 类型，大小设为 1023 MiB<br><br><br>命令(输入 m 获取帮助)：w<br>The partition table has been altered!<br><br>Calling ioctl() to re-read partition table.<br>正在同步磁盘。<br><br><br>lsblk<br>NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT<br>sda      8:0    0   20G  0 disk <br>├─sda1   8:1    0    1G  0 part /boot<br>├─sda2   8:2    0    2G  0 part [SWAP]<br>└─sda3   8:3    0   17G  0 part /<br>sdb      8:16   0    1G  0 disk <br>└─sdb1   8:17   0 1023M  0 part <br>sr0     11:0    1  4.3G  0 rom  <br>分区成功<br>硬盘sdb中只有一个分区sdb1<br></code></pre></td></tr></table></figure><ol><li>格式化</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">格式化磁盘</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">为什么要格式化？</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">给这个分区指定它的文件类型</span><br><br>[root@Edu01 ~]# lsblk -f<br>NAME   FSTYPE  LABEL           UUID                                 MOUNTPOINT<br>sda                                                                 <br>├─sda1 ext4                    bd7b7249-b3fa-434f-acfd-5127a56c0673 /boot<br>├─sda2 swap                    4381675a-652c-4ffa-9a9d-cb23d19be79b [SWAP]<br>└─sda3 ext4                    531c2867-a7e9-4ae7-8f79-4453ceb76c5b /<br>sdb                                                                 <br>└─sdb1                                                              <br>sr0    iso9660 CentOS 7 x86_64 2018-11-25-23-54-16-00    <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">sdb1的UUID为空，说明还没有格式化。</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">格式化命令:</span><br>mkfs -text4 /dev/sdb1 其中 ext4 是分区类型<br><br></code></pre></td></tr></table></figure><ol><li>挂载</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">挂载: 将一个分区与一个目录联系起来，</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">命令：mount 设备名称 挂载目录</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">首先创建一个目录newdisk (目录位置随便)</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">假如在根目录下创建：<span class="hljs-built_in">mkdir</span> newdisk</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">进行挂载：mount /dev/sdb1 /newdisk</span><br><br>NAME   FSTYPE  LABEL           UUID                                 MOUNTPOINT<br>sda                                                                 <br>├─sda1 ext4                    bd7b7249-b3fa-434f-acfd-5127a56c0673 /boot<br>├─sda2 swap                    4381675a-652c-4ffa-9a9d-cb23d19be79b [SWAP]<br>└─sda3 ext4                    531c2867-a7e9-4ae7-8f79-4453ceb76c5b /<br>sdb                                                                 <br>└─sdb1 ext4                    d1856552-dee4-4fbc-9953-f650231ecaac /newdisk<br>sr0    iso9660 CentOS 7 x86_64 2018-11-25-23-54-16-00  <br><span class="hljs-meta prompt_">#</span><span class="language-bash">挂载点有了，挂载成功。</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">卸载(去除分区与目录的联系)：</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">命令：umount设备名称 或者挂载目录</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">例如：umount/dev/sdb1 或者 umount /newdisk</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">注意: 用命令行挂载,重启后会失效。</span><br><br></code></pre></td></tr></table></figure><ol><li>设置可以自动挂载</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs shell">解决  用命令行挂载,重启后会失效 问题<br><br>永久挂载: <br>通过修改/etc/fstab 实现挂载<br>添加完成后 执行 mount–a 即刻生效 或者 重启系统reboot<br><br>步骤：<br>vim /etc/fstab<br>增加一行：UUID=上面sdb1的UUID    /newdisk    ext4    defaults     0 0<br>也可以是：/dev/sdb1      /newdisk    ext4    defaults     0 0<br><br><br><br><br>要挂载的设备或伪文件系统  挂载点  文件系统类型  挂载选项 转储频率 自检次序<br>UUID=上面sdb1的UUID   /newdisk    ext4    defaults   0    0<br><br>要挂载的设备或伪文件系统：<br>设备文件、LABEL(LABEL=&quot;&quot;)、UUID(UUID=&quot;&quot;)、伪文件系统名称(proc, sysfs)<br><br>挂载点：指定的文件夹<br><br>挂载选项：defaults<br><br>转储频率：<br>  0：不做备份<br>  1：每天转储<br>  2：每隔一天转储<br><br>自检次序：<br>  0：不自检<br>  1：首先自检；一般只有rootfs才用1；<br></code></pre></td></tr></table></figure><p>查询磁盘使用情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">基本语法:</span><br>df -h   (disk free)<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查询系统整体磁盘使用情况</span><br></code></pre></td></tr></table></figure><p>查询指定目录磁盘占用情况：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">基本语法：<br>du -h  指定目录    (disk usage)<br>功能：查询指定目录的磁盘占用情况，默认为当前目录<br>-s 指定目录占用大小汇总<br>-h 带计量单位<br>-a 含文件<br>--max-depth=1子目录深度<br>-c 列出明细的同时，增加汇总值<br><br>应用实例<br>查询 /opt 目录的磁盘占用情况，深度为 1<br>du -hac --max-depth=1 /opt<br><br></code></pre></td></tr></table></figure><p>工作实用 指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">1. 统计/opt 文件夹下文件的个数</span><br>ls -l /opt | grep &quot;^-&quot; | wc -l<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">说明：</span><br>grep &quot;^-&quot; ---&gt;筛选出以-开头的，因为以-开头的都是文件<br>wc (word count) 统计数量<br>wc -l 统计行数 l即lines<br>统计grep筛选后的行数即文件个数<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">2. 统计/opt 文件夹下目录的个数</span><br>ls -l /opt | grep &quot;^d&quot; | wc -l<br><br>3. 统计/opt 文件夹下文件的个数，包括子文件夹里的<br>ls -lR /opt | grep &quot;^-&quot; | wc -l<br>-R 递归列出遇到的子目录<br><br>4. 统计/opt 文件夹下目录的个数，包括子文件夹里的<br>ls -lR /opt | grep &quot;^d&quot; | wc -l<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">5. 以树状显示目录结构</span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">指令：tree 目录</span> <br><span class="hljs-meta prompt_"> #</span><span class="language-bash">默认情况下没有tree指令</span><br><span class="hljs-meta prompt_"> #</span><span class="language-bash">如果没有 tree ,则使用 yum install tree 指令安装</span><br><br></code></pre></td></tr></table></figure><h2 id="LINUX网络配置"><a href="#LINUX网络配置" class="headerlink" title="LINUX网络配置"></a>LINUX网络配置</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3481/image-20221019114700324.png" alt="image-20221019114700324"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">1.通过ifconfig指令查看Linux虚拟机的ip地址<br>192.168.2.131<br>2.然后在本机DOS命令窗口输入指令ipconfig，查看vmnet8的ip地址<br>192.168.2.1<br>上两个在同一网段，所以可以通信。<br><br>3.由第二步骤可以得到本机的无线网络适配器(无线网卡)的ip地址<br>192.168.101.8<br><br>为什么Linux虚拟机可以连外网(比如打开百度)？<br>Linux虚拟机---&gt;本机vmnet8---&gt;本机无线网卡---&gt;教室局域网网关---&gt;外网<br><br>每次开机linux虚拟机的ip地址不一定相同<br>linux虚拟机的ip地址可以设置<br><br>以下：如何编辑虚拟机的网络和修改其ip地址？<br></code></pre></td></tr></table></figure><p>查看网络IP和网关</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">vmware---&gt;</span><span class="language-bash">编辑---&gt;虚拟网络编辑器</span><br>这样就可以查看和修改虚拟网络vmnet8的ip地址和网关<br><br>通过本机DOS命令窗口，输入指令：ipconfig<br>查看vmnet8的网络配置<br><br>在xshell或linux终端输入命令：ifconfig<br>查看 linux 的网络配置<br><br><br><br>ping命令 测试主机之间网络连通性<br>基本语法：<br>ping 目的主机 （功能描述：测试当前服务器是否可以连接目的主机）<br><br>应用实例<br>测试当前服务器是否可以连接百度<br>ping www.baidu.com<br><br></code></pre></td></tr></table></figure><p>Linux网络环境配置</p><p>自动获取ip：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">登陆后，通过界面设置自动获取ip<br>应用程序---&gt;系统工---&gt;设置---&gt;网络---&gt;小齿轮---&gt;IPV4<br>特点：linux 启动后会自动获取 IP，可以避免ip冲突<br>缺点：每次自动获取的 ip 地址可能不一样，但是作为服务器ip地址不能变。<br>工作时，一般将Linux的ip地址手动设定，不改变。<br></code></pre></td></tr></table></figure><p>手动设置ip</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">手动指定linux的ip地址，使其不变化。<br><br>直接修改配置文件来指定 IP,并可以连接到外网(程序员推荐)<br>关于网络的配置文件在：/etc/sysconfig/network-scripts/ifcfg-ens33<br><br>要求：将ip地址配置为静态的(不变的)，比如: ip 地址为 192.168.200.130<br><br>输入指令：vim /etc/sysconfig/network-scripts/ifcfg-ens33<br>修改文件内容：<br>BOOTPROTO=&quot;static&quot;<br>加上：<br>IPADDR=192.168.200.130   (IP地址,自己设定的)<br>GATEWAY=192.168.200.2 (网关,自己设定的)<br>DNS1=192.168.200.2 (域名解析器,自己设定的)<br><br>下一步：vmnet8和Linux在同一网段上，要能够通信，也要修改相应的vmnet8<br><span class="hljs-meta prompt_">vmware---&gt;</span><span class="language-bash">编辑---&gt;虚拟网络编辑器</span><br>打开虚拟编辑器，点击vmnet8，修改下面的子网ip为：192.168.200.0<br>然后点击NAT设置，将网关改为192.168.200.2<br><br>应用确定<br>输入指令：service network restart 或 reboot  使上述修改生效<br></code></pre></td></tr></table></figure><p> 设置Linux系统的主机名和 hosts 映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs shell">Linux系统的主机名相当于其ip地址，起一个主机名是因为ip地址不好记忆，不方便。<br>也可以修改主机名。<br><br>查看当前主机的主机名指令：hostname<br><br>主机名放在/etc/hostname文件中，要修改主机名即修改文件内容：<br>输入指令：<br>vim /etc/hostname<br>修改内容<br>:wq<br>重启系统<br><span class="hljs-meta prompt_">#</span><span class="language-bash">设置host映射</span><br><br>在Windows中，如何通过 主机名 找到(比如 ping) 某个 linux 系统?<br><br>修改ip地址与主机名的映射关系：<br>在windows C:\Windows\System32\drivers\etc\hosts 文件中<br>指定Linux系统的ip地址与主机名的映射关系<br>格式：linux系统ip地址 linux系统主机名<br>如指定为: 192.168.200.130 hspedu100 (这行代码添加到文件中就行了)<br><br>ping hspedu100 ----&gt;就会去该文件中找相应的ip地址<br><br><br>那么，如果也想在Linux系统中，使用主机名 来 ping 某个Windows系统，怎么做？<br>在 linux 系统的 /etc/hosts 文件中 指定<br>如指定为: 192.168.200.1 ThinkPad-PC<br>这样就可以 ping ThinkPad-PC<br></code></pre></td></tr></table></figure><p> 主机名解析过程分析(hosts、DNS)</p><p>hosts是一个文本文件，用来记录 IP 和 Hostname(主机名)的映射关系</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">DNS  Domain Name System 域名系统<br>是互联网上作为域名和 IP 地址相互映射的一个分布式数据库<br>为什么可以通过主机名访问？<br>通过DNS域名解析系统，将主机名解析为ip地址，实际上还是用的ip地址。<br></code></pre></td></tr></table></figure><p>例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">用户在浏览器输入了www.baidu.com<br><br>1.浏览器先检查浏览器缓存中有没有该域名解析 IP 地址，有就先调用这个 IP 完成解析；<br>如果没有，就检查 DNS 解析器缓存，如果有直接返回 IP 完成解析。<br>这两个缓存，可以理解为 本地解析器缓存<br><br>DNS 解析器缓存：<br>一般来说，当电脑第一次成功访问某一网站后，在一定时间内，浏览器或操作系统会缓存他的 IP 地址（DNS 解析记录）<br>如在 cmd 窗口中输入<br>ipconfig /displaydns//DNS 域名解析缓存<br>ipconfig /flushdns//手动清理 dns 缓存<br><br>2. 如果本地解析器缓存没有找到对应映射，检查系统中 hosts 文件中有没有配置对应的域名 IP 映射，如果有，则完成解析并返回。<br><br>3. 如果本地 DNS 解析器缓存 和 hosts 文件 中均没有找到对应的 IP，则到域名服务器找<br>4. 还找不到，就没有了。<br></code></pre></td></tr></table></figure><p>图解</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3481/image-20221019115203027.png" alt="image-20221019115203027"></p><p>第十四章进程管理：</p><p>基本介绍：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">(1)在 LINUX 中，每个执行的程序都称为一个进程。每一个进程都分配一个 ID 号(pid,进程号)。<br>程序执行之后加载到内存中成为进程。程序是静态的，进程是动态的。<br>(2)每个进程都可能以两种方式存在：<br>前台与后台<br>前台进程：是用户目前的屏幕上可以进行操作的。<br>后台进程：是实际在操作的，但屏幕上无法看到，通常使用后台方式执行。<br>(3)一般系统的服务都是以后台进程的方式存在，而且都会常驻在系统中，直到关机才结束。<br></code></pre></td></tr></table></figure><p>ps命令：显示系统正在执行的进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs shell">1.基本介绍：<br>ps命令是用来查看目前系统中，有哪些进程正在执行，以及它们执行的状况。<br>可以不加任何参数。<br><br>语法：<br>ps [选项]    Process Status<br>选项：<br>-a显示当前终端的所有进程信息<br>-u以用户的格式显示进程信息<br>-x显示后台程序运行的参数<br><br>一般三个选项一起用：<br>ps -aux<br><br>显示出如下内容：<br>USER  执行进程用户名称  <br>PID      进程号<br><span class="hljs-meta prompt_">%</span><span class="language-bash">CPU           进程占用CPU百分比</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">MEM      进程占用物理内存的百分比</span><br>VSZ      进程占用的虚拟内存大小（单位：KB）<br>RSS   进程占用的物理内存大小（单位：KB）<br>TTY      终端名称(有时缩写)<br>STAT             进程状态：<br> S-睡眠<br> s-表示该进程是会话的先导进程<br> N-表示进程拥有比普通优先级更低的优先级<br> R-正在运行<br> D-短期等待<br> Z-僵死进程<br> T-被跟踪或者被停止等等<br>START            进程执行的开始时间<br>TIME             CPU 时间，即进程使用 CPU 的总时间<br>COMMAND      启动进程所用的命令和参数，如果过长会被截断显示<br><br><br><br>上述命令将所有进程显示出来，若只想查找某一个进程：<br>指令：ps –aux|grep xxx  <br>比如查找 sshd 进程：ps -aux | grep sshd<br><br>应用实例：<br>要求：以全格式显示当前所有的进程，查看进程的父进程。 <br><br>父进程：一个进程可以生成多个子进程，该进程称为父进程。<br><br><br>查看 sshd 的父进程信息：<br>知道一个父进程的pid就可以知道它的信息。<br><br>ps -ef 是以全格式显示当前所有的进程。-e 显示所有进程。-f 全格式。<br><br>ps -ef 指令显示内容如下： <br>UID         用户ID<br>PID   进程ID<br>PPID  父进程ID             <br>C CPU 用于计算执行优先级的因子。<br>数值越大，表明进程是 CPU 密集型运算，执行优先级会降低；<br>数值越小，表明进程是 I/O 密集型运算，执行优先级会提高<br>STIME    进程启动的时间<br>TTY         完整的终端名称<br>TIME        CPU 使用时间<br>CMD    启动进程所用的命令和参数<br><br>输入：ps -ef | grep sshd<br>得到第三列为1，即父进程ID=1<br><br></code></pre></td></tr></table></figure><p>kill 和 killall指令：终止进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs shell">1.介绍:<br>若是某个进程执行一半需要停止时，或是已经消耗了很大的系统资源时，此时可以考虑停止该进程。<br>使用 kill 命令来完成此项任务。<br><br>2.基本语法：<br>kill [选项] 进程号（功能描述：通过进程号杀死/终止进程）<br>killall 进程名称    （功能描述：通过进程名称杀死进程，也支持通配符，这在系统因负载过大而变得很慢时很有用）<br> 使用killall，会将该进程的所有子进程也都删除/终止。<br><br><br>3.常用选项：<br>-9   表示强制终止进程<br> (系统觉得某个程序重要，可能会屏蔽你的kill指令，这时使用选项-9强制终止进程)<br><br><br>4.案例：<br>案例 1：踢掉某个非法登录用户<br>kill 进程号 <br>比如 kill 11421<br><br>假如使用tom登录，然后在图形界面打开终端写代码<br>假设认为tom是个非法用户，要踢掉它<br>先在图形界面写代码：ps -aux | grep sshd<br>sshd 是记载远程连接服务的配置文件<br>上述指令显示出了，远程登录的进程信息，从中看到了tom登录的进程的进程号11421<br>所以 kill 11421  这样tom就下线了！<br><br><br>案例 2：终止远程登录服务 sshd, 在适当时候再次重启 sshd 服务<br>sshd ---&gt; secure shell<br><br>首先查看 sshd 对应的进程号：<br>使用命令：ps -aux | grep sshd<br>有 /user/sbin/sshd 的那个进程就是 sshd 服务进程 进程号10748<br>终止 sshd 之后，就无法在xshell远程登陆了！<br><br>重启 sshd 服务指令：<br>/bin/systemctl start 服务名称<br>/bin/systemctl start sshd.service<br><br><br>案例 3：终止多个 gedit (文本编辑器)<br>在Linux桌面，主文件夹中，打开多个文本，然后使用killall 可以同时关闭所有打开的文本<br>killallgedit<br><br>案例 4：强制杀掉一个终端<br>在Linux系统桌面打开两个终端，bash即代表终端进程<br>在一个终端中输入指令强制关闭另一个终端<br>首先：查看终端进程的进程号：ps -aux | grep bash<br>得到对应的进程号，输入：kill -9  对应的进程号<br><br>也可以终端自己终止自己<br></code></pre></td></tr></table></figure><p> 查看进程树 pstree</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">1.基本语法：pstree [选项] <br>功能：可以更加直观的来看进程信息(树的形式)<br><br>2.常用选项：<br>-p :显示进程的 PID (父进程ID)<br>-u :显示进程的所属用户<br><br><br>3.应用实例：<br>案例 1：用树状的形式显示进程的pid(进程号)<br>pstree -p<br><br>案例 2：用树状的形式显示进程的用户<br>pstree -u<br><br></code></pre></td></tr></table></figure><p>服务管理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">服务(service) 本质就是进程，但是是运行在后台的，<br>通常都会监听某个端口，等待其它程序的请求，比如(mysqld , sshd防火墙等)，<br>因此我们又称为守护进程，是 Linux 中非常重要的知识点。<br></code></pre></td></tr></table></figure><p>service 管理指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">(1)service服务名 [start | stop | restart | reload | status]<br>start 开启服务<br>stop 终止服务<br>restart 重启服务<br>reload 重载服务<br>status 查看服务的状态<br><br>(2)在 CentOS7.0 后很多服务不再使用 service指令管理,而是使用 systemctl (后面专门讲)<br><br>(3)还有一些在 /etc/init.d 下的服务仍使用 service 指令管理<br><br>案例：<br>请使用 service 指令，查看，关闭，启动 network<br>[注意：在虚拟系统打开终端演示，因为网络连接会关闭]<br>指令:<br>service network status <br>service network stop <br>service network start<br></code></pre></td></tr></table></figure><p>查看服务名的方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">方式 1：直接输入 setup 即可看到所有服务<br>其中前面带 * 的服务会随着Linux系统的启动而自动启动。<br>方式 2:ls -l /etc/init.d<br>只能看到部分服务：还有一些在 /etc/init.d 下的服务仍使用 service 指令管理<br><br></code></pre></td></tr></table></figure><p> 服务的运行级别(runlevel)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">Linux 系统有 7 种运行级别(runlevel)：常用的是级别 3 和 5<br><br>运行级别 0：系统停机状态，系统默认运行级别不能设为 0，否则不能正常启动<br>运行级别 1：单用户工作状态，root 权限，用于系统维护，禁止远程登陆<br>运行级别 2：多用户状态(没有 NFS)，不支持网络<br>运行级别 3：完全的多用户状态(有 NFS)，无界面，登陆后进入控制台命令行模式<br>运行级别 4：系统未使用，保留<br>运行级别 5：X11 控制台，登陆后进入图形 GUI 模式<br>运行级别 6：系统正常关闭并重启，默认运行级别不能设为 6，否则不能正常启动<br>授课时使用5，工作时大多使用3。<br></code></pre></td></tr></table></figure><p>开机的流程说明：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3481/image-20221019115702418.png" alt="image-20221019115702418"></p><p> CentOS7 后运行级别说明</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">在 /etc/initab <br>进行了简化，如下:<br>multi-user.target: analogous to runlevel 3 <br>graphical.target: analogous to runlevel 5 <br><br>查看当前运行级别：systemctl get-default<br>ctl ---&gt; control<br><br>更改运行级别：systemctl set-default multi-user.target/graphical.target<br>    然后重启 reboot<br></code></pre></td></tr></table></figure><p>chkconfig 指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">通过 chkconfig 命令可以给服务在 各个运行级别 设置开启自启动/关闭自启动<br><br>chkconfig 指令管理的服务在 /etc/init.d  查看<br><br>注意: Centos7.0 后，很多服务使用 systemctl 管理 (后面马上讲)<br><br><br>chkconfig 基本语法：<br>(1)查看服务和服务在各个级别是开启/关闭自启动  (有限，只能查看chkconfig管理下的服务)<br>chkconfig --list [| grepxxx]    (若查找某一个服务使用grep过滤)<br> <br>(2)chkconfig 服务名 --list<br><br>(3)chkconfig --level 5 服务名 on   给该服务在5运行级别开启自启动<br>chkconfig --level 5 服务名 off     给该服务在5运行级别关闭自启动<br><br>案例演示: 对network服务进行各种操作,把 network 在 3 运行级别 关闭自启动<br>chkconfig --level 3 network off <br><br>注意：chkconfig 重新设置服务后自启动或关闭，需要重启机器 reboot 生效.<br></code></pre></td></tr></table></figure><p> systemctl 管理指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">基本语法：systemctl [start | stop | restart | status] 服务名<br>systemctl 指令管理的服务在 /usr/lib/systemd/system 查看<br></code></pre></td></tr></table></figure><p> systemctl  设置服务的自启动状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl list-unit-files [ | grep 服务名] (查看服务开机启动状态, grep 可以进行过滤) <br>systemctl enable 服务名 (设置服务开机自启动)<br>systemctl disable 服务名 (关闭服务开机自启动)<br>systemctl is-enabled 服务名  (查询某个服务是否是自启动的)<br><br>centos7之后运行级别只有3和5，所以以上指令对3和5运行级别同时适用。<br><br>应用案例：<br>查看当前防火墙的状况，关闭防火墙和重启防火墙 firewalld.service <br>查看当前防火墙情况：systemctl status firewalld<br>关闭防火墙：systemctl stop firewalld<br>重启防火墙：systemctl start firewalld<br>.service写不写都行<br>注意：关闭或者启用防火墙后，立即生效。<br>但是 这种方式只是临时生效，当重启系统后，还是回归以前对服务的设置。<br><br>如果希望设置某个服务自启动或关闭永久生效<br>要使用 systemctl[enable|disable] 服务名<br></code></pre></td></tr></table></figure><p> firewall 指令：打开或者关闭指定端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">在真正的生产环境，往往需要将防火墙打开。<br>但问题来了，如果我们把防火墙打开，那么外部请求数据包就不能跟服务器监听端口通讯。<br>这时，需要打开指定的端口。比如 80、22、8080 等。<br></code></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3481/image-20221019115940049.png" alt="image-20221019115940049"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell">(1)打开端口: firewall-cmd --permanent --add-port=端口号/协议<br><br>通过 netstat -anp | more 指令查看端口号的协议 (more 分页显示)<br>该指令输出的信息中：<br>Local Address下是 ip地址:端口号<br>Proto 是协议   (protocol 协议)<br><br>(2)关闭端口: firewall-cmd --permanent --remove-port=端口号/协议<br><br>注意：无论是打开端口还是关闭端口，要重新载入才能生效<br>重新载入：firewall-cmd --reload<br><br>(3) 查询端口是否开放: firewall-cmd --query-port=端口/协议<br><br>应用案例：<br>(1)启用防火墙，测试 111 端口是否能 telnet (远程登录) 不行<br>在本地主机DOS命令窗口输入：telnet Linux虚拟机ip地址:端口号<br>测试本地主机能否访问虚拟机的111端口<br>telnet 192.168.200.130 111<br><br>防火墙打开+端口关闭---&gt;不可以访问端口<br><br>(2)开放 111 端口<br>firewall-cmd --permanent --add-port=111/tcp ;<br>需要 firewall-cmd --reload<br><br>防火墙打开+端口打开---&gt;可以访问端口<br><br>(3)再次关闭 111 端口<br>firewall-cmd --permanent --remove-port=111/tcp <br>需要 firewall-cmd --reload<br></code></pre></td></tr></table></figure><p> top指令：动态监控进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">top 与 ps 命令很相似。<br>它们都用来显示正在执行的进程。<br>top 与 ps 最大的不同之处在于: top 在执行一段时间可以更新正在运行的的进程。<br>语法：<br>top [选项]<br></code></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3481/image-20221019120108788.png" alt="image-20221019120108788"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell">输入top指令后：每一条都是一个进程<br>显示：<br>第一行<br>第一个时间      当前时间<br>第二个时间      系统运行时间<br>2 users       有几个用户<br>load average   负载值(三个值相加除以3&gt;0.7 说明系统负载过大，要提高性能)<br>第二行<br>Tasks 系统任务数<br>1 running 1个正在运行进程<br>184 sleeping 184个休眠进程<br>0 stopped 0个终止进程<br>0 zombie 0个僵死进程   (要清除僵死进程，因为僵死进程无用且占内存空间)<br>第三行 占用的CPU百分比<br>us 用户占用的CPU<br>sy 系统占用的CPU<br>id 空闲<br>第四行 Mem 内存占用情况<br>total 总共内存<br>free 空闲内存<br>user 已使用内存<br>第五行 Swap 分区<br>total 总共大小<br>free 未使用大小<br>used 已用大小<br>avail Mem 可获取的内存大小<br></code></pre></td></tr></table></figure><p>交互操作说明</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">输入命令top<br>然后输入以下命令，得以下功能对进程进行排序<br></code></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3481/image-20221019120213845.png" alt="image-20221019120213845"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">案例 1：监视特定用户, 比如监控 tom 用户<br>输入top<br>回车<br>输入u<br>回车<br>输入要监控用户名 (该用户要登录才能看到他的进程信息)<br><br><br>案例 2：终止指定的进程, 比如我们要结束 tom 登录<br>输入top<br>回车<br>输入k<br>回车<br>输入要结束的进程 ID 号 （bash那个进程的PID）<br>回车<br>输入信号量 9 强制删除<br>tom掉线<br><br>案例 3：指定系统状态更新的时间(每隔 10 秒自动更新),默认是 3 秒<br>top -d 10<br></code></pre></td></tr></table></figure><p> 查看系统网络情况netstat</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell">基本语法：<br>netstat [选项]<br><br>选项说明：<br>-an按一定顺序排列输出<br>-p显示哪个进程在调用<br><br>输入netstat -an | more (more 分页展示)<br>显示：<br>Proto 协议<br>Recv-Q接收信息队列<br>Send-Q 发送信息队列<br>Local Address      本地地址 Linux地址 <br>Foreign Address         外部地址    <br>State LISTEN 监听  ESTABLISHED 已建立连接 TIME_WAIT 超时等待<br><br>TIME_WAIT 超时等待 <br><span class="hljs-meta prompt_">---&gt;</span><span class="language-bash">某个连接断了之后(如用户退出登录)，连接不会立刻消失，而是State变为TIME_WAIT</span><br>系统认为可能是网络状态不好，过一段时间仍无法连接，则连接消失。 <br><br><br>Proto Recv-Q Send-Q Local Address           Foreign Address         State <br>tcp        0     36 192.168.200.130:22      192.168.200.1:14498     ESTABLISHED<br>要建立连接双方都要有一个端口<br>22端口在Linux<br>14498端口在Windows<br>如下图：<br></code></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3481/image-20221019120328489.png" alt="image-20221019120328489"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">案例：查看服务名为 sshd 的服务的信息。<br>netstat -anp | grep sshd<br>是一种网络检测工具，它主要是用检测远程主机是否正常，或是两部主机间的网线或网卡故障。<br>如: ping 对方的ip地址<br></code></pre></td></tr></table></figure><h2 id="第十五章：Linux-实操篇-RPM-与-YUM"><a href="#第十五章：Linux-实操篇-RPM-与-YUM" class="headerlink" title="第十五章：Linux 实操篇- RPM 与 YUM"></a>第十五章：Linux 实操篇- RPM 与 YUM</h2><h4 id="RPM-介绍"><a href="#RPM-介绍" class="headerlink" title="RPM 介绍"></a>RPM 介绍</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">RPM 是 Red-Hat Package Manager（红帽软件包管理器）的缩写<br>这一文件格式名称虽然打上了RedHat的标志，但是其原始设计理念是开放式的，<br>包括OpenLinux、S.u.S.E.以及Turbo Linux等Linux的分发版本都有采用，可以算是公认的行业标准了。<br>是一种用于互联网下载包的打包及安装工具，它包含在某些Linux分发版中。它生成具有.RPM扩展名的文件。<br>类似于 windows 的 setup.exe<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">##########################</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">rpm 的简单查询指令</span><br>查询已安装的 rpm软件包 列表：<br>rpm –qa|grep xx <br>查询结果返回一个软件包的包名<br><br>举例：查看当前系统是否安装了 firefox <br>指令: rpm -qa | grep firefox<br>查询结果：firefox-60.2.2-1.el7.centos.x86_64<br>结果说明：<br>软件名：firefox<br>版本号：60.2.2-1<br>适用操作系统: el7.centos.x86_64 (表示 centos7.x 的 64 位系统)<br>如果是 i686、i386 表示 32 位系统，noarch 表示通用(32/64位系统都适用)<br></code></pre></td></tr></table></figure><p> rpm 的其它查询指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">rpm -qa (查询所安装的所有 rpm 软件包)<br><br>rpm -qa | more  (分页显示more)<br><br>rpm -qa | grep X    (过滤,比如 rpm -qa | grep firefox )<br><br>rpm -q  软件包名      (查询某个软件包是否安装)<br>案例：rpm -q firefox<br><br>rpm -qi 软件包名    (查询软件包的详细信息)<br>案例: rpm -qi firefox<br><br>rpm -ql 软件包名  (查询软件包中的文件和该软件包在哪个文件下)<br>案例： rpm -ql firefox<br><br>rpm -qf 文件全路径名  (查询某个文件所属在哪个软件包)<br>案例：rpm -qf /etc/passwd rpm <br>案例：-qf /root/install.log<br></code></pre></td></tr></table></figure><p> 删除 rpm 软件包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">基本语法：rpm -e RPM软件包的名称//-e erase擦去<br>案例：删除 firefox 软件包<br>rpm -e firefox<br><br>注意：<br>(1)如果其它软件包依赖于您要删除的软件包，删除时则会产生错误信息。<br>如：<br>rpm -e foo<br>removing these packages would break dependencies:foo is needed by bar-1.0-1<br>foo软件包被 bar-1.0-1需要，删除foo对barr-1.0-1有影响<br><br>(2)如果我们就是要删除 foo 这个 rpm 包，可以增加参数 --nodeps ,就可以强制删除<br>   但是一般不推荐这样做，因为依赖于该软件包的程序可能无法运行<br>如：rpm -e --nodeps foo            (nodeps 不检查依赖关系 no dependencies)<br><br></code></pre></td></tr></table></figure><p>安装 rpm 软件包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">基本语法：rpm -ivh RPM软件包全路径名称<br><br>rpm软件包其实是一个软件的安装包<br>点击Linux系统桌面的光盘，里面有一个Packages文件夹，这个文件夹里有很多rpm软件安装包<br><br>在/run/media/root/CentOS\ 7\ x86_64/Packages/ 目录下<br><br><br>选项：<br>i=install 安装<br>v=verbose 提示<br>h=hash  进度条<br><br><br>应用实例：<br>演示卸载和安装 firefox 浏览器<br>rpm -e firefox <br>rpm -ivh /run/media/root/CentOS\ 7\ x86_64/Packages/firefox-60.2.2-1.el7.centos.x86_64.rpm<br><br>也可以在Packages中找到firefox安装包，复制到某一个目录下，这样写路径简单<br><br></code></pre></td></tr></table></figure><h4 id="yum介绍"><a href="#yum介绍" class="headerlink" title="yum介绍"></a>yum介绍</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">Yum（全称为 Yellow dog Updater, Modified）是一个 Shell 前端软件包管理器。<br>基于 RPM 包管理，能够从指定的服务器自动下载 RPM 包并且安装，<br>可以自动处理依赖性关系，并且一次安装所有依赖的软件包。<br><br>使用 yum list|grep 软件名 向yum服务器查询有没有该软件<br>有的话，使用 yum install 软件名 下载安装该软件<br></code></pre></td></tr></table></figure><p>  yum 的基本指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">查询 yum 服务器是否有 需要安装的软件：<br>yum list|grep 软件名<br><br>安装指定的软件：<br>yum install 软件名<br><br>案例：请使用 yum 的方式来安装 firefox <br>rpm -e firefox<br>yum list | grep firefox <br>yum install firefox<br></code></pre></td></tr></table></figure><p>总结：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">rpm 是从本地安装包下载<br>yum 是从yum服务器下载安装软件<br></code></pre></td></tr></table></figure><h2 id="第十七章：大数据定制篇-Shell编程"><a href="#第十七章：大数据定制篇-Shell编程" class="headerlink" title="第十七章：大数据定制篇-Shell编程"></a>第十七章：大数据定制篇-Shell编程</h2><h4 id="Shell-是什么"><a href="#Shell-是什么" class="headerlink" title="Shell 是什么"></a>Shell 是什么</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">Shell 是一个命令行解释器，它为用户提供了一个向 Linux 内核发送请求以便运行程序的界面系统级程序，用户可以用 Shell 来启动、挂起、停止甚至是编写一些程序。<br><br>在计算机科学中，Shell俗称壳（用来区别于核）<br>是指“为使用者提供操作界面”的软件（command interpreter，命令解析器）。<br>它类似于DOS下的COMMAND.COM和后来的cmd.exe。<br>它接收用户命令，然后调用相应的应用程序。<br><br>中文名壳<br>外文名shell<br>性质命令解析器<br>用途接收用户命令<br>Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。是用户使用 Linux 的桥梁.<br>用户写了一个指令，该指令不能直接发给Linux内核去执行，而是由shell帮我们去执行，执行完之后再通过shell返回给我们结果。<br>在Linux中不止一种shell，我们常用的是bash。<br>可以直接发一个指令给shell，也可以将指令写在一个文件/脚本(.sh shell脚本)里。<br>shell编程就是在shell脚本中写指令。<br></code></pre></td></tr></table></figure><p>Shell脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell">1.脚本格式要求：<br>脚本以 #!/bin/bash 开头 ---&gt;确定shell的类型<br>    脚本需要有可执行权限<br>    shell脚本文件以.sh结尾，也可以不以.sh结尾<br><br>2.编写第一个Shell 脚本<br>需求说明：创建一个 Shell 脚本，输出 hello world! <br>创建一个目录：mkdir /root/shcode<br>cd /root/shcode<br>vim hello.sh<br>写入：<br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>echo &quot;hello,world!&quot;<br><br>3.shell脚本的常用执行方式<br>方式 1：<br>首先要给shell脚本加x执行权限：chomod u+x hello.sh<br>再输入该脚本的相对路径或绝对路径来执行该脚本<br>    比如：<br> 使用相对路径：./hello.sh <br> 使用绝对路径：/root/shcode/hello.sh<br><br>方式 2：<br>不用赋予脚本+x 权限，直接执行即可。(使用以下指令，即使没有执行权限也可以执行)<br>使用指令： sh  shell脚本/shell脚本的绝对路径<br>比如sh hello.sh <br><br></code></pre></td></tr></table></figure><h4 id="Shell-的变量"><a href="#Shell-的变量" class="headerlink" title="Shell 的变量"></a>Shell 的变量</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">(1)Linux Shell 中的变量分为:系统变量和用户自定义变量。<br>系统变量：系统自带的变量<br><br>(2)系统变量比如：$HOME、$PWD、$SHELL、$USER 等等<br>echo $HOME---&gt;显示当前用户的家目录<br><br>(3)可以通过 set 指令显示出shell中的所有系统变量<br></code></pre></td></tr></table></figure><h4 id="shell-自定义变量"><a href="#shell-自定义变量" class="headerlink" title="shell 自定义变量"></a>shell 自定义变量</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs shell">基本语法：<br>(1)定义变量：变量名=值  ---&gt;不加空格<br>(2)撤销变量：unset 变量名<br>(3)声明静态变量：readonly 变量 (改变量不能 unset撤销)<br><br><br>案例 1：定义变量 A<br>案例 2：撤销变量 A<br>案例 3：声明静态的变量 B=2，不能 unset<br><br>cd /root/shcode<br>vim vr.sh<br>输入： <br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例 1：定义变量 A=100  (<span class="hljs-comment">#为注释符)</span></span><br>A=100<br><span class="hljs-meta prompt_">#</span><span class="language-bash">输出变量需要加上$ ($---&gt;引用变量)</span><br>echo $A<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">上述输出结果是100，想要输出结果为A=100，这样写(A=以普通文本形式输出，<span class="hljs-variable">$A</span>引用变量的值)</span><br>echo A=$A 或者 echo &quot;A=$A&quot; <br><br><br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例 2：撤销变量 A</span> <br>unset A<br>echo &quot;A=$A&quot;    (---&gt;输出 A= )<br><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例 3：声明静态的变量 B=2，不能 <span class="hljs-built_in">unset</span></span> <br>readonly B=2<br>echo &quot;B=$B&quot; <br><br>保存：wq<br>最后输入执行命令：sh vr.sh<br><br>--------------------------------------------------------------------<br><br><br>shell 变量名的定义规则：<br>(1)变量名称可以由字母、数字和下划线组成，但是不能以数字开头。5A=200(×)<br>(2)等号两侧不能有空格<br>(3)变量名称一般习惯为大写，这是一个规范，我们遵守即可<br><br>--------------------------------------------------------------------<br>将命令的返回值赋给变量：<br>(1)A=`date`反引号，运行里面的命令，并把结果返回给变量 A <br>(2)A=$(date) 等价于反引号<br>案例：<br><span class="hljs-meta prompt_">#</span><span class="language-bash">将指令返回的结果赋给变量</span><br>C=`date` <br>D=$(date)<br>echo &quot;C=$C&quot; <br>echo &quot;D=$D&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用环境变量 TOMCAT_HOME</span><br>echo &quot;tomcat_home=$TOMCAT_HOME&quot;<br></code></pre></td></tr></table></figure><h4 id="设置环境变量-全局变量"><a href="#设置环境变量-全局变量" class="headerlink" title="设置环境变量(全局变量)"></a>设置环境变量(全局变量)</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs shell">可以将变量提升为全局环境变量，供多个shell程序共同使用。<br><br>基本语法：<br>(1)export 变量名=变量值 <br>（功能描述：将 shell 变量输出为环境变量/全局变量）<br><br>(2)source 配置文件    <br>（功能描述：在某文件中定义环境变量之后，要对该文件进行刷新才能使其生效，即让修改后的配置信息立即生效）<br><br>(3)echo $变量名<br>（功能描述：查询环境变量的值）<br><br>快速入门：<br>(1)在/etc/profile 文件中定义 TOMCAT_HOME 环境变量<br>TOMCAT_HOME ---&gt;意思是tomcat的家目录是什么<br>(2)查看环境变量 TOMCAT_HOME 的值<br>vim /etc/profile<br>写入：export TOMCAT_HOME=/opt/tomcat<br>保存退出<br>source /etc/profile<br>echo $TOMCAT_HOME ---输出 /opt/tomcat<br><br><br>(3)在另外一个 shell 程序中使用 TOMCAT_HOME<br>在另一个shell程序中写入：<br>echo &quot;tomcat_home=$TOMCAT_HOME&quot;<br><br><br>注意：在输出 TOMCAT_HOME 环境变量前，需要让其生效source /etc/profile<br><br><br>shell 脚本的<br>单行注释：#<br>多行注释：   :&lt;&lt;!   独占一行<br>内容 <br>    !    独占一行<br></code></pre></td></tr></table></figure><h4 id="位置参数变量"><a href="#位置参数变量" class="headerlink" title="位置参数变量"></a>位置参数变量</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell">1.介绍<br>当我们执行一个 shell 脚本时，如果希望获取到命令行的参数信息，就可以使用到位置参数变量<br>比如： ./myshell.sh 100 200 这个就是一个执行 shell 的命令行，可以在 myshell 脚本中获取到参数信息<br><br>./myshell.sh ---&gt;执行myshell脚本命令<br>100 200 都是该命令行的参数<br>使用位置参数变量可以在myshell脚本中获得参数<br><br><br>2.基本语法<br><span class="hljs-meta prompt_">$</span><span class="language-bash">n （功能描述：n 为数字，<span class="hljs-variable">$0</span> 代表命令本身(如./myshell.sh)，<span class="hljs-variable">$1</span>-<span class="hljs-variable">$9</span> 代表第一到第九个参数(如：<span class="hljs-variable">$1</span> 就是100 <span class="hljs-variable">$2</span> 就是200)，十以上的参数需要用大括号包含，如<span class="hljs-variable">$&#123;10&#125;</span>）</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">* （功能描述：这个变量代表命令行中所有的参数，$*把所有的参数看成一个整体）</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">@ （功能描述：这个变量也代表命令行中所有的参数，不过<span class="hljs-variable">$@</span>把每个参数区分对待）</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"><span class="hljs-comment"># （功能描述：这个变量代表命令行中所有参数的个数）</span></span><br><br>案例：编写一个 shell 脚本 myshell.sh ，在脚本中获取到命令行的各个参数信息。<br>vim myshell.sh<br>写入:<br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>echo &quot;命令本身=$0 第一个参数=$1 第二个参数=$2&quot;<br>echo &quot;所有的参数=$*&quot;<br>echo &quot;$@&quot;<br>echo &quot;参数个数=$#&quot;<br>保存退出<br>sh myshell.sh 100 200<br></code></pre></td></tr></table></figure><h4 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell">1.基本介绍：<br>预定义变量是 shell 设计者事先已经定义好的变量，可以直接在 shell 脚本中使用<br><br><br>2.基本语法：<br>(1)$$ （功能描述：当前进程的进程号（PID））<br>(2)$! （功能描述：后台运行的最后一个进程的进程号（PID））<br>(3)$？（功能描述：最后一次执行的命令的返回状态。如果这个变量的值为 0，证明上一个命令正确执行；如果这个变量的值为非 0（具体是哪个数，由命令自己来决定），则证明上一个命令执行不正确了。）<br><br>3.应用实例：<br>在一个 shell 脚本中简单使用一下预定义变量<br><br>vim preVar.sh<br>写入：<br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>echo &quot;当前执行的进程 id=$$&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">以后台的方式运行一个脚本(在脚本后加一个$)，并获取他的进程号</span><br>/root/shcode/myshell.sh &amp;<br><br>echo &quot;最后一个后台方式运行的进程 id=$!&quot; <br><br>echo &quot;执行的结果是=$?&quot;<br>保存并退出<br>sh preVar.sh<br><br></code></pre></td></tr></table></figure><p>运算符：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs shell">1.基本介绍：<br>学习如何在 shell 中进行各种运算操作。<br><br><br>2.基本语法：<br>(1)三种写法：<br><span class="hljs-meta prompt_">$</span><span class="language-bash">((运算式))</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">[运算式]</span><br>expr m + n (expression 表达式)<br> <br>(2)注意 expr 运算符间要有空格<br>如果希望将 expr 的结果赋给某个变量，使用 `` 或者 $( )<br><br>(3)expr m - n<br><br>(4)expr \*, /, %乘，除，取余<br><br><br>3.应用实例 oper.sh<br>案例 1：计算（2+3）X4 的值<br>案例 2：请求出命令行的两个参数[整数]的和 20 50<br><br>vim oper.sh<br>写入:<br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例 1：计算（2+3）X4 的值</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用第一种方式</span><br>RES1=$(((2+3)*4))        ---&gt;用一个变量RES1接收<br>echo &quot;res1=$RES1&quot;<br>保存并退出<br>sh oper.sh<br><br>vim oper.sh<br>写入:<br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用第二种方式, 推荐使用</span><br>RES2=$[(2+3)*4]<br>echo &quot;res2=$RES2&quot;<br>保存并退出<br>sh oper.sh<br><br>vim oper.sh<br>写入:<br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用第三种方式 <span class="hljs-built_in">expr</span></span> <br>TEMP=`expr 2 + 3`       <br>RES4=`expr $TEMP \* 4` <br>echo &quot;temp=$TEMP&quot;<br>echo &quot;res4=$RES4&quot;<br>保存并退出<br>sh oper.sh<br><br>vim oper.sh<br>写入:<br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例 2：请求出命令行的两个参数[整数]的和 20 50</span> <br>SUM=$[$1+$2]<br>echo &quot;sum=$SUM&quot;<br>保存并退出<br>sh oper.sh 20 50<br><br></code></pre></td></tr></table></figure><h4 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs shell">1.基本语法：<br>[ condition ] （注意 condition 前后要有空格）<br><span class="hljs-meta prompt_">#</span><span class="language-bash">非空返回 <span class="hljs-literal">true</span>，可使用$?验证（0 为 <span class="hljs-literal">true</span>，&gt;1 为 <span class="hljs-literal">false</span>）</span><br><br><br>2.应用实例：<br>[ hspEdu ]返回 true <br>[ ]返回 false<br>[ condition ] &amp;&amp; echo OK || echo notok条件满足，执行后面的语句<br><br><br>3.判断语句：<br>常用判断条件：<br>(1) = 字符串比较<br>(2)两个整数的比较<br>-lt 小于     less than<br>-le 小于等于  less equal<br>-eq 等于      equal<br>-gt 大于      greater<br>-ge 大于等于   greater equal<br>-ne 不等于     not equal<br>(3)按照文件权限进行判断<br>-r 有读的权限<br>-w 有写的权限<br>-x 有执行的权限<br>(4)按照文件类型进行判断<br>-f 文件存在并且是一个常规的文件<br>-e 文件存在<br>-d 文件存在并是一个目录<br><br><br>4.应用实例：<br>案例 1：&quot;ok&quot;是否等于&quot;ok&quot;<br>判断语句：使用 =<br>案例 2：23 是否大于等于 22<br>判断语句：使用 -ge<br>案例 3：/root/shcode/aaa.txt 目录中的文件是否存在<br>判断语句： 使用 -f<br><br>代码如下:<br>vim ifdemo.sh<br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例 1：<span class="hljs-string">&quot;ok&quot;</span>是否等于<span class="hljs-string">&quot;ok&quot;</span></span><br>if [ &quot;ok&quot; = &quot;ok&quot;  ]<br>then<br>        echo &quot;equal&quot;<br>fi                    -----&gt; if语句 以if开头 以fi结尾<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例 2：23 是否大于等于 22</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">判断语句：使用 -ge</span><br>if [ 23 -ge 22 ]<br>then<br>        echo &quot;大于&quot;<br>fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例 3：/root/shcode/aaa.txt 目录中的文件是否存在</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">判断语句： 使用 -f</span><br>if [ -f  /root/shcode/aaa.txt ]<br>then<br>        echo &quot;文件存在&quot;<br>fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">看几个案例</span><br>if [ ]<br>then<br>        echo &quot;存在&quot;<br>fi<br><br>if [ hspEdu01 ]<br>then<br>        echo &quot;hello hspEdu01&quot;<br>fi<br>sh ifdemo.sh<br><br>输出结果：<br>equal<br>大于<br>hello hspEdu01<br></code></pre></td></tr></table></figure><h4 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs shell">1.基本语法：<br>if [ 条件判断式 ] <br>then<br>代码<br>fi<br><br>或者 多分支<br><br>if [ 条件判断式 ] <br>then<br>代码<br>elif [条件判断式] <br>then<br>代码<br>fi<br><br>2.注意事项：[ 条件判断式 ]，中括号和条件判断式之间必须有空格<br><br>3.应用实例 ifCase.sh<br>案例：请编写一个 shell 程序，如果输入的参数，大于等于 60，则输出 &quot;及格了&quot;，如果小于 60,则输出 &quot;不及格&quot;<br>if [ $1 -ge 60 ]<br>then<br>        echo &quot;及格了&quot;<br>else<br>        echo &quot;不及格&quot;<br>fi<br><br>或者<br><br>if [ $1 -ge 60 ]<br>then<br>        echo &quot;及格了&quot;<br>elif[ $1 -lt 60]<br>then<br>        echo &quot;不及格&quot;<br>fi<br><br></code></pre></td></tr></table></figure><h4 id="case-语句"><a href="#case-语句" class="headerlink" title="case 语句"></a>case 语句</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs shell">1.基本语法：<br><br>case $变量名 in<br>&quot;值 1&quot;)<br>如果变量的值等于值 1，则执行程序 1<br>;;<br>&quot;值 2&quot;)<br>如果变量的值等于值 2，则执行程序 2<br>;;<br>…省略其他分支…<br><br>*)<br>如果变量的值都不是以上的值，则执行此程序<br>;;<br>esac<br><br>应用实例 testCase.sh<br>案例1：当命令行参数是1时，输出 &quot;周一&quot;, 是2时，就输出&quot;周二&quot;，其它情况输出&quot;other&quot;<br>vim testCase.sh<br>写入：<br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例1：当命令行参数是1时，输出 <span class="hljs-string">&quot;周一&quot;</span>, 是2时，就输出<span class="hljs-string">&quot;周二&quot;</span>，其它情况输出<span class="hljs-string">&quot;other&quot;</span></span><br>case $1 in<br>&quot;1&quot;)<br>echo &quot;周一&quot;<br>;;<br>&quot;2&quot;)<br>echo &quot;周二&quot;<br>;;<br>*)<br>echo &quot;other...&quot;<br>;;<br>esac<br>保存并退出<br><br>sh testCase.sh 1<br>周一<br><br></code></pre></td></tr></table></figure><h4 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs shell">基本语法：<br><br>第一种方式：<br><br>for 变量 in  值 1  值 2  值 3… <br>do<br>程序/代码<br>done<br><br>应用实例 testFor1.sh<br>案例：打印命令行输入的参数 [这里可以看出$*  和 $@ 的区别]<br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例：打印命令行输入的参数 [这里可以看出$*  和 <span class="hljs-variable">$@</span> 的区别]</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">注意：$* 是把输入的参数当作一个整体，所以只会输出一句话</span><br>for i in &quot;$*&quot;<br>do<br>        echo &quot;num is $*&quot;<br>done<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用 <span class="hljs-variable">$@</span> 来获取输入的参数，注意：也是把输入的参数看作一个整体，但这是分别对待；所以有几个参数就输出几句</span><br>echo &quot;======================================&quot;<br>for j in &quot;$@&quot;<br>do<br>        echo &quot;num is $@&quot;<br>done<br><br>sh testFor1.sh 100 200 300<br>num is 100 200 300<br>======================================<br>num is 100 200 300<br>num is 100 200 300<br>num is 100 200 300<br><br><br><br><br><br>第二种方式：<br><br>for (( 初始值;循环控制条件;变量变化 ))<br>do<br>程序/代码<br>done<br><br>应用实例 testFor2.sh<br>案例：从 1 加到 100 的值输出显示<br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例：从 1 加到 100 的值输出显示</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">定义一个变量SUM</span><br>SUM=0<br>for(( i=1; i&lt;=100; i++  ))<br>do<br>        SUM=$[$SUM+$i]<br>done<br>echo &quot;总和SUM=$SUM&quot;<br><br>sh testFor2.sh <br>总和SUM=5050<br><br>如果1加到x x由自己输入<br>SUM=0<br>for(( i=1; i&lt;=$1; i++  ))<br>do<br>        SUM=$[$SUM+$i]<br>done<br>echo &quot;总和SUM=$SUM&quot;<br><br>sh textFor2.sh 1000<br>总和SUM=500500<br><br></code></pre></td></tr></table></figure><h4 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">基本语法：<br>while [ 条件判断式 ]<br>do<br>程序/代码<br>done<br><br>注意：while 和 [有空格，条件判断式和[  ]也有空格<br><br>应用实例：testWhile.sh<br>案例：从命令行输入一个数 n，统计从 1+..+ n  的值是多少？<br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>SUM=0<br>i=0<br>while [ $i -le $1 ] <br>do<br>SUM=$[$SUM+$i]<br><span class="hljs-meta prompt_">#</span><span class="language-bash">i 自增</span><br>i=$[$i+1]<br>done<br>echo &quot;执行结果=$SUM&quot;<br><br>sh testWhile.sh 100<br>执行结果=5050<br><br></code></pre></td></tr></table></figure><h4 id="read-读取控制台输入"><a href="#read-读取控制台输入" class="headerlink" title="read 读取控制台输入"></a>read 读取控制台输入</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell">1.基本语法：<br>read(选项)(参数)<br>选项：<br>-p：指定读取值时的提示符；<br>-t：指定读取值时等待的时间（秒），如果没有在指定的时间内输入，就不再等待了<br>参数：<br>变量：指定读取值的变量名<br><br>2.应用实例 testRead.sh<br>案例 1：读取控制台输入一个 NUM1 值<br>案例 2：读取控制台输入一个 NUM2 值，在 10 秒内输入。代码:<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例 1：读取控制台输入一个 NUM1 值</span><br>read -p &quot;请输入一个数 NUM1=&quot; NUM1 <br>echo &quot;你输入的 NUM1=$NUM1&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">案例 2：读取控制台输入一个 NUM2 值，在 10 秒内输入。</span><br>read -t 10 -p &quot;请输入一个数 NUM2=&quot; NUM2 <br>echo &quot;你输入的 NUM2=$NUM2&quot;<br><br>sh testRead.sh<br>请输入一个数 NUM1=100<br>你输入的 NUM1=100<br><br></code></pre></td></tr></table></figure><h4 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">shell 编程和其它编程语言一样，有系统函数，也可以自定义函数。系统函数中，我们这里就介绍两个。<br></code></pre></td></tr></table></figure><h4 id="系统函数"><a href="#系统函数" class="headerlink" title="系统函数"></a>系统函数</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sh">1.<span class="hljs-built_in">basename</span> 基本语法<br>功能：返回完整路径最后 / 的部分，常用于获取文件名<br><span class="hljs-built_in">basename</span> [pathname] [suffix]<br><span class="hljs-built_in">basename</span> [string] [suffix]<br><br>功能描述：<span class="hljs-built_in">basename</span> 命令会删掉所有的前缀包括最后一个（‘/’）字符，然后将字符串显示出来。<br>选项：suffix 为后缀，如果 suffix 被指定了，<span class="hljs-built_in">basename</span> 会将 pathname 或 string 中的 suffix 去掉。<br><br>案例 1：请返回 /home/aaa/test.txt 的 <span class="hljs-string">&quot;test.txt&quot;</span> 部分<br><span class="hljs-built_in">basename</span> /home/aaa/test.txt<br>返回test.txt<br><br>如果输入：<span class="hljs-built_in">basename</span> /home/aaa/test.txt .txt<br>返回<span class="hljs-built_in">test</span><br>2.<span class="hljs-built_in">dirname</span> 基本语法<br>功能：返回完整路径最后 / 的前面的部分，常用于返回路径部分<br><span class="hljs-built_in">dirname</span> 文件绝对路径 <br><br>功能描述：从给定的包含绝对路径的文件名中去除文件名（非目录的部分），然后返回剩下的路径（目录的部分）<br><br>案例 1：请返回 /home/aaa/test.txt 的 /home/aaa <br><span class="hljs-built_in">dirname</span> /home/aaa/test.txt<br>返回/home/aaa<br></code></pre></td></tr></table></figure><h4 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs sh">基本语法：<br>[ <span class="hljs-keyword">function</span> ] funname[()]<br>&#123;<br>Action; <br>[<span class="hljs-built_in">return</span> int;]<br>&#125;<br><br>调用直接写函数名：funname[值]<br><br><br>案例 1：计算输入两个参数的和(动态的获取) testFun.sh<br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-comment">#案例 1：计算输入两个参数的和(动态的获取)</span><br><br><span class="hljs-comment">#定义函数 getSum </span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">getSum</span></span>() &#123;<br>SUM=$[<span class="hljs-variable">$n1</span>+<span class="hljs-variable">$n2</span>] <br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;和是=<span class="hljs-variable">$SUM</span>&quot;</span><br>&#125;<br><br><span class="hljs-comment">#输入两个值</span><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;请输入一个数 n1=&quot;</span> n1 <br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;请输入一个数 n2=&quot;</span> n2<br><br><span class="hljs-comment">#调用自定义函数</span><br>getSum <span class="hljs-variable">$n1</span> <span class="hljs-variable">$n2</span><br><br><br>sh testFun.sh <br>请输入一个数 n1=10<br>请输入一个数 n2=90<br>和是=100<br><br></code></pre></td></tr></table></figure><h2 id="第二十一章：Linux-高级篇-日志管理"><a href="#第二十一章：Linux-高级篇-日志管理" class="headerlink" title="第二十一章：Linux 高级篇-日志管理"></a>第二十一章：Linux 高级篇-日志管理</h2><h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">(1)日志文件是重要的系统信息文件，其中记录了许多重要的系统事件，包括用户的登录信息、系统的启动信息、系统的安全信息、邮件相关信息、各种服务相关信息等。<br>(2)日志对于安全来说也很重要，它记录了系统每天发生的各种事情，通过日志来检查错误发生的原因，或者受到攻击时攻击者留下的痕迹。<br>(3)可以这样理解 日志是用来记录重大事件的工具<br></code></pre></td></tr></table></figure><h4 id="系统常用的日志"><a href="#系统常用的日志" class="headerlink" title="系统常用的日志"></a>系统常用的日志</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">系统日志文件的保存位置：/var/log/ 目录下<br>应用案例：<br>使用 root 用户通过 xshell6 登陆，第一次使用错误的密码，第二次使用正确的密码登录成功看看在日志文件/var/log/secure 里有没有记录相关信息<br>系统常用日志：<br></code></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3481/image-20221019121939561.png" alt="image-20221019121939561"></p><p>日志管理服务rsyslogd</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">CentOS7.6 日志服务是 rsyslogd   (rocket-fast system for log)<br>CentOS6.x 日志服务是 syslogd <br>rsyslogd 功能更强大<br>rsyslogd 的使用、日志文件的格式，和 syslogd 服务是兼容的<br><br>rsyslogd是一个后台程序(服务)，来管理/记录/操作相关日志。<br>将日志记录到对应的文件中。<br><br>/etc/rsyslog.conf配置文件中记录了要管理哪些日志和将这些日志记录到哪个文件中。<br></code></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3481/image-20221019145550645.png" alt="image-20221019145550645"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs shell">1.在进行日志管理时，要保证rsyslogd服务是启动的！<br><br>(1)查询 Linux 中的 rsyslogd 服务是否启动<br>ps aux | grep &quot;rsyslog&quot; <br><br>ps aux | grep &quot;rsyslog&quot; | grep -v &quot;grep&quot;<br>| grep -v &quot;grep&quot; ---&gt; 筛选出ps aux | grep &quot;rsyslog&quot; 结果中不是grep的<br><br>(2)查询 rsyslogd 服务的自启动状态(是否是自启动状态enable)<br>systemctl list-unit-files | grep rsyslog<br><br><br>2.配置文件：/etc/rsyslog.conf<br>该配置文件中记录了：日志和日志存放在哪个文件<br><br>关于日志：*.*<br>其中第一个*代表日志类型，第二个*代表日志级别<br><br>(1)日志类型分为：<br>auth##pam 产生的日志<br>authpriv##ssh、ftp 等登录信息的验证信息<br>corn##时间任务相关<br>kern##内核<br>lpr##打印<br>mail##邮件<br>mark(syslog)-rsyslog##服务内部的信息，时间标识<br>news##新闻组<br>user##用户程序产生的相关信息<br>uucp##unix to nuix copy主机之间相关的通信<br>local 1-7##自定义的日志设备<br><br>(2)日志级别分为：<br>debug##有调试信息的，日志通信最多<br>info##一般信息日志，最常用<br>notice##最具有重要性的普通条件的信息<br>warning##警告级别<br>err##错误级别，阻止某个功能或者模块不能正常工作的信息<br>crit##严重级别，阻止整个系统或者整个软件不能正常工作的信息<br>alert##需要立刻修改的信息<br>emerg##内核崩溃等重要信息<br>none##什么都不记录<br>注意：从上到下，级别从低到高，记录信息越来越少<br><br><br>3.由日志服务 rsyslogd 记录的日志文件，<br>日志文件的内容：每一行都代表一个事件，每一行有以下四个内容：<br>1)事件产生的时间<br>2)产生事件的服务器的主机名<br>3)产生事件的服务名或程序名<br>4)事件的具体信息<br><br><br>4.日志如何查看实例<br>查看一下 /var/log/secure 日志，这个日志中记录的是用户验证和授权方面的信息 来分析如何查看<br><br>5.日志管理服务应用实例（增加自定义的日志）<br>在/etc/rsyslog.conf 中添加一个日志文件/var/log/hsp.log,当有事件发送时(比如 sshd 服务相关事件)，该文件会接收到信息并保存. <br>给小伙伴演示 重启，登录 的情况，看看是否有日志保存<br><br>vim /etc/rsyslog.conf <br>写入：<br>*.*  /var/log/hsp.log<br>保存退出<br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">/var/log/hsp.log  (创建日志文件)</span><br>然后重启，重启事件会被记录到/var/log/hsp.log中<br>cat hsp.log | grep sshd 就可以查到信息(sshd远程连接)<br><br></code></pre></td></tr></table></figure><h4 id="日志轮替"><a href="#日志轮替" class="headerlink" title="日志轮替"></a>日志轮替</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">日志轮替(logrotate)就是把旧的日志文件移动并改名，同时建立新的空日志文件，当旧日志文件超出保存的范围之后，就会进行删除<br>清除日志中旧的信息<br>(1)centos7 使用 logrotate 进行日志轮替管理<br>要想改变日志轮替文件名字，通过 /etc/logrotate.conf 配置文件中“dateext” 参数<br><br>(2)如果配置文件中有“dateext”参数，那么日志会用日期来作为日志文件的后缀，例如 “secure-20201010”。<br>这样日志文件名不会重叠，也就不需要日志文件的改名，只需要指定保存日志个数，删除多余的日志文件即可。<br><br>(3)如果配置文件中没有“dateext”参数，日志文件就需要进行改名了。<br>当第一次进行日志轮替时，当前的“secure”日志会自动改名为“secure.1”，然后新建“secure”日志， 用来保存新的日志。<br>当第二次进行日志轮替时，“secure.1” 会自动改名为“secure.2”， 当前的“secure”日志会自动改名为“secure.1”，然后也会新建“secure”日志，用来保存新的日志，以此类推。<br><br></code></pre></td></tr></table></figure><h4 id="logrotate-配置文件"><a href="#logrotate-配置文件" class="headerlink" title="logrotate 配置文件"></a>logrotate 配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs shell">/etc/logrotate.conf 为 logrotate 的全局配置文件(写了日志文件轮替规则)<br><br>/etc/logrotate.conf中的轮替规则适用于所有日志文件(除了单独指定轮替规则的日志文件)<br>可以在/etc/logrotate.conf对某些日志文件单独指定轮替规则<br>也可以把对某些日志文件单独指定的轮替规则写在/etc/logrotate.d目录下，然后在/etc/logrotate.conf 中include调用<br><br>/etc/logrotate.conf文件内容：<br><span class="hljs-meta prompt_"># </span><span class="language-bash">rotate <span class="hljs-built_in">log</span> files weekly---&gt;每周对日志文件进行一次轮替</span><br>weekly<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">keep 4 weeks worth of backlogs---&gt;共保存 4 份日志文件，当建立新的日志文件时，旧的将会被删除</span><br>rotate 4<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">create new (empty) <span class="hljs-built_in">log</span> files after rotating old ones---&gt;创建新的空的日志文件，在日志轮替后</span><br>create<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">use <span class="hljs-built_in">date</span> as a suffix of the rotated file---&gt;使用日期作为日志轮替文件的后缀</span><br>dateext<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">uncomment this <span class="hljs-keyword">if</span> you want your <span class="hljs-built_in">log</span> files compressed---&gt;日志文件是否压缩。如果取消注释，则日志会在转储的同时进行压缩</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">compress</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">RPM packages drop <span class="hljs-built_in">log</span> rotation information into this directory</span> <br>include /etc/logrotate.d---&gt;可以把一些单独的轮替规则写在/etc/logrotate.d下(在本文件中include调用一下就行)，也可以写在本文件中(如下面写的)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">下面是单独设置，优先级更高。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">no packages own wtmp and btmp -- we<span class="hljs-string">&#x27;ll rotate them here</span></span><br>/var/log/wtmp &#123;<br>monthly # 每月对日志文件进行一次轮替<br>create 0664 root utmp  # 建立的新日志文件，权限是 0664  ，所有者是 root ，所属组是 utmp 组<br>minsize 1M # 日志文件最小轮替大小是 1MB 。也就是日志一定要超过 1MB 才会轮替，否则就算时间达到一个月，也不进行日志转储<br>rotate 1  # 仅保留一个日志备份。也就是只有 wtmp  和 wtmp.1  日志保留而已<br>&#125;<br><br>/var/log/btmp &#123;<br>missingok  # 如果日志不存在，则忽略该日志的警告信息<br>monthly<br>create 0600 root utmp rotate 1<br>&#125;<br><br><br><br><br>单独指定某个日志文件的轮替规则的参数说明：<br>daily日志的轮替周期是每天<br>weekly日志的轮替周期是每周<br>monthly日志的轮替周期是每月<br>rotate 数字保留的日志文件的个数。0 指没有备份<br>compress日志轮替时，旧的日志进行压缩<br>create mode owner group建立新日志，同时指定新日志的权限与所有者和所属组。<br>mail address当日志轮替时，输出内容通过邮件发送到指定的邮件地址。<br>missingok如果日志不存在，则忽略该日志的警告信息<br>notifempty如果日志为空文件，则不进行日志轮替<br>minsize 大小日志轮替的最小值。也就是日志一定要达到这个最小值才会轮替，否则就算时间达到也不轮替<br>size 大小日志只有大于指定大小才进行日志轮替，而不是按照时间轮替。<br>dateext使用日期作为日志轮替文件的后缀。<br>sharedscripts在此关键字之后的脚本只执行一次。<br>prerotate/endscript在日志轮替之前执行脚本命令。<br>postrotate/endscript在日志轮替之后执行脚本命令。<br></code></pre></td></tr></table></figure><h4 id="把自己的日志加入日志轮替"><a href="#把自己的日志加入日志轮替" class="headerlink" title="把自己的日志加入日志轮替"></a>把自己的日志加入日志轮替</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">1)第一种方法：<br>直接在/etc/logrotate.conf 配置文件中写入该日志的轮替策略<br>2)第二种方法：<br>在/etc/logrotate.d/目录中新建立该日志的轮替文件，在该轮替文件中写入正确的轮替策略，因为该目录中的文件都会被“include”到主配置文件中，所以也可以把日志加入轮替。<br><br>3)推荐使用第二种方法，因为系统中需要轮替的日志非常多，如果全都直接写 入/etc/logrotate.conf 配置文件，那么这个文件的可管理性就会非常差，不利于此文件的维护。<br></code></pre></td></tr></table></figure><p>案例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sh">案例：在/etc/logrotate.conf 进行配置, 或者直接在 /etc/logrotate.d/ 下创建文件 hsplog  <br>编写如下内容,具体轮替的效果 可以参考 /var/log  下的 boot.log 情况.<br>/var/log/hsp.log<br>&#123;<br>missingok<br>daily<br>copytruncate<br>rotate 7<br>notifempty<br>&#125;<br><br><br>在 /etc/logrotate.d/ 下创建文件 hsplog  <br>vim  hsplog  <br>写入：<br>/var/log/hsp.log<br>&#123;<br>missingok<br>daily<br>copytruncate<br>rotate 1<br>notifempty<br>&#125;<br>保存退出<br><br>这样就好了，因为/etc/logrotate.conf 中有：include /etc/logrotate.d<br><br></code></pre></td></tr></table></figure><p>日志轮替机制原理：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">日志轮替之所以可以在指定的时间备份日志，是依赖系统定时任务。<br>在 /etc/cron.daily/目录，就会发现这个目录中是有 logrotate 文件(可执行)，<br>logrotate 通过这个文件依赖定时任务执行的。<br><br>crond定时后台程序会定时执行cron.daily内的文件<br>logrotate 文件在cron.daily下<br>所以也会定时执行文件中的轮替规则<br>写日志是rsyslogd<br>日志轮替是logrotate<br></code></pre></td></tr></table></figure><p>查看内存日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">有一些日志是写到内存里的，还没有写到文件里，因为这些日志是实时变化的<br>重启之后内存日志会被清空<br><br>查看内存日志指令：journalctl<br>journalctl查看全部<br>journalctl -n 3查看最新 3 条<br>journalctl --since 19:00--until 19:10:10查看起始时间到结束时间的日志可加日期<br>journalctl -p err报错日志<br>journalctl -o verbose日志详细内容<br>journalctl _PID=1245 _COMM=sshd查看包含这些参数的日志（在详细日志查看） 或者 journalctl |grep sshd<br> <br><br>注意: journalctl查看的是内存日志, 重启清空<br><br>演示案例:<br>使用 journalctl | grep sshd来看看用户登录清空, 重启系统，再次查询，看看日志有什么变化没有<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC理论学习</title>
      <link href="/2022/10/11/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/SpringMVC%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/10/11/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/SpringMVC%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="一、SpringMVC简介"><a href="#一、SpringMVC简介" class="headerlink" title="一、SpringMVC简介"></a>一、SpringMVC简介</h1><h3 id="1、什么是MVC"><a href="#1、什么是MVC" class="headerlink" title="1、什么是MVC"></a>1、什么是MVC</h3><p>MVC是一种软件架构的思想，将软件按照模型、视图、控制器来划分</p><p>M：Model，模型层，指工程中的JavaBean，作用是处理数据</p><p>JavaBean分为两类：</p><ul><li>一类称为实体类Bean：专门存储业务数据的，如 Student、User 等</li><li>一类称为业务处理 Bean：指 Service 或 Dao 对象，专门用于处理业务逻辑和数据访问。</li></ul><p>V：View，视图层，指工程中的html或jsp等页面，作用是与用户进行交互，展示数据</p><p>C：Controller，控制层，指工程中的servlet，作用是接收请求和响应浏览器</p><p>MVC的工作流程：<br>用户通过视图层发送请求到服务器，在服务器中请求被Controller接收，Controller调用相应的Model层处理请求，处理完毕将结果返回到Controller，Controller再根据请求处理的结果找到相应的View视图，渲染数据后最终响应给浏览器</p><h3 id="2、什么是SpringMVC"><a href="#2、什么是SpringMVC" class="headerlink" title="2、什么是SpringMVC"></a>2、什么是SpringMVC</h3><p>SpringMVC是Spring的一个后续产品，是Spring的一个子项目</p><p>SpringMVC 是 Spring 为表述层开发提供的一整套完备的解决方案。在表述层框架历经 Strust、WebWork、Strust2 等诸多产品的历代更迭之后，目前业界普遍选择了 SpringMVC 作为 Java EE 项目表述层开发的<strong>首选方案</strong>。</p><blockquote><p>注：三层架构分为表述层（或表示层）、业务逻辑层、数据访问层，表述层表示前台页面和后台servlet</p></blockquote><h3 id="3、SpringMVC的特点"><a href="#3、SpringMVC的特点" class="headerlink" title="3、SpringMVC的特点"></a>3、SpringMVC的特点</h3><ul><li><strong>Spring 家族原生产品</strong>，与 IOC 容器等基础设施无缝对接</li><li><strong>基于原生的Servlet</strong>，通过了功能强大的<strong>前端控制器DispatcherServlet</strong>，对请求和响应进行统一处理</li><li>表述层各细分领域需要解决的问题<strong>全方位覆盖</strong>，提供<strong>全面解决方案</strong></li><li><strong>代码清新简洁</strong>，大幅度提升开发效率</li><li>内部组件化程度高，可插拔式组件<strong>即插即用</strong>，想要什么功能配置相应组件即可</li><li><strong>性能卓著</strong>，尤其适合现代大型、超大型互联网项目要求</li></ul><h1 id="二、HelloWorld"><a href="#二、HelloWorld" class="headerlink" title="二、HelloWorld"></a>二、HelloWorld</h1><h3 id="1、开发环境"><a href="#1、开发环境" class="headerlink" title="1、开发环境"></a>1、开发环境</h3><p>IDE：idea 2019.2</p><p>构建工具：maven3.5.4</p><p>服务器：tomcat7</p><p>Spring版本：5.3.1</p><h3 id="2、创建maven工程"><a href="#2、创建maven工程" class="headerlink" title="2、创建maven工程"></a>2、创建maven工程</h3><h5 id="a-gt-添加web模块"><a href="#a-gt-添加web模块" class="headerlink" title="a&gt;添加web模块"></a>a&gt;添加web模块</h5><h5 id="b-gt-打包方式：war"><a href="#b-gt-打包方式：war" class="headerlink" title="b&gt;打包方式：war"></a>b&gt;打包方式：war</h5><h5 id="c-gt-引入依赖"><a href="#c-gt-引入依赖" class="headerlink" title="c&gt;引入依赖"></a>c&gt;引入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- SpringMVC --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 日志 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- ServletAPI --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0&lt;/vers ion&gt;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.12.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注：由于 Maven 的传递性，我们不必将所有需要的包全部配置依赖，而是配置最顶端的依赖，其他靠传递性导入。</p><h3 id="3、配置web-xml"><a href="#3、配置web-xml" class="headerlink" title="3、配置web.xml"></a>3、配置web.xml</h3><p>注册SpringMVC的前端控制器DispatcherServlet</p><h5 id="a-gt-默认配置方式"><a href="#a-gt-默认配置方式" class="headerlink" title="a&gt;默认配置方式"></a>a&gt;默认配置方式</h5><p>此配置作用下，SpringMVC的配置文件默认位于WEB-INF下，默认名称为\<servlet-name>-servlet.xml，例如，以下配置所对应SpringMVC的配置文件位于WEB-INF下，文件名为springMVC-servlet.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        设置springMVC的核心控制器所能处理的请求的请求路径</span><br><span class="hljs-comment">        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径</span><br><span class="hljs-comment">        但是/不能匹配.jsp请求路径的请求</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="b-gt-扩展配置方式"><a href="#b-gt-扩展配置方式" class="headerlink" title="b&gt;扩展配置方式"></a>b&gt;扩展配置方式</h5><p>可通过init-param标签设置SpringMVC配置文件的位置和名称，通过load-on-startup标签设置SpringMVC前端控制器DispatcherServlet的初始化时间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 通过初始化参数指定SpringMVC配置文件的位置和名称 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- contextConfigLocation为固定值 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 使用classpath:表示从类路径查找配置文件，例如maven工程中的src/main/resources --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment"> 作为框架的核心组件，在启动过程中有大量的初始化操作要做</span><br><span class="hljs-comment">而这些操作放在第一次请求时才执行会严重影响访问速度</span><br><span class="hljs-comment">因此需要通过此标签将启动控制DispatcherServlet的初始化时间提前到服务器启动时</span><br><span class="hljs-comment">--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        设置springMVC的核心控制器所能处理的请求的请求路径</span><br><span class="hljs-comment">        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径</span><br><span class="hljs-comment">        但是/不能匹配.jsp请求路径的请求</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注：</p><p>\<url-pattern>标签中使用/和/*的区别：</p><p>/所匹配的请求可以是/login或.html或.js或.css方式的请求路径，但是/不能匹配.jsp请求路径的请求</p><p>因此就可以避免在访问jsp页面时，该请求被DispatcherServlet处理，从而找不到相应的页面</p><p>/<em>则能够匹配所有请求，例如在使用过滤器时，若需要对所有请求进行过滤，就需要使用/\</em>的写法</p></blockquote><h3 id="4、创建请求控制器"><a href="#4、创建请求控制器" class="headerlink" title="4、创建请求控制器"></a>4、创建请求控制器</h3><p>由于前端控制器对浏览器发送的请求进行了统一的处理，但是具体的请求有不同的处理过程，因此需要创建处理具体请求的类，即请求控制器</p><p>请求控制器中每一个处理请求的方法成为控制器方法</p><p>因为SpringMVC的控制器由一个POJO（普通的Java类）担任，因此需要通过@Controller注解将其标识为一个控制层组件，交给Spring的IoC容器管理，此时SpringMVC才能够识别控制器的存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5、创建springMVC的配置文件"><a href="#5、创建springMVC的配置文件" class="headerlink" title="5、创建springMVC的配置文件"></a>5、创建springMVC的配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 自动扫描包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.mvc.controller&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;viewResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;order&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characterEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateEngine&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateResolver&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span><br>    <br>                    <span class="hljs-comment">&lt;!-- 视图前缀 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span><br>    <br>                    <span class="hljs-comment">&lt;!-- 视图后缀 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.html&quot;</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateMode&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;HTML5&quot;</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characterEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">   处理静态资源，例如html、js、css、jpg</span><br><span class="hljs-comment">  若只设置该标签，则只能访问静态资源，其他请求则无法访问</span><br><span class="hljs-comment">  此时必须设置&lt;mvc:annotation-driven/&gt;解决问题</span><br><span class="hljs-comment"> --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 开启mvc注解驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:message-converters</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 处理响应中文内容乱码 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultCharset&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;supportedMediaTypes&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>text/html<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>application/json<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:message-converters</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="6、测试HelloWorld"><a href="#6、测试HelloWorld" class="headerlink" title="6、测试HelloWorld"></a>6、测试HelloWorld</h3><h5 id="a-gt-实现对首页的访问"><a href="#a-gt-实现对首页的访问" class="headerlink" title="a&gt;实现对首页的访问"></a>a&gt;实现对首页的访问</h5><p>在请求控制器中创建处理请求的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// @RequestMapping注解：处理请求和控制器方法之间的映射关系</span><br><span class="hljs-comment">// @RequestMapping注解的value属性可以通过请求地址匹配请求，/表示的当前工程的上下文路径</span><br><span class="hljs-comment">// localhost:8080/springMVC/</span><br><span class="hljs-meta">@RequestMapping(&quot;/&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//设置视图名称</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="b-gt-通过超链接跳转到指定页面"><a href="#b-gt-通过超链接跳转到指定页面" class="headerlink" title="b&gt;通过超链接跳转到指定页面"></a>b&gt;通过超链接跳转到指定页面</h5><p>在主页index.html中设置超链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/hello&#125;&quot;</span>&gt;</span>HelloWorld<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在请求控制器中创建处理请求的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">HelloWorld</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;target&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7、总结"><a href="#7、总结" class="headerlink" title="7、总结"></a>7、总结</h3><p>浏览器发送请求，若请求地址符合前端控制器的url-pattern，该请求就会被前端控制器DispatcherServlet处理。前端控制器会读取SpringMVC的核心配置文件，通过扫描组件找到控制器，将请求地址和控制器中@RequestMapping注解的value属性值进行匹配，若匹配成功，该注解所标识的控制器方法就是处理请求的方法。处理请求的方法需要返回一个字符串类型的视图名称，该视图名称会被视图解析器解析，加上前缀和后缀组成视图的路径，通过Thymeleaf对视图进行渲染，最终转发到视图所对应页面</p><h1 id="三、-RequestMapping注解"><a href="#三、-RequestMapping注解" class="headerlink" title="三、@RequestMapping注解"></a>三、@RequestMapping注解</h1><h3 id="1、-RequestMapping注解的功能"><a href="#1、-RequestMapping注解的功能" class="headerlink" title="1、@RequestMapping注解的功能"></a>1、@RequestMapping注解的功能</h3><p>从注解名称上我们可以看到，@RequestMapping注解的作用就是将请求和处理请求的控制器方法关联起来，建立映射关系。</p><p>SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。</p><h3 id="2、-RequestMapping注解的位置"><a href="#2、-RequestMapping注解的位置" class="headerlink" title="2、@RequestMapping注解的位置"></a>2、@RequestMapping注解的位置</h3><p>@RequestMapping标识一个类：设置映射请求的请求路径的初始信息</p><p>@RequestMapping标识一个方法：设置映射请求请求路径的具体信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingController</span> &#123;<br><br><span class="hljs-comment">//此时请求映射所映射的请求的请求路径为：/test/testRequestMapping</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/testRequestMapping&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRequestMapping</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、-RequestMapping注解的value属性"><a href="#3、-RequestMapping注解的value属性" class="headerlink" title="3、@RequestMapping注解的value属性"></a>3、@RequestMapping注解的value属性</h3><p>@RequestMapping注解的value属性通过请求的请求地址匹配请求映射</p><p>@RequestMapping注解的value属性是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求</p><p>@RequestMapping注解的value属性必须设置，至少通过请求地址匹配请求映射</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testRequestMapping&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/testRequestMapping<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/test&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(</span><br><span class="hljs-meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRequestMapping</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、-RequestMapping注解的method属性"><a href="#4、-RequestMapping注解的method属性" class="headerlink" title="4、@RequestMapping注解的method属性"></a>4、@RequestMapping注解的method属性</h3><p>@RequestMapping注解的method属性通过请求的请求方式（get或post）匹配请求映射</p><p>@RequestMapping注解的method属性是一个RequestMethod类型的数组，表示该请求映射能够匹配多种请求方式的请求</p><p>若当前请求的请求地址满足请求映射的value属性，但是请求方式不满足method属性，则浏览器报错405：Request method ‘POST’ not supported</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/test&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/test&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(</span><br><span class="hljs-meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;,</span><br><span class="hljs-meta">        method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRequestMapping</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注：</p><p>1、对于处理指定请求方式的控制器方法，SpringMVC中提供了@RequestMapping的派生注解</p><p>处理get请求的映射—&gt;@GetMapping</p><p>处理post请求的映射—&gt;@PostMapping</p><p>处理put请求的映射—&gt;@PutMapping</p><p>处理delete请求的映射—&gt;@DeleteMapping</p><p>2、常用的请求方式有get，post，put，delete</p><p>但是目前浏览器只支持get和post，若在form表单提交时，为method设置了其他请求方式的字符串（put或delete），则按照默认的请求方式get处理</p><p>若要发送put和delete请求，则需要通过spring提供的过滤器HiddenHttpMethodFilter，在RESTful部分会讲到</p></blockquote><h3 id="5、-RequestMapping注解的params属性（了解）"><a href="#5、-RequestMapping注解的params属性（了解）" class="headerlink" title="5、@RequestMapping注解的params属性（了解）"></a>5、@RequestMapping注解的params属性（了解）</h3><p>@RequestMapping注解的params属性通过请求的请求参数匹配请求映射</p><p>@RequestMapping注解的params属性是一个字符串类型的数组，可以通过四种表达式设置请求参数和请求映射的匹配关系</p><p>“param”：要求请求映射所匹配的请求必须携带param请求参数</p><p>“!param”：要求请求映射所匹配的请求必须不能携带param请求参数</p><p>“param=value”：要求请求映射所匹配的请求必须携带param请求参数且param=value</p><p>“param!=value”：要求请求映射所匹配的请求必须携带param请求参数但是param!=value</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/test(username=&#x27;admin&#x27;,password=123456)&quot;</span>&gt;</span>测试@RequestMapping的params属性--&gt;/test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(</span><br><span class="hljs-meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span><br><span class="hljs-meta">        ,method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span><br><span class="hljs-meta">        ,params = &#123;&quot;username&quot;,&quot;password!=123456&quot;&#125;</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRequestMapping</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注：</p><p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足params属性，此时页面回报错400：Parameter conditions “username, password!=123456” not met for actual request parameters: username={admin}, password={123456}</p></blockquote><h3 id="6、-RequestMapping注解的headers属性（了解）"><a href="#6、-RequestMapping注解的headers属性（了解）" class="headerlink" title="6、@RequestMapping注解的headers属性（了解）"></a>6、@RequestMapping注解的headers属性（了解）</h3><p>@RequestMapping注解的headers属性通过请求的请求头信息匹配请求映射</p><p>@RequestMapping注解的headers属性是一个字符串类型的数组，可以通过四种表达式设置请求头信息和请求映射的匹配关系</p><p>“header”：要求请求映射所匹配的请求必须携带header请求头信息</p><p>“!header”：要求请求映射所匹配的请求必须不能携带header请求头信息</p><p>“header=value”：要求请求映射所匹配的请求必须携带header请求头信息且header=value</p><p>“header!=value”：要求请求映射所匹配的请求必须携带header请求头信息且header!=value</p><p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足headers属性，此时页面显示404错误，即资源未找到</p><h3 id="7、SpringMVC支持ant风格的路径"><a href="#7、SpringMVC支持ant风格的路径" class="headerlink" title="7、SpringMVC支持ant风格的路径"></a>7、SpringMVC支持ant风格的路径</h3><p>？：表示任意的单个字符</p><p>*：表示任意的0个或多个字符</p><p>**：表示任意的一层或多层目录</p><p>注意：在使用*<em>时，只能使用/*</em>/xxx的方式</p><h3 id="8、SpringMVC支持路径中的占位符（重点）"><a href="#8、SpringMVC支持路径中的占位符（重点）" class="headerlink" title="8、SpringMVC支持路径中的占位符（重点）"></a>8、SpringMVC支持路径中的占位符（重点）</h3><p>原始方式：/deleteUser?id=1</p><p>rest方式：/deleteUser/1</p><p>SpringMVC路径中的占位符常用于RESTful风格中，当请求路径中将某些数据通过路径的方式传输到服务器中，就可以在相应的@RequestMapping注解的value属性中通过占位符{xxx}表示传输的数据，在通过@PathVariable注解，将占位符所表示的数据赋值给控制器方法的形参</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testRest/1/admin&#125;&quot;</span>&gt;</span>测试路径中的占位符--&gt;/testRest<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testRest/&#123;id&#125;/&#123;username&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRest</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String id, <span class="hljs-meta">@PathVariable(&quot;username&quot;)</span> String username)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;id:&quot;</span>+id+<span class="hljs-string">&quot;,username:&quot;</span>+username);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br><span class="hljs-comment">//最终输出的内容为--&gt;id:1,username:admin</span><br></code></pre></td></tr></table></figure><h1 id="四、SpringMVC获取请求参数"><a href="#四、SpringMVC获取请求参数" class="headerlink" title="四、SpringMVC获取请求参数"></a>四、SpringMVC获取请求参数</h1><h3 id="1、通过ServletAPI获取"><a href="#1、通过ServletAPI获取" class="headerlink" title="1、通过ServletAPI获取"></a>1、通过ServletAPI获取</h3><p>将HttpServletRequest作为控制器方法的形参，此时HttpServletRequest类型的参数表示封装了当前请求的请求报文的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testParam&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testParam</span><span class="hljs-params">(HttpServletRequest request)</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;username:&quot;</span>+username+<span class="hljs-string">&quot;,password:&quot;</span>+password);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、通过控制器方法的形参获取请求参数"><a href="#2、通过控制器方法的形参获取请求参数" class="headerlink" title="2、通过控制器方法的形参获取请求参数"></a>2、通过控制器方法的形参获取请求参数</h3><p>在控制器方法的形参位置，设置和请求参数同名的形参，当浏览器发送请求，匹配到请求映射时，在DispatcherServlet中就会将请求参数赋值给相应的形参</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testParam(username=&#x27;admin&#x27;,password=123456)&#125;&quot;</span>&gt;</span>测试获取请求参数--&gt;/testParam<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testParam&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testParam</span><span class="hljs-params">(String username, String password)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;username:&quot;</span>+username+<span class="hljs-string">&quot;,password:&quot;</span>+password);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注：</p><p>若请求所传输的请求参数中有多个同名的请求参数，此时可以在控制器方法的形参中设置字符串数组或者字符串类型的形参接收此请求参数</p><p>若使用字符串数组类型的形参，此参数的数组中包含了每一个数据</p><p>若使用字符串类型的形参，此参数的值为每个数据中间使用逗号拼接的结果</p></blockquote><h3 id="3、-RequestParam"><a href="#3、-RequestParam" class="headerlink" title="3、@RequestParam"></a>3、@RequestParam</h3><p>@RequestParam是将请求参数和控制器方法的形参创建映射关系</p><p>@RequestParam注解一共有三个属性：</p><p>value：指定为形参赋值的请求参数的参数名</p><p>required：设置是否必须传输此请求参数，默认值为true</p><p>若设置为true时，则当前请求必须传输value所指定的请求参数，若没有传输该请求参数，且没有设置defaultValue属性，则页面报错400：Required String parameter ‘xxx’ is not present；若设置为false，则当前请求不是必须传输value所指定的请求参数，若没有传输，则注解所标识的形参的值为null</p><p>defaultValue：不管required属性值为true或false，当value所指定的请求参数没有传输或传输的值为””时，则使用默认值为形参赋值</p><h3 id="4、-RequestHeader"><a href="#4、-RequestHeader" class="headerlink" title="4、@RequestHeader"></a>4、@RequestHeader</h3><p>@RequestHeader是将请求头信息和控制器方法的形参创建映射关系</p><p>@RequestHeader注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p><h3 id="5、-CookieValue"><a href="#5、-CookieValue" class="headerlink" title="5、@CookieValue"></a>5、@CookieValue</h3><p>@CookieValue是将cookie数据和控制器方法的形参创建映射关系</p><p>@CookieValue注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p><h3 id="6、通过POJO获取请求参数"><a href="#6、通过POJO获取请求参数" class="headerlink" title="6、通过POJO获取请求参数"></a>6、通过POJO获取请求参数</h3><p>可以在控制器方法的形参位置设置一个实体类类型的形参，此时若浏览器传输的请求参数的参数名和实体类中的属性名一致，那么请求参数就会为此属性赋值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/testpojo&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    性别：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;男&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    年龄：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    邮箱：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testpojo&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testPOJO</span><span class="hljs-params">(User user)</span>&#123;<br>    System.out.println(user);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br><span class="hljs-comment">//最终结果--&gt;User&#123;id=null, username=&#x27;张三&#x27;, password=&#x27;123&#x27;, age=23, sex=&#x27;男&#x27;, email=&#x27;123@qq.com&#x27;&#125;</span><br></code></pre></td></tr></table></figure><h3 id="7、解决获取请求参数的乱码问题"><a href="#7、解决获取请求参数的乱码问题" class="headerlink" title="7、解决获取请求参数的乱码问题"></a>7、解决获取请求参数的乱码问题</h3><p>解决获取请求参数的乱码问题，可以使用SpringMVC提供的编码过滤器CharacterEncodingFilter，但是必须在web.xml中进行注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置springMVC的编码过滤器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceResponseEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注：</p><p>SpringMVC中处理编码的过滤器一定要配置到其他过滤器之前，否则无效</p></blockquote><h1 id="五、域对象共享数据"><a href="#五、域对象共享数据" class="headerlink" title="五、域对象共享数据"></a>五、域对象共享数据</h1><h3 id="1、使用ServletAPI向request域对象共享数据"><a href="#1、使用ServletAPI向request域对象共享数据" class="headerlink" title="1、使用ServletAPI向request域对象共享数据"></a>1、使用ServletAPI向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testServletAPI&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testServletAPI</span><span class="hljs-params">(HttpServletRequest request)</span>&#123;<br>    request.setAttribute(<span class="hljs-string">&quot;testScope&quot;</span>, <span class="hljs-string">&quot;hello,servletAPI&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、使用ModelAndView向request域对象共享数据"><a href="#2、使用ModelAndView向request域对象共享数据" class="headerlink" title="2、使用ModelAndView向request域对象共享数据"></a>2、使用ModelAndView向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testModelAndView&quot;)</span><br><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">testModelAndView</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ModelAndView有Model和View的功能</span><br><span class="hljs-comment">     * Model主要用于向请求域共享数据</span><br><span class="hljs-comment">     * View主要用于设置视图，实现页面跳转</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mav</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>();<br>    <span class="hljs-comment">//向请求域共享数据</span><br>    mav.addObject(<span class="hljs-string">&quot;testScope&quot;</span>, <span class="hljs-string">&quot;hello,ModelAndView&quot;</span>);<br>    <span class="hljs-comment">//设置视图，实现页面跳转</span><br>    mav.setViewName(<span class="hljs-string">&quot;success&quot;</span>);<br>    <span class="hljs-keyword">return</span> mav;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、使用Model向request域对象共享数据"><a href="#3、使用Model向request域对象共享数据" class="headerlink" title="3、使用Model向request域对象共享数据"></a>3、使用Model向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testModel&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testModel</span><span class="hljs-params">(Model model)</span>&#123;<br>    model.addAttribute(<span class="hljs-string">&quot;testScope&quot;</span>, <span class="hljs-string">&quot;hello,Model&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、使用map向request域对象共享数据"><a href="#4、使用map向request域对象共享数据" class="headerlink" title="4、使用map向request域对象共享数据"></a>4、使用map向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testMap&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testMap</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span>&#123;<br>    map.put(<span class="hljs-string">&quot;testScope&quot;</span>, <span class="hljs-string">&quot;hello,Map&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5、使用ModelMap向request域对象共享数据"><a href="#5、使用ModelMap向request域对象共享数据" class="headerlink" title="5、使用ModelMap向request域对象共享数据"></a>5、使用ModelMap向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testModelMap&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testModelMap</span><span class="hljs-params">(ModelMap modelMap)</span>&#123;<br>    modelMap.addAttribute(<span class="hljs-string">&quot;testScope&quot;</span>, <span class="hljs-string">&quot;hello,ModelMap&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6、Model、ModelMap、Map的关系"><a href="#6、Model、ModelMap、Map的关系" class="headerlink" title="6、Model、ModelMap、Map的关系"></a>6、Model、ModelMap、Map的关系</h3><p>Model、ModelMap、Map类型的参数其实本质上都是 BindingAwareModelMap 类型的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">public interface Model&#123;&#125;<br>public class ModelMap extends LinkedHashMap&lt;String, Object&gt; &#123;&#125;<br>public class ExtendedModelMap extends ModelMap implements Model &#123;&#125;<br>public class BindingAwareModelMap extends ExtendedModelMap &#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="7、向session域共享数据"><a href="#7、向session域共享数据" class="headerlink" title="7、向session域共享数据"></a>7、向session域共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testSession&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testSession</span><span class="hljs-params">(HttpSession session)</span>&#123;<br>    session.setAttribute(<span class="hljs-string">&quot;testSessionScope&quot;</span>, <span class="hljs-string">&quot;hello,session&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8、向application域共享数据"><a href="#8、向application域共享数据" class="headerlink" title="8、向application域共享数据"></a>8、向application域共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testApplication&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testApplication</span><span class="hljs-params">(HttpSession session)</span>&#123;<br><span class="hljs-type">ServletContext</span> <span class="hljs-variable">application</span> <span class="hljs-operator">=</span> session.getServletContext();<br>    application.setAttribute(<span class="hljs-string">&quot;testApplicationScope&quot;</span>, <span class="hljs-string">&quot;hello,application&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="六、SpringMVC的视图"><a href="#六、SpringMVC的视图" class="headerlink" title="六、SpringMVC的视图"></a>六、SpringMVC的视图</h1><p>SpringMVC中的视图是View接口，视图的作用渲染数据，将模型Model中的数据展示给用户</p><p>SpringMVC视图的种类很多，默认有转发视图和重定向视图</p><p>当工程引入jstl的依赖，转发视图会自动转换为JstlView</p><p>若使用的视图技术为Thymeleaf，在SpringMVC的配置文件中配置了Thymeleaf的视图解析器，由此视图解析器解析之后所得到的是ThymeleafView</p><h3 id="1、ThymeleafView"><a href="#1、ThymeleafView" class="headerlink" title="1、ThymeleafView"></a>1、ThymeleafView</h3><p>当控制器方法中所设置的视图名称没有任何前缀时，此时的视图名称会被SpringMVC配置文件中所配置的视图解析器解析，视图名称拼接视图前缀和视图后缀所得到的最终路径，会通过转发的方式实现跳转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testHello&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testHello</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/img002.png" alt=""></p><h3 id="2、转发视图"><a href="#2、转发视图" class="headerlink" title="2、转发视图"></a>2、转发视图</h3><p>SpringMVC中默认的转发视图是InternalResourceView</p><p>SpringMVC中创建转发视图的情况：</p><p>当控制器方法中所设置的视图名称以”forward:”为前缀时，创建InternalResourceView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”forward:”去掉，剩余部分作为最终路径通过转发的方式实现跳转</p><p>例如”forward:/“，”forward:/employee”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testForward&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testForward</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/testHello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/img003.png" alt="image-20210706201316593"></p><h3 id="3、重定向视图"><a href="#3、重定向视图" class="headerlink" title="3、重定向视图"></a>3、重定向视图</h3><p>SpringMVC中默认的重定向视图是RedirectView</p><p>当控制器方法中所设置的视图名称以”redirect:”为前缀时，创建RedirectView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”redirect:”去掉，剩余部分作为最终路径通过重定向的方式实现跳转</p><p>例如”redirect:/“，”redirect:/employee”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testRedirect&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRedirect</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/testHello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/img004.png" alt="image-20210706201602267"></p><blockquote><p>注：</p><p>重定向视图在解析时，会先将redirect:前缀去掉，然后会判断剩余部分是否以/开头，若是则会自动拼接上下文路径</p></blockquote><h3 id="4、视图控制器view-controller"><a href="#4、视图控制器view-controller" class="headerlink" title="4、视图控制器view-controller"></a>4、视图控制器view-controller</h3><p>当控制器方法中，仅仅用来实现页面跳转，即只需要设置视图名称时，可以将处理器方法使用view-controller标签进行表示</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">path：设置处理的请求地址</span><br><span class="hljs-comment">view-name：设置请求地址所对应的视图名称</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/testView&quot;</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">&quot;success&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:view-controller</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注：</p><p>当SpringMVC中设置任何一个view-controller时，其他控制器中的请求映射将全部失效，此时需要在SpringMVC的核心配置文件中设置开启mvc注解驱动的标签：</p><mvc:annotation-driven /></blockquote><h1 id="七、RESTful"><a href="#七、RESTful" class="headerlink" title="七、RESTful"></a>七、RESTful</h1><h3 id="1、RESTful简介"><a href="#1、RESTful简介" class="headerlink" title="1、RESTful简介"></a>1、RESTful简介</h3><p>REST：<strong>Re</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer，表现层资源状态转移。</p><h5 id="a-gt-资源"><a href="#a-gt-资源" class="headerlink" title="a&gt;资源"></a>a&gt;资源</h5><p>资源是一种看待服务器的方式，即，将服务器看作是由很多离散的资源组成。每个资源是服务器上一个可命名的抽象概念。因为资源是一个抽象的概念，所以它不仅仅能代表服务器文件系统中的一个文件、数据库中的一张表等等具体的东西，可以将资源设计的要多抽象有多抽象，只要想象力允许而且客户端应用开发者能够理解。与面向对象设计类似，资源是以名词为核心来组织的，首先关注的是名词。一个资源可以由一个或多个URI来标识。URI既是资源的名称，也是资源在Web上的地址。对某个资源感兴趣的客户端应用，可以通过资源的URI与其进行交互。</p><h5 id="b-gt-资源的表述"><a href="#b-gt-资源的表述" class="headerlink" title="b&gt;资源的表述"></a>b&gt;资源的表述</h5><p>资源的表述是一段对于资源在某个特定时刻的状态的描述。可以在客户端-服务器端之间转移（交换）。资源的表述可以有多种格式，例如HTML/XML/JSON/纯文本/图片/视频/音频等等。资源的表述格式可以通过协商机制来确定。请求-响应方向的表述通常使用不同的格式。</p><h5 id="c-gt-状态转移"><a href="#c-gt-状态转移" class="headerlink" title="c&gt;状态转移"></a>c&gt;状态转移</h5><p>状态转移说的是：在客户端和服务器端之间转移（transfer）代表资源状态的表述。通过转移和操作资源的表述，来间接实现操作资源的目的。</p><h3 id="2、RESTful的实现"><a href="#2、RESTful的实现" class="headerlink" title="2、RESTful的实现"></a>2、RESTful的实现</h3><p>具体说，就是 HTTP 协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。</p><p>它们分别对应四种基本操作：GET 用来获取资源，POST 用来新建资源，PUT 用来更新资源，DELETE 用来删除资源。</p><p>REST 风格提倡 URL 地址使用统一的风格设计，从前到后各个单词使用斜杠分开，不使用问号键值对方式携带请求参数，而是将要发送给服务器的数据作为 URL 地址的一部分，以保证整体风格的一致性。</p><div class="table-container"><table><thead><tr><th>操作</th><th>传统方式</th><th>REST风格</th></tr></thead><tbody><tr><td>查询操作</td><td>getUserById?id=1</td><td>user/1—&gt;get请求方式</td></tr><tr><td>保存操作</td><td>saveUser</td><td>user—&gt;post请求方式</td></tr><tr><td>删除操作</td><td>deleteUser?id=1</td><td>user/1—&gt;delete请求方式</td></tr><tr><td>更新操作</td><td>updateUser</td><td>user—&gt;put请求方式</td></tr></tbody></table></div><h3 id="3、HiddenHttpMethodFilter"><a href="#3、HiddenHttpMethodFilter" class="headerlink" title="3、HiddenHttpMethodFilter"></a>3、HiddenHttpMethodFilter</h3><p>由于浏览器只支持发送get和post方式的请求，那么该如何发送put和delete请求呢？</p><p>SpringMVC 提供了 <strong>HiddenHttpMethodFilter</strong> 帮助我们<strong>将 POST 请求转换为 DELETE 或 PUT 请求</strong></p><p><strong>HiddenHttpMethodFilter</strong> 处理put和delete请求的条件：</p><p>a&gt;当前请求的请求方式必须为post</p><p>b&gt;当前请求必须传输请求参数_method</p><p>满足以上条件，<strong>HiddenHttpMethodFilter</strong> 过滤器就会将当前请求的请求方式转换为请求参数_method的值，因此请求参数_method的值才是最终的请求方式</p><p>在web.xml中注册<strong>HiddenHttpMethodFilter</strong> </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注：</p><p>目前为止，SpringMVC中提供了两个过滤器：CharacterEncodingFilter和HiddenHttpMethodFilter</p><p>在web.xml中注册时，必须先注册CharacterEncodingFilter，再注册HiddenHttpMethodFilter</p><p>原因：</p><ul><li><p>在 CharacterEncodingFilter 中通过 request.setCharacterEncoding(encoding) 方法设置字符集的</p></li><li><p>request.setCharacterEncoding(encoding) 方法要求前面不能有任何获取请求参数的操作</p></li><li><p>而 HiddenHttpMethodFilter 恰恰有一个获取请求方式的操作：</p></li><li><p>```<br>String paramValue = request.getParameter(this.methodParam);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br><br><br># 八、RESTful案例<br><br>### 1、准备工作<br><br>和传统 CRUD 一样，实现对员工信息的增删改查。<br><br>- 搭建环境<br><br>- 准备实体类<br><br> ```java<br> package com.atguigu.mvc.bean;<br> <br> public class Employee &#123;<br> <br>    private Integer id;<br>    private String lastName;<br> <br>    private String email;<br>    //1 male, 0 female<br>    private Integer gender;<br>    <br>    public Integer getId() &#123;<br>       return id;<br>    &#125;<br> <br>    public void setId(Integer id) &#123;<br>       this.id = id;<br>    &#125;<br> <br>    public String getLastName() &#123;<br>       return lastName;<br>    &#125;<br> <br>    public void setLastName(String lastName) &#123;<br>       this.lastName = lastName;<br>    &#125;<br> <br>    public String getEmail() &#123;<br>       return email;<br>    &#125;<br> <br>    public void setEmail(String email) &#123;<br>       this.email = email;<br>    &#125;<br> <br>    public Integer getGender() &#123;<br>       return gender;<br>    &#125;<br> <br>    public void setGender(Integer gender) &#123;<br>       this.gender = gender;<br>    &#125;<br> <br>    public Employee(Integer id, String lastName, String email, Integer gender) &#123;<br>       super();<br>       this.id = id;<br>       this.lastName = lastName;<br>       this.email = email;<br>       this.gender = gender;<br>    &#125;<br> <br>    public Employee() &#123;<br>    &#125;<br> &#125;<br></code></pre></td></tr></table></figure></li></ul></blockquote><ul><li><p>准备dao模拟数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mvc.dao;<br><br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">import</span> com.atguigu.mvc.bean.Employee;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeDao</span> &#123;<br><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;Integer, Employee&gt; employees = <span class="hljs-literal">null</span>;<br>   <br>   <span class="hljs-keyword">static</span>&#123;<br>      employees = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Integer, Employee&gt;();<br><br>      employees.put(<span class="hljs-number">1001</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1001</span>, <span class="hljs-string">&quot;E-AA&quot;</span>, <span class="hljs-string">&quot;aa@163.com&quot;</span>, <span class="hljs-number">1</span>));<br>      employees.put(<span class="hljs-number">1002</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1002</span>, <span class="hljs-string">&quot;E-BB&quot;</span>, <span class="hljs-string">&quot;bb@163.com&quot;</span>, <span class="hljs-number">1</span>));<br>      employees.put(<span class="hljs-number">1003</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1003</span>, <span class="hljs-string">&quot;E-CC&quot;</span>, <span class="hljs-string">&quot;cc@163.com&quot;</span>, <span class="hljs-number">0</span>));<br>      employees.put(<span class="hljs-number">1004</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1004</span>, <span class="hljs-string">&quot;E-DD&quot;</span>, <span class="hljs-string">&quot;dd@163.com&quot;</span>, <span class="hljs-number">0</span>));<br>      employees.put(<span class="hljs-number">1005</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1005</span>, <span class="hljs-string">&quot;E-EE&quot;</span>, <span class="hljs-string">&quot;ee@163.com&quot;</span>, <span class="hljs-number">1</span>));<br>   &#125;<br>   <br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">initId</span> <span class="hljs-operator">=</span> <span class="hljs-number">1006</span>;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(Employee employee)</span>&#123;<br>      <span class="hljs-keyword">if</span>(employee.getId() == <span class="hljs-literal">null</span>)&#123;<br>         employee.setId(initId++);<br>      &#125;<br>      employees.put(employee.getId(), employee);<br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> Collection&lt;Employee&gt; <span class="hljs-title function_">getAll</span><span class="hljs-params">()</span>&#123;<br>      <span class="hljs-keyword">return</span> employees.values();<br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> Employee <span class="hljs-title function_">get</span><span class="hljs-params">(Integer id)</span>&#123;<br>      <span class="hljs-keyword">return</span> employees.get(id);<br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span>&#123;<br>      employees.remove(id);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2、功能清单"><a href="#2、功能清单" class="headerlink" title="2、功能清单"></a>2、功能清单</h3><div class="table-container"><table><thead><tr><th>功能</th><th>URL 地址</th><th>请求方式</th></tr></thead><tbody><tr><td>访问首页√</td><td>/</td><td>GET</td></tr><tr><td>查询全部数据√</td><td>/employee</td><td>GET</td></tr><tr><td>删除√</td><td>/employee/2</td><td>DELETE</td></tr><tr><td>跳转到添加数据页面√</td><td>/toAdd</td><td>GET</td></tr><tr><td>执行保存√</td><td>/employee</td><td>POST</td></tr><tr><td>跳转到更新数据页面√</td><td>/employee/2</td><td>GET</td></tr><tr><td>执行更新√</td><td>/employee</td><td>PUT</td></tr></tbody></table></div><h3 id="3、具体功能：访问首页"><a href="#3、具体功能：访问首页" class="headerlink" title="3、具体功能：访问首页"></a>3、具体功能：访问首页</h3><h5 id="a-gt-配置view-controller"><a href="#a-gt-配置view-controller" class="headerlink" title="a&gt;配置view-controller"></a>a&gt;配置view-controller</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">&quot;index&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h5 id="b-gt-创建页面"><a href="#b-gt-创建页面" class="headerlink" title="b&gt;创建页面"></a>b&gt;创建页面</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/employee&#125;&quot;</span>&gt;</span>访问员工信息<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4、具体功能：查询所有员工数据"><a href="#4、具体功能：查询所有员工数据" class="headerlink" title="4、具体功能：查询所有员工数据"></a>4、具体功能：查询所有员工数据</h3><h5 id="a-gt-控制器方法"><a href="#a-gt-控制器方法" class="headerlink" title="a&gt;控制器方法"></a>a&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.GET)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmployeeList</span><span class="hljs-params">(Model model)</span>&#123;<br>    Collection&lt;Employee&gt; employeeList = employeeDao.getAll();<br>    model.addAttribute(<span class="hljs-string">&quot;employeeList&quot;</span>, employeeList);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;employee_list&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="b-gt-创建employee-list-html"><a href="#b-gt-创建employee-list-html" class="headerlink" title="b&gt;创建employee_list.html"></a>b&gt;创建employee_list.html</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Employee Info<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataTable&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span>Employee Info<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>id<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>lastName<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>email<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>gender<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>options(<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/toAdd&#125;&quot;</span>&gt;</span>add<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;employee : $&#123;employeeList&#125;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;employee.id&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;employee.lastName&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;deleteA&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;deleteEmployee&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>delete<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>update<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5、具体功能：删除"><a href="#5、具体功能：删除" class="headerlink" title="5、具体功能：删除"></a>5、具体功能：删除</h3><h5 id="a-gt-创建处理delete请求方式的表单"><a href="#a-gt-创建处理delete请求方式的表单" class="headerlink" title="a&gt;创建处理delete请求方式的表单"></a>a&gt;创建处理delete请求方式的表单</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 作用：通过超链接控制表单的提交，将post请求转换为delete请求 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;delete_form&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- HiddenHttpMethodFilter要求：必须传输_method请求参数，并且值为最终的请求方式 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;_method&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;delete&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="b-gt-删除超链接绑定点击事件"><a href="#b-gt-删除超链接绑定点击事件" class="headerlink" title="b&gt;删除超链接绑定点击事件"></a>b&gt;删除超链接绑定点击事件</h5><p>引入vue.js</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>删除超链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;deleteA&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;deleteEmployee&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>delete<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过vue处理点击事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#dataTable&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//event表示当前事件</span></span><br><span class="language-javascript">            <span class="hljs-attr">deleteEmployee</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">//通过id获取表单标签</span></span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> delete_form = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;delete_form&quot;</span>);</span><br><span class="language-javascript">                <span class="hljs-comment">//将触发事件的超链接的href属性为表单的action属性赋值</span></span><br><span class="language-javascript">                delete_form.<span class="hljs-property">action</span> = event.<span class="hljs-property">target</span>.<span class="hljs-property">href</span>;</span><br><span class="language-javascript">                <span class="hljs-comment">//提交表单</span></span><br><span class="language-javascript">                delete_form.<span class="hljs-title function_">submit</span>();</span><br><span class="language-javascript">                <span class="hljs-comment">//阻止超链接的默认跳转行为</span></span><br><span class="language-javascript">                event.<span class="hljs-title function_">preventDefault</span>();</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="c-gt-控制器方法"><a href="#c-gt-控制器方法" class="headerlink" title="c&gt;控制器方法"></a>c&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;, method = RequestMethod.DELETE)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">deleteEmployee</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;<br>    employeeDao.delete(id);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/employee&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6、具体功能：跳转到添加数据页面"><a href="#6、具体功能：跳转到添加数据页面" class="headerlink" title="6、具体功能：跳转到添加数据页面"></a>6、具体功能：跳转到添加数据页面</h3><h5 id="a-gt-配置view-controller-1"><a href="#a-gt-配置view-controller-1" class="headerlink" title="a&gt;配置view-controller"></a>a&gt;配置view-controller</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/toAdd&quot;</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">&quot;employee_add&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:view-controller</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="b-gt-创建employee-add-html"><a href="#b-gt-创建employee-add-html" class="headerlink" title="b&gt;创建employee_add.html"></a>b&gt;创建employee_add.html</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Add Employee<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/employee&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    lastName:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lastName&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    email:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    gender:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>male<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span>female<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="7、具体功能：执行保存"><a href="#7、具体功能：执行保存" class="headerlink" title="7、具体功能：执行保存"></a>7、具体功能：执行保存</h3><h5 id="a-gt-控制器方法-1"><a href="#a-gt-控制器方法-1" class="headerlink" title="a&gt;控制器方法"></a>a&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.POST)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">addEmployee</span><span class="hljs-params">(Employee employee)</span>&#123;<br>    employeeDao.save(employee);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/employee&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8、具体功能：跳转到更新数据页面"><a href="#8、具体功能：跳转到更新数据页面" class="headerlink" title="8、具体功能：跳转到更新数据页面"></a>8、具体功能：跳转到更新数据页面</h3><h5 id="a-gt-修改超链接"><a href="#a-gt-修改超链接" class="headerlink" title="a&gt;修改超链接"></a>a&gt;修改超链接</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>update<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="b-gt-控制器方法"><a href="#b-gt-控制器方法" class="headerlink" title="b&gt;控制器方法"></a>b&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;, method = RequestMethod.GET)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmployeeById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id, Model model)</span>&#123;<br>    <span class="hljs-type">Employee</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> employeeDao.get(id);<br>    model.addAttribute(<span class="hljs-string">&quot;employee&quot;</span>, employee);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;employee_update&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="c-gt-创建employee-update-html"><a href="#c-gt-创建employee-update-html" class="headerlink" title="c&gt;创建employee_update.html"></a>c&gt;创建employee_update.html</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Update Employee<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/employee&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;_method&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;put&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;employee.id&#125;&quot;</span>&gt;</span><br>    lastName:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lastName&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;employee.lastName&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    email:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        th:field=&quot;$&#123;employee.gender&#125;&quot;可用于单选框或复选框的回显</span><br><span class="hljs-comment">        若单选框的value和employee.gender的值一致，则添加checked=&quot;checked&quot;属性</span><br><span class="hljs-comment">    --&gt;</span><br>    gender:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">th:field</span>=<span class="hljs-string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span>male<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">th:field</span>=<span class="hljs-string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span>female<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;update&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="9、具体功能：执行更新"><a href="#9、具体功能：执行更新" class="headerlink" title="9、具体功能：执行更新"></a>9、具体功能：执行更新</h3><h5 id="a-gt-控制器方法-2"><a href="#a-gt-控制器方法-2" class="headerlink" title="a&gt;控制器方法"></a>a&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.PUT)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">updateEmployee</span><span class="hljs-params">(Employee employee)</span>&#123;<br>    employeeDao.save(employee);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/employee&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="八、HttpMessageConverter"><a href="#八、HttpMessageConverter" class="headerlink" title="八、HttpMessageConverter"></a>八、HttpMessageConverter</h1><p>HttpMessageConverter，报文信息转换器，将请求报文转换为Java对象，或将Java对象转换为响应报文</p><p>HttpMessageConverter提供了两个注解和两个类型：@RequestBody，@ResponseBody，RequestEntity，</p><p>ResponseEntity</p><h3 id="1、-RequestBody"><a href="#1、-RequestBody" class="headerlink" title="1、@RequestBody"></a>1、@RequestBody</h3><p>@RequestBody可以获取请求体，需要在控制器方法设置一个形参，使用@RequestBody进行标识，当前请求的请求体就会为当前注解所标识的形参赋值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/testRequestBody&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testRequestBody&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRequestBody</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> String requestBody)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;requestBody:&quot;</span>+requestBody);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><p>requestBody:username=admin&amp;password=123456</p><h3 id="2、RequestEntity"><a href="#2、RequestEntity" class="headerlink" title="2、RequestEntity"></a>2、RequestEntity</h3><p>RequestEntity封装请求报文的一种类型，需要在控制器方法的形参中设置该类型的形参，当前请求的请求报文就会赋值给该形参，可以通过getHeaders()获取请求头信息，通过getBody()获取请求体信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testRequestEntity&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRequestEntity</span><span class="hljs-params">(RequestEntity&lt;String&gt; requestEntity)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;requestHeader:&quot;</span>+requestEntity.getHeaders());<br>    System.out.println(<span class="hljs-string">&quot;requestBody:&quot;</span>+requestEntity.getBody());<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：<br>requestHeader:[host:”localhost:8080”, connection:”keep-alive”, content-length:”27”, cache-control:”max-age=0”, sec-ch-ua:”” Not A;Brand”;v=”99”, “Chromium”;v=”90”, “Google Chrome”;v=”90””, sec-ch-ua-mobile:”?0”, upgrade-insecure-requests:”1”, origin:”<a href="http://localhost:8080">http://localhost:8080</a>“, user-agent:”Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36”]<br>requestBody:username=admin&amp;password=123</p><h3 id="3、-ResponseBody"><a href="#3、-ResponseBody" class="headerlink" title="3、@ResponseBody"></a>3、@ResponseBody</h3><p>@ResponseBody用于标识一个控制器方法，可以将该方法的返回值直接作为响应报文的响应体响应到浏览器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testResponseBody&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testResponseBody</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：浏览器页面显示success</p><h3 id="4、SpringMVC处理json"><a href="#4、SpringMVC处理json" class="headerlink" title="4、SpringMVC处理json"></a>4、SpringMVC处理json</h3><p>@ResponseBody处理json的步骤：</p><p>a&gt;导入jackson的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.12.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>b&gt;在SpringMVC的核心配置文件中开启mvc的注解驱动，此时在HandlerAdaptor中会自动装配一个消息转换器：MappingJackson2HttpMessageConverter，可以将响应到浏览器的Java对象转换为Json格式的字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;mvc:annotation-driven /&gt;<br></code></pre></td></tr></table></figure><p>c&gt;在处理器方法上使用@ResponseBody注解进行标识</p><p>d&gt;将Java对象直接作为控制器方法的返回值返回，就会自动转换为Json格式的字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testResponseUser&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">testResponseUser</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1001</span>,<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>,<span class="hljs-number">23</span>,<span class="hljs-string">&quot;男&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>浏览器的页面中展示的结果：</p><p>{“id”:1001,”username”:”admin”,”password”:”123456”,”age”:23,”sex”:”男”}</p><h3 id="5、SpringMVC处理ajax"><a href="#5、SpringMVC处理ajax" class="headerlink" title="5、SpringMVC处理ajax"></a>5、SpringMVC处理ajax</h3><p>a&gt;请求超链接：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testAjax&#125;&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;testAjax&quot;</span>&gt;</span>testAjax<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>b&gt;通过vue和axios处理点击事件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/static/js/axios.min.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">testAjax</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">axios</span>(&#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">method</span>:<span class="hljs-string">&quot;post&quot;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">url</span>:event.<span class="hljs-property">target</span>.<span class="hljs-property">href</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">params</span>:&#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">username</span>:<span class="hljs-string">&quot;admin&quot;</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">password</span>:<span class="hljs-string">&quot;123456&quot;</span></span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-title function_">alert</span>(response.<span class="hljs-property">data</span>);</span><br><span class="language-javascript">                &#125;);</span><br><span class="language-javascript">                event.<span class="hljs-title function_">preventDefault</span>();</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>c&gt;控制器方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testAjax&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testAjax</span><span class="hljs-params">(String username, String password)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;username:&quot;</span>+username+<span class="hljs-string">&quot;,password:&quot;</span>+password);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello,ajax&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6、-RestController注解"><a href="#6、-RestController注解" class="headerlink" title="6、@RestController注解"></a>6、@RestController注解</h3><p>@RestController注解是springMVC提供的一个复合注解，标识在控制器的类上，就相当于为类添加了@Controller注解，并且为其中的每个方法添加了@ResponseBody注解</p><h3 id="7、ResponseEntity"><a href="#7、ResponseEntity" class="headerlink" title="7、ResponseEntity"></a>7、ResponseEntity</h3><p>ResponseEntity用于控制器方法的返回值类型，该控制器方法的返回值就是响应到浏览器的响应报文</p><h1 id="九、文件上传和下载"><a href="#九、文件上传和下载" class="headerlink" title="九、文件上传和下载"></a>九、文件上传和下载</h1><h3 id="1、文件下载"><a href="#1、文件下载" class="headerlink" title="1、文件下载"></a>1、文件下载</h3><p>使用ResponseEntity实现下载文件的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testDown&quot;)</span><br><span class="hljs-keyword">public</span> ResponseEntity&lt;<span class="hljs-type">byte</span>[]&gt; testResponseEntity(HttpSession session) <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//获取ServletContext对象</span><br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> session.getServletContext();<br>    <span class="hljs-comment">//获取服务器中文件的真实路径</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">realPath</span> <span class="hljs-operator">=</span> servletContext.getRealPath(<span class="hljs-string">&quot;/static/img/1.jpg&quot;</span>);<br>    <span class="hljs-comment">//创建输入流</span><br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(realPath);<br>    <span class="hljs-comment">//创建字节数组</span><br>    <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[is.available()];<br>    <span class="hljs-comment">//将流读到字节数组中</span><br>    is.read(bytes);<br>    <span class="hljs-comment">//创建HttpHeaders对象设置响应头信息</span><br>    MultiValueMap&lt;String, String&gt; headers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeaders</span>();<br>    <span class="hljs-comment">//设置要下载方式以及下载文件的名字</span><br>    headers.add(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=1.jpg&quot;</span>);<br>    <span class="hljs-comment">//设置响应状态码</span><br>    <span class="hljs-type">HttpStatus</span> <span class="hljs-variable">statusCode</span> <span class="hljs-operator">=</span> HttpStatus.OK;<br>    <span class="hljs-comment">//创建ResponseEntity对象</span><br>    ResponseEntity&lt;<span class="hljs-type">byte</span>[]&gt; responseEntity = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntity</span>&lt;&gt;(bytes, headers, statusCode);<br>    <span class="hljs-comment">//关闭输入流</span><br>    is.close();<br>    <span class="hljs-keyword">return</span> responseEntity;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、文件上传"><a href="#2、文件上传" class="headerlink" title="2、文件上传"></a>2、文件上传</h3><p>文件上传要求form表单的请求方式必须为post，并且添加属性enctype=”multipart/form-data”</p><p>SpringMVC中将上传的文件封装到MultipartFile对象中，通过此对象可以获取文件相关信息</p><p>上传步骤：</p><p>a&gt;添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>b&gt;在SpringMVC的配置文件中添加配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--必须通过文件解析器的解析才能将文件转换为MultipartFile对象--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;multipartResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>c&gt;控制器方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testUp&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testUp</span><span class="hljs-params">(MultipartFile photo, HttpSession session)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//获取上传的文件的文件名</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> photo.getOriginalFilename();<br>    <span class="hljs-comment">//处理文件重名问题</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">hzName</span> <span class="hljs-operator">=</span> fileName.substring(fileName.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br>    fileName = UUID.randomUUID().toString() + hzName;<br>    <span class="hljs-comment">//获取服务器中photo目录的路径</span><br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> session.getServletContext();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">photoPath</span> <span class="hljs-operator">=</span> servletContext.getRealPath(<span class="hljs-string">&quot;photo&quot;</span>);<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(photoPath);<br>    <span class="hljs-keyword">if</span>(!file.exists())&#123;<br>        file.mkdir();<br>    &#125;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">finalPath</span> <span class="hljs-operator">=</span> photoPath + File.separator + fileName;<br>    <span class="hljs-comment">//实现上传功能</span><br>    photo.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(finalPath));<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="十、拦截器"><a href="#十、拦截器" class="headerlink" title="十、拦截器"></a>十、拦截器</h1><h3 id="1、拦截器的配置"><a href="#1、拦截器的配置" class="headerlink" title="1、拦截器的配置"></a>1、拦截器的配置</h3><p>SpringMVC中的拦截器用于拦截控制器方法的执行</p><p>SpringMVC中的拦截器需要实现HandlerInterceptor</p><p>SpringMVC的拦截器必须在SpringMVC的配置文件中进行配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.interceptor.FirstInterceptor&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 以上两种配置方式都是对DispatcherServlet所处理的所有的请求进行拦截 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/**&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:exclude-mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/testRequestEntity&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">以上配置方式可以通过ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求，通过mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求</span><br><span class="hljs-comment">--&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2、拦截器的三个抽象方法"><a href="#2、拦截器的三个抽象方法" class="headerlink" title="2、拦截器的三个抽象方法"></a>2、拦截器的三个抽象方法</h3><p>SpringMVC中的拦截器有三个抽象方法：</p><p>preHandle：控制器方法执行之前执行preHandle()，其boolean类型的返回值表示是否拦截或放行，返回true为放行，即调用控制器方法；返回false表示拦截，即不调用控制器方法</p><p>postHandle：控制器方法执行之后执行postHandle()</p><p>afterComplation：处理完视图和模型数据，渲染视图完毕之后执行afterComplation()</p><h3 id="3、多个拦截器的执行顺序"><a href="#3、多个拦截器的执行顺序" class="headerlink" title="3、多个拦截器的执行顺序"></a>3、多个拦截器的执行顺序</h3><p>a&gt;若每个拦截器的preHandle()都返回true</p><p>此时多个拦截器的执行顺序和拦截器在SpringMVC的配置文件的配置顺序有关：</p><p>preHandle()会按照配置的顺序执行，而postHandle()和afterComplation()会按照配置的反序执行</p><p>b&gt;若某个拦截器的preHandle()返回了false</p><p>preHandle()返回false和它之前的拦截器的preHandle()都会执行，postHandle()都不执行，返回false的拦截器之前的拦截器的afterComplation()会执行</p><h1 id="十一、异常处理器"><a href="#十一、异常处理器" class="headerlink" title="十一、异常处理器"></a>十一、异常处理器</h1><h3 id="1、基于配置的异常处理"><a href="#1、基于配置的异常处理" class="headerlink" title="1、基于配置的异常处理"></a>1、基于配置的异常处理</h3><p>SpringMVC提供了一个处理控制器方法执行过程中所出现的异常的接口：HandlerExceptionResolver</p><p>HandlerExceptionResolver接口的实现类有：DefaultHandlerExceptionResolver和SimpleMappingExceptionResolver</p><p>SpringMVC提供了自定义的异常处理器SimpleMappingExceptionResolver，使用方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;exceptionMappings&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        properties的键表示处理器方法执行过程中出现的异常</span><br><span class="hljs-comment">        properties的值表示若出现指定异常时，设置一个新的视图名称，跳转到指定页面</span><br><span class="hljs-comment">        --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;java.lang.ArithmeticException&quot;</span>&gt;</span>error<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    exceptionAttribute属性设置一个属性名，将出现的异常信息在请求域中进行共享</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;exceptionAttribute&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;ex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2、基于注解的异常处理"><a href="#2、基于注解的异常处理" class="headerlink" title="2、基于注解的异常处理"></a>2、基于注解的异常处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@ControllerAdvice将当前类标识为异常处理的组件</span><br><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionController</span> &#123;<br><br>    <span class="hljs-comment">//@ExceptionHandler用于设置所标识方法处理的异常</span><br>    <span class="hljs-meta">@ExceptionHandler(ArithmeticException.class)</span><br>    <span class="hljs-comment">//ex表示当前请求处理中出现的异常对象</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">handleArithmeticException</span><span class="hljs-params">(Exception ex, Model model)</span>&#123;<br>        model.addAttribute(<span class="hljs-string">&quot;ex&quot;</span>, ex);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="十二、注解配置SpringMVC"><a href="#十二、注解配置SpringMVC" class="headerlink" title="十二、注解配置SpringMVC"></a>十二、注解配置SpringMVC</h1><p>使用配置类和注解代替web.xml和SpringMVC配置文件的功能</p><h3 id="1、创建初始化类，代替web-xml"><a href="#1、创建初始化类，代替web-xml" class="headerlink" title="1、创建初始化类，代替web.xml"></a>1、创建初始化类，代替web.xml</h3><p>在Servlet3.0环境中，容器会在类路径中查找实现javax.servlet.ServletContainerInitializer接口的类，如果找到的话就用它来配置Servlet容器。<br>Spring提供了这个接口的实现，名为SpringServletContainerInitializer，这个类反过来又会查找实现WebApplicationInitializer的类并将配置的任务交给它们来完成。Spring3.2引入了一个便利的WebApplicationInitializer基础实现，名为AbstractAnnotationConfigDispatcherServletInitializer，当我们的类扩展了AbstractAnnotationConfigDispatcherServletInitializer并将其部署到Servlet3.0容器的时候，容器会自动发现它，并用它来配置Servlet上下文。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebInit</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 指定spring的配置类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;SpringConfig.class&#125;;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 指定SpringMVC的配置类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;WebConfig.class&#125;;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 指定DispatcherServlet的映射规则，即url-pattern</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> String[] getServletMappings() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/&quot;</span>&#125;;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加过滤器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Filter[] getServletFilters() &#123;<br>        <span class="hljs-type">CharacterEncodingFilter</span> <span class="hljs-variable">encodingFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CharacterEncodingFilter</span>();<br>        encodingFilter.setEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        encodingFilter.setForceRequestEncoding(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">HiddenHttpMethodFilter</span> <span class="hljs-variable">hiddenHttpMethodFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HiddenHttpMethodFilter</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Filter</span>[]&#123;encodingFilter, hiddenHttpMethodFilter&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、创建SpringConfig配置类，代替spring的配置文件"><a href="#2、创建SpringConfig配置类，代替spring的配置文件" class="headerlink" title="2、创建SpringConfig配置类，代替spring的配置文件"></a>2、创建SpringConfig配置类，代替spring的配置文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br><span class="hljs-comment">//ssm整合之后，spring的配置信息写在此类中</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、创建WebConfig配置类，代替SpringMVC的配置文件"><a href="#3、创建WebConfig配置类，代替SpringMVC的配置文件" class="headerlink" title="3、创建WebConfig配置类，代替SpringMVC的配置文件"></a>3、创建WebConfig配置类，代替SpringMVC的配置文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-comment">//扫描组件</span><br><span class="hljs-meta">@ComponentScan(&quot;com.atguigu.mvc.controller&quot;)</span><br><span class="hljs-comment">//开启MVC注解驱动</span><br><span class="hljs-meta">@EnableWebMvc</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-comment">//使用默认的servlet处理静态资源</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureDefaultServletHandling</span><span class="hljs-params">(DefaultServletHandlerConfigurer configurer)</span> &#123;<br>        configurer.enable();<br>    &#125;<br><br>    <span class="hljs-comment">//配置文件上传解析器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> CommonsMultipartResolver <span class="hljs-title function_">multipartResolver</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonsMultipartResolver</span>();<br>    &#125;<br><br>    <span class="hljs-comment">//配置拦截器</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        <span class="hljs-type">FirstInterceptor</span> <span class="hljs-variable">firstInterceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FirstInterceptor</span>();<br>        registry.addInterceptor(firstInterceptor).addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-comment">//配置视图控制</span><br>    <br>    <span class="hljs-comment">/*@Override</span><br><span class="hljs-comment">    public void addViewControllers(ViewControllerRegistry registry) &#123;</span><br><span class="hljs-comment">        registry.addViewController(&quot;/&quot;).setViewName(&quot;index&quot;);</span><br><span class="hljs-comment">    &#125;*/</span><br>    <br>    <span class="hljs-comment">//配置异常映射</span><br>    <span class="hljs-comment">/*@Override</span><br><span class="hljs-comment">    public void configureHandlerExceptionResolvers(List&lt;HandlerExceptionResolver&gt; resolvers) &#123;</span><br><span class="hljs-comment">        SimpleMappingExceptionResolver exceptionResolver = new SimpleMappingExceptionResolver();</span><br><span class="hljs-comment">        Properties prop = new Properties();</span><br><span class="hljs-comment">        prop.setProperty(&quot;java.lang.ArithmeticException&quot;, &quot;error&quot;);</span><br><span class="hljs-comment">        //设置异常映射</span><br><span class="hljs-comment">        exceptionResolver.setExceptionMappings(prop);</span><br><span class="hljs-comment">        //设置共享异常信息的键</span><br><span class="hljs-comment">        exceptionResolver.setExceptionAttribute(&quot;ex&quot;);</span><br><span class="hljs-comment">        resolvers.add(exceptionResolver);</span><br><span class="hljs-comment">    &#125;*/</span><br><br>    <span class="hljs-comment">//配置生成模板解析器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ITemplateResolver <span class="hljs-title function_">templateResolver</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">webApplicationContext</span> <span class="hljs-operator">=</span> ContextLoader.getCurrentWebApplicationContext();<br>        <span class="hljs-comment">// ServletContextTemplateResolver需要一个ServletContext作为构造参数，可通过WebApplicationContext 的方法获得</span><br>        <span class="hljs-type">ServletContextTemplateResolver</span> <span class="hljs-variable">templateResolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletContextTemplateResolver</span>(<br>                webApplicationContext.getServletContext());<br>        templateResolver.setPrefix(<span class="hljs-string">&quot;/WEB-INF/templates/&quot;</span>);<br>        templateResolver.setSuffix(<span class="hljs-string">&quot;.html&quot;</span>);<br>        templateResolver.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        templateResolver.setTemplateMode(TemplateMode.HTML);<br>        <span class="hljs-keyword">return</span> templateResolver;<br>    &#125;<br><br>    <span class="hljs-comment">//生成模板引擎并为模板引擎注入模板解析器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SpringTemplateEngine <span class="hljs-title function_">templateEngine</span><span class="hljs-params">(ITemplateResolver templateResolver)</span> &#123;<br>        <span class="hljs-type">SpringTemplateEngine</span> <span class="hljs-variable">templateEngine</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringTemplateEngine</span>();<br>        templateEngine.setTemplateResolver(templateResolver);<br>        <span class="hljs-keyword">return</span> templateEngine;<br>    &#125;<br><br>    <span class="hljs-comment">//生成视图解析器并未解析器注入模板引擎</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ViewResolver <span class="hljs-title function_">viewResolver</span><span class="hljs-params">(SpringTemplateEngine templateEngine)</span> &#123;<br>        <span class="hljs-type">ThymeleafViewResolver</span> <span class="hljs-variable">viewResolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThymeleafViewResolver</span>();<br>        viewResolver.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        viewResolver.setTemplateEngine(templateEngine);<br>        <span class="hljs-keyword">return</span> viewResolver;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、测试功能"><a href="#4、测试功能" class="headerlink" title="4、测试功能"></a>4、测试功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="十三、SpringMVC执行流程"><a href="#十三、SpringMVC执行流程" class="headerlink" title="十三、SpringMVC执行流程"></a>十三、SpringMVC执行流程</h1><h3 id="1、SpringMVC常用组件"><a href="#1、SpringMVC常用组件" class="headerlink" title="1、SpringMVC常用组件"></a>1、SpringMVC常用组件</h3><ul><li>DispatcherServlet：<strong>前端控制器</strong>，不需要工程师开发，由框架提供</li></ul><p>作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求</p><ul><li>HandlerMapping：<strong>处理器映射器</strong>，不需要工程师开发，由框架提供</li></ul><p>作用：根据请求的url、method等信息查找Handler，即控制器方法</p><ul><li>Handler：<strong>处理器</strong>，需要工程师开发</li></ul><p>作用：在DispatcherServlet的控制下Handler对具体的用户请求进行处理</p><ul><li>HandlerAdapter：<strong>处理器适配器</strong>，不需要工程师开发，由框架提供</li></ul><p>作用：通过HandlerAdapter对处理器（控制器方法）进行执行</p><ul><li>ViewResolver：<strong>视图解析器</strong>，不需要工程师开发，由框架提供</li></ul><p>作用：进行视图解析，得到相应的视图，例如：ThymeleafView、InternalResourceView、RedirectView</p><ul><li>View：<strong>视图</strong></li></ul><p>作用：将模型数据通过页面展示给用户</p><h3 id="2、DispatcherServlet初始化过程"><a href="#2、DispatcherServlet初始化过程" class="headerlink" title="2、DispatcherServlet初始化过程"></a>2、DispatcherServlet初始化过程</h3><p>DispatcherServlet 本质上是一个 Servlet，所以天然的遵循 Servlet 的生命周期。所以宏观上是 Servlet 生命周期来进行调度。</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/img005.png" alt="images"></p><h5 id="a-gt-初始化WebApplicationContext"><a href="#a-gt-初始化WebApplicationContext" class="headerlink" title="a&gt;初始化WebApplicationContext"></a>a&gt;初始化WebApplicationContext</h5><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> WebApplicationContext <span class="hljs-title function_">initWebApplicationContext</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">rootContext</span> <span class="hljs-operator">=</span><br>        WebApplicationContextUtils.getWebApplicationContext(getServletContext());<br>    <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">wac</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.webApplicationContext != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// A context instance was injected at construction time -&gt; use it</span><br>        wac = <span class="hljs-built_in">this</span>.webApplicationContext;<br>        <span class="hljs-keyword">if</span> (wac <span class="hljs-keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;<br>            <span class="hljs-type">ConfigurableWebApplicationContext</span> <span class="hljs-variable">cwac</span> <span class="hljs-operator">=</span> (ConfigurableWebApplicationContext) wac;<br>            <span class="hljs-keyword">if</span> (!cwac.isActive()) &#123;<br>                <span class="hljs-comment">// The context has not yet been refreshed -&gt; provide services such as</span><br>                <span class="hljs-comment">// setting the parent context, setting the application context id, etc</span><br>                <span class="hljs-keyword">if</span> (cwac.getParent() == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">// The context instance was injected without an explicit parent -&gt; set</span><br>                    <span class="hljs-comment">// the root application context (if any; may be null) as the parent</span><br>                    cwac.setParent(rootContext);<br>                &#125;<br>                configureAndRefreshWebApplicationContext(cwac);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (wac == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// No context instance was injected at construction time -&gt; see if one</span><br>        <span class="hljs-comment">// has been registered in the servlet context. If one exists, it is assumed</span><br>        <span class="hljs-comment">// that the parent context (if any) has already been set and that the</span><br>        <span class="hljs-comment">// user has performed any initialization such as setting the context id</span><br>        wac = findWebApplicationContext();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (wac == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// No context instance is defined for this servlet -&gt; create a local one</span><br>        <span class="hljs-comment">// 创建WebApplicationContext</span><br>        wac = createWebApplicationContext(rootContext);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.refreshEventReceived) &#123;<br>        <span class="hljs-comment">// Either the context is not a ConfigurableApplicationContext with refresh</span><br>        <span class="hljs-comment">// support or the context injected at construction time had already been</span><br>        <span class="hljs-comment">// refreshed -&gt; trigger initial onRefresh manually here.</span><br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>.onRefreshMonitor) &#123;<br>            <span class="hljs-comment">// 刷新WebApplicationContext</span><br>            onRefresh(wac);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.publishContext) &#123;<br>        <span class="hljs-comment">// Publish the context as a servlet context attribute.</span><br>        <span class="hljs-comment">// 将IOC容器在应用域共享</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">attrName</span> <span class="hljs-operator">=</span> getServletContextAttributeName();<br>        getServletContext().setAttribute(attrName, wac);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> wac;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="b-gt-创建WebApplicationContext"><a href="#b-gt-创建WebApplicationContext" class="headerlink" title="b&gt;创建WebApplicationContext"></a>b&gt;创建WebApplicationContext</h5><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> WebApplicationContext <span class="hljs-title function_">createWebApplicationContext</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> ApplicationContext parent)</span> &#123;<br>    Class&lt;?&gt; contextClass = getContextClass();<br>    <span class="hljs-keyword">if</span> (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationContextException</span>(<br>            <span class="hljs-string">&quot;Fatal initialization error in servlet with name &#x27;&quot;</span> + getServletName() +<br>            <span class="hljs-string">&quot;&#x27;: custom WebApplicationContext class [&quot;</span> + contextClass.getName() +<br>            <span class="hljs-string">&quot;] is not of type ConfigurableWebApplicationContext&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 通过反射创建 IOC 容器对象</span><br>    <span class="hljs-type">ConfigurableWebApplicationContext</span> <span class="hljs-variable">wac</span> <span class="hljs-operator">=</span><br>        (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);<br><br>    wac.setEnvironment(getEnvironment());<br>    <span class="hljs-comment">// 设置父容器</span><br>    wac.setParent(parent);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">configLocation</span> <span class="hljs-operator">=</span> getContextConfigLocation();<br>    <span class="hljs-keyword">if</span> (configLocation != <span class="hljs-literal">null</span>) &#123;<br>        wac.setConfigLocation(configLocation);<br>    &#125;<br>    configureAndRefreshWebApplicationContext(wac);<br><br>    <span class="hljs-keyword">return</span> wac;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="c-gt-DispatcherServlet初始化策略"><a href="#c-gt-DispatcherServlet初始化策略" class="headerlink" title="c&gt;DispatcherServlet初始化策略"></a>c&gt;DispatcherServlet初始化策略</h5><p>FrameworkServlet创建WebApplicationContext后，刷新容器，调用onRefresh(wac)，此方法在DispatcherServlet中进行了重写，调用了initStrategies(context)方法，初始化策略，即初始化DispatcherServlet的各个组件</p><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initStrategies</span><span class="hljs-params">(ApplicationContext context)</span> &#123;<br>   initMultipartResolver(context);<br>   initLocaleResolver(context);<br>   initThemeResolver(context);<br>   initHandlerMappings(context);<br>   initHandlerAdapters(context);<br>   initHandlerExceptionResolvers(context);<br>   initRequestToViewNameTranslator(context);<br>   initViewResolvers(context);<br>   initFlashMapManager(context);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、DispatcherServlet调用组件处理请求"><a href="#3、DispatcherServlet调用组件处理请求" class="headerlink" title="3、DispatcherServlet调用组件处理请求"></a>3、DispatcherServlet调用组件处理请求</h3><h5 id="a-gt-processRequest"><a href="#a-gt-processRequest" class="headerlink" title="a&gt;processRequest()"></a>a&gt;processRequest()</h5><p>FrameworkServlet重写HttpServlet中的service()和doXxx()，这些方法中调用了processRequest(request, response)</p><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processRequest</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span><br>    <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>    <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    <span class="hljs-type">Throwable</span> <span class="hljs-variable">failureCause</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-type">LocaleContext</span> <span class="hljs-variable">previousLocaleContext</span> <span class="hljs-operator">=</span> LocaleContextHolder.getLocaleContext();<br>    <span class="hljs-type">LocaleContext</span> <span class="hljs-variable">localeContext</span> <span class="hljs-operator">=</span> buildLocaleContext(request);<br><br>    <span class="hljs-type">RequestAttributes</span> <span class="hljs-variable">previousAttributes</span> <span class="hljs-operator">=</span> RequestContextHolder.getRequestAttributes();<br>    <span class="hljs-type">ServletRequestAttributes</span> <span class="hljs-variable">requestAttributes</span> <span class="hljs-operator">=</span> buildRequestAttributes(request, response, previousAttributes);<br><br>    <span class="hljs-type">WebAsyncManager</span> <span class="hljs-variable">asyncManager</span> <span class="hljs-operator">=</span> WebAsyncUtils.getAsyncManager(request);<br>    asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestBindingInterceptor</span>());<br><br>    initContextHolders(request, localeContext, requestAttributes);<br><br>    <span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 执行服务，doService()是一个抽象方法，在DispatcherServlet中进行了重写</span><br>        doService(request, response);<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (ServletException | IOException ex) &#123;<br>        failureCause = ex;<br>        <span class="hljs-keyword">throw</span> ex;<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>        failureCause = ex;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NestedServletException</span>(<span class="hljs-string">&quot;Request processing failed&quot;</span>, ex);<br>    &#125;<br><br>    <span class="hljs-keyword">finally</span> &#123;<br>        resetContextHolders(request, previousLocaleContext, previousAttributes);<br>        <span class="hljs-keyword">if</span> (requestAttributes != <span class="hljs-literal">null</span>) &#123;<br>            requestAttributes.requestCompleted();<br>        &#125;<br>        logResult(request, response, failureCause, asyncManager);<br>        publishRequestHandledEvent(request, response, startTime, failureCause);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="b-gt-doService"><a href="#b-gt-doService" class="headerlink" title="b&gt;doService()"></a>b&gt;doService()</h5><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doService</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    logRequest(request);<br><br>    <span class="hljs-comment">// Keep a snapshot of the request attributes in case of an include,</span><br>    <span class="hljs-comment">// to be able to restore the original attributes after the include.</span><br>    Map&lt;String, Object&gt; attributesSnapshot = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (WebUtils.isIncludeRequest(request)) &#123;<br>        attributesSnapshot = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        Enumeration&lt;?&gt; attrNames = request.getAttributeNames();<br>        <span class="hljs-keyword">while</span> (attrNames.hasMoreElements()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">attrName</span> <span class="hljs-operator">=</span> (String) attrNames.nextElement();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) &#123;<br>                attributesSnapshot.put(attrName, request.getAttribute(attrName));<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Make framework objects available to handlers and view objects.</span><br>    request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());<br>    request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, <span class="hljs-built_in">this</span>.localeResolver);<br>    request.setAttribute(THEME_RESOLVER_ATTRIBUTE, <span class="hljs-built_in">this</span>.themeResolver);<br>    request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.flashMapManager != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">FlashMap</span> <span class="hljs-variable">inputFlashMap</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.flashMapManager.retrieveAndUpdate(request, response);<br>        <span class="hljs-keyword">if</span> (inputFlashMap != <span class="hljs-literal">null</span>) &#123;<br>            request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));<br>        &#125;<br>        request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, <span class="hljs-keyword">new</span> <span class="hljs-title class_">FlashMap</span>());<br>        request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, <span class="hljs-built_in">this</span>.flashMapManager);<br>    &#125;<br><br>    <span class="hljs-type">RequestPath</span> <span class="hljs-variable">requestPath</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.parseRequestPath &amp;&amp; !ServletRequestPathUtils.hasParsedRequestPath(request)) &#123;<br>        requestPath = ServletRequestPathUtils.parseAndCache(request);<br>    &#125;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 处理请求和响应</span><br>        doDispatch(request, response);<br>    &#125;<br>    <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;<br>            <span class="hljs-comment">// Restore the original attribute snapshot, in case of an include.</span><br>            <span class="hljs-keyword">if</span> (attributesSnapshot != <span class="hljs-literal">null</span>) &#123;<br>                restoreAttributesAfterInclude(request, attributesSnapshot);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (requestPath != <span class="hljs-literal">null</span>) &#123;<br>            ServletRequestPathUtils.clearParsedRequestPath(request);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="c-gt-doDispatch"><a href="#c-gt-doDispatch" class="headerlink" title="c&gt;doDispatch()"></a>c&gt;doDispatch()</h5><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doDispatch</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">processedRequest</span> <span class="hljs-operator">=</span> request;<br>    <span class="hljs-type">HandlerExecutionChain</span> <span class="hljs-variable">mappedHandler</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">multipartRequestParsed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-type">WebAsyncManager</span> <span class="hljs-variable">asyncManager</span> <span class="hljs-operator">=</span> WebAsyncUtils.getAsyncManager(request);<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Exception</span> <span class="hljs-variable">dispatchException</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            processedRequest = checkMultipart(request);<br>            multipartRequestParsed = (processedRequest != request);<br><br>            <span class="hljs-comment">// Determine handler for the current request.</span><br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">            mappedHandler：调用链</span><br><span class="hljs-comment">                包含handler、interceptorList、interceptorIndex</span><br><span class="hljs-comment">            handler：浏览器发送的请求所匹配的控制器方法</span><br><span class="hljs-comment">            interceptorList：处理控制器方法的所有拦截器集合</span><br><span class="hljs-comment">            interceptorIndex：拦截器索引，控制拦截器afterCompletion()的执行</span><br><span class="hljs-comment">            */</span><br>            mappedHandler = getHandler(processedRequest);<br>            <span class="hljs-keyword">if</span> (mappedHandler == <span class="hljs-literal">null</span>) &#123;<br>                noHandlerFound(processedRequest, response);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// Determine handler adapter for the current request.</span><br>           <span class="hljs-comment">// 通过控制器方法创建相应的处理器适配器，调用所对应的控制器方法</span><br>            <span class="hljs-type">HandlerAdapter</span> <span class="hljs-variable">ha</span> <span class="hljs-operator">=</span> getHandlerAdapter(mappedHandler.getHandler());<br><br>            <span class="hljs-comment">// Process last-modified header, if supported by the handler.</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> request.getMethod();<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isGet</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;GET&quot;</span>.equals(method);<br>            <span class="hljs-keyword">if</span> (isGet || <span class="hljs-string">&quot;HEAD&quot;</span>.equals(method)) &#123;<br>                <span class="hljs-type">long</span> <span class="hljs-variable">lastModified</span> <span class="hljs-operator">=</span> ha.getLastModified(request, mappedHandler.getHandler());<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletWebRequest</span>(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">// 调用拦截器的preHandle()</span><br>            <span class="hljs-keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// Actually invoke the handler.</span><br>            <span class="hljs-comment">// 由处理器适配器调用具体的控制器方法，最终获得ModelAndView对象</span><br>            mv = ha.handle(processedRequest, response, mappedHandler.getHandler());<br><br>            <span class="hljs-keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            applyDefaultViewName(processedRequest, mv);<br>            <span class="hljs-comment">// 调用拦截器的postHandle()</span><br>            mappedHandler.applyPostHandle(processedRequest, response, mv);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>            dispatchException = ex;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Throwable err) &#123;<br>            <span class="hljs-comment">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span><br>            <span class="hljs-comment">// making them available for @ExceptionHandler methods and other scenarios.</span><br>            dispatchException = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NestedServletException</span>(<span class="hljs-string">&quot;Handler dispatch failed&quot;</span>, err);<br>        &#125;<br>        <span class="hljs-comment">// 后续处理：处理模型数据和渲染视图</span><br>        processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>        triggerAfterCompletion(processedRequest, response, mappedHandler, ex);<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (Throwable err) &#123;<br>        triggerAfterCompletion(processedRequest, response, mappedHandler,<br>                               <span class="hljs-keyword">new</span> <span class="hljs-title class_">NestedServletException</span>(<span class="hljs-string">&quot;Handler processing failed&quot;</span>, err));<br>    &#125;<br>    <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;<br>            <span class="hljs-comment">// Instead of postHandle and afterCompletion</span><br>            <span class="hljs-keyword">if</span> (mappedHandler != <span class="hljs-literal">null</span>) &#123;<br>                mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// Clean up any resources used by a multipart request.</span><br>            <span class="hljs-keyword">if</span> (multipartRequestParsed) &#123;<br>                cleanupMultipart(processedRequest);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="d-gt-processDispatchResult"><a href="#d-gt-processDispatchResult" class="headerlink" title="d&gt;processDispatchResult()"></a>d&gt;processDispatchResult()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processDispatchResult</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span><br><span class="hljs-params">                                   <span class="hljs-meta">@Nullable</span> HandlerExecutionChain mappedHandler, <span class="hljs-meta">@Nullable</span> ModelAndView mv,</span><br><span class="hljs-params">                                   <span class="hljs-meta">@Nullable</span> Exception exception)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">errorView</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">if</span> (exception != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (exception <span class="hljs-keyword">instanceof</span> ModelAndViewDefiningException) &#123;<br>            logger.debug(<span class="hljs-string">&quot;ModelAndViewDefiningException encountered&quot;</span>, exception);<br>            mv = ((ModelAndViewDefiningException) exception).getModelAndView();<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (mappedHandler != <span class="hljs-literal">null</span> ? mappedHandler.getHandler() : <span class="hljs-literal">null</span>);<br>            mv = processHandlerException(request, response, handler, exception);<br>            errorView = (mv != <span class="hljs-literal">null</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Did the handler return a view to render?</span><br>    <span class="hljs-keyword">if</span> (mv != <span class="hljs-literal">null</span> &amp;&amp; !mv.wasCleared()) &#123;<br>        <span class="hljs-comment">// 处理模型数据和渲染视图</span><br>        render(mv, request, response);<br>        <span class="hljs-keyword">if</span> (errorView) &#123;<br>            WebUtils.clearErrorRequestAttributes(request);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>            logger.trace(<span class="hljs-string">&quot;No view rendering, null ModelAndView returned.&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;<br>        <span class="hljs-comment">// Concurrent handling started during a forward</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (mappedHandler != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// Exception (if any) is already handled..</span><br>        <span class="hljs-comment">// 调用拦截器的afterCompletion()</span><br>        mappedHandler.triggerAfterCompletion(request, response, <span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、SpringMVC的执行流程"><a href="#4、SpringMVC的执行流程" class="headerlink" title="4、SpringMVC的执行流程"></a>4、SpringMVC的执行流程</h3><p>1) 用户向服务器发送请求，请求被SpringMVC 前端控制器 DispatcherServlet捕获。</p><p>2) DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI），判断请求URI对应的映射：</p><p>a) 不存在</p><p>i. 再判断是否配置了mvc:default-servlet-handler</p><p>ii. 如果没配置，则控制台报映射查找不到，客户端展示404错误</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/img006.png" alt="image-20210709214911404"></p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/img007.png" alt="image-20210709214947432"></p><p>iii. 如果有配置，则访问目标资源（一般为静态资源，如：JS,CSS,HTML），找不到客户端也会展示404错误</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/img008.png" alt="image-20210709215255693"></p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/img009.png" alt="image-20210709215336097"></p><p>b) 存在则执行下面的流程</p><p>3) 根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及Handler对象对应的拦截器），最后以HandlerExecutionChain执行链对象的形式返回。</p><p>4) DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter。</p><p>5) 如果成功获得HandlerAdapter，此时将开始执行拦截器的preHandler(…)方法【正向】</p><p>6) 提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)方法，处理请求。在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：</p><p>a) HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息</p><p>b) 数据转换：对请求消息进行数据转换。如String转换成Integer、Double等</p><p>c) 数据格式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等</p><p>d) 数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中</p><p>7) Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象。</p><p>8) 此时将开始执行拦截器的postHandle(…)方法【逆向】。</p><p>9) 根据返回的ModelAndView（此时会判断是否存在异常：如果存在异常，则执行HandlerExceptionResolver进行异常处理）选择一个适合的ViewResolver进行视图解析，根据Model和View，来渲染视图。</p><p>10) 渲染视图完毕执行拦截器的afterCompletion(…)方法【逆向】。</p><p>11) 将渲染结果返回给客户端。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring5理论学习</title>
      <link href="/2022/10/11/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/Spring%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/10/11/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/Spring%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring5"><a href="#Spring5" class="headerlink" title="Spring5"></a>Spring5</h1><h3 id="1-1Spring5学习"><a href="#1-1Spring5学习" class="headerlink" title="1.1Spring5学习"></a>1.1Spring5学习</h3><blockquote><p>IOC概念</p></blockquote><ol><li>控制反转，把对象创建和对象之间的调用过程，交给Spring进行管理</li><li>使用IOC目的，为了耦合度降低</li><li>入门就是IOC的实现</li></ol><blockquote><p>IOC的底层原理</p></blockquote><ol><li>XML解析、工厂模式、反射</li></ol><p>IOC过程：第一步 xml配置文件，配置创建的对象</p><p>​                第二步：有Service类和dao类，创建工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Factory</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> UserDao <span class="hljs-title function_">getDao</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">classValue</span> <span class="hljs-operator">=</span>class属性值;<span class="hljs-comment">//1.xml解析</span><br>        Class clazz=Class.forName(classValue)  <span class="hljs-comment">//2.通过反射创建对象</span><br>        <span class="hljs-keyword">return</span> (UserDao)clazz.newInstance();<br>        <span class="hljs-comment">//进一步降低耦合度</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-IOC-BeanFactory接口"><a href="#2-IOC-BeanFactory接口" class="headerlink" title="2.IOC(BeanFactory接口)"></a><strong>2.IOC(BeanFactory接口)</strong></h4><p>1、IOC 思想基于 IOC 容器完成，IOC 容器底层就是对象工厂</p><p>2、Spring 提供 IOC 容器实现两种方式：（两个接口）</p><p>（1）BeanFactory：IOC 容器基本实现，是 Spring 内部的使用接口，不提供开发人员进行使用加载配置文件时候不会创建对象，在获取对象（使用）才去创建对象</p><p>（2）ApplicationContext：BeanFactory 接口的子接口，提供更多更强大的功能，一般由开发人员进行使用加载配置文件时候就会把在配置文件对象进行创建</p><p>  (3)  ApplicationContext 接口有实现类</p><h4 id="3-IOC操作Bean管理"><a href="#3-IOC操作Bean管理" class="headerlink" title="3.IOC操作Bean管理"></a>3.IOC操作Bean管理</h4><p><strong>1、什么是 Bean 管理</strong></p><p>（0）Bean 管理指的是两个操作</p><p>（1）Spring 创建对象</p><p>（2）Spirng 注入属性</p><p><strong>2、Bean 管理操作有两种方式</strong></p><p>（1）基于 xml 配置文件方式实现</p><ul><li>（1）在 spring 配置文件中，使用 bean 标签，标签里面添加对应属性，就可以实现对象创建</li><li>（2）在 bean 标签有很多属性，介绍常用的属性（id 属性：唯一标识 、 class 属性：类全路径（包类路径）</li><li>（3）创建对象时候，默认也是执行无参数构造方法完成对象创建</li></ul><p>（2）基于注解方式实现</p><p>DI：依赖注入，就是注入属性；</p><p>3.第一种注入方式：使用set方法进行注入</p><p>（1）创建类，定义属性和对应的set方法</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/image-20221008191922438.png" alt=""></p><p>(2) 在 spring 配置文件配置对象创建，配置属性注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-comment">&lt;!--配置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.User&quot;</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;易筋经&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bauthor&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;达摩老祖&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!--使用 property 完成属性注入  name：类里面属性名称 value：向属性注入的值 --&gt;</span><br></code></pre></td></tr></table></figure><p>4.<strong>第二种注入方式：使用有参数构造进行注入</strong></p><p>（1）创建类，定义属性，创建属性对应有参构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Order</span> &#123;<br>    <span class="hljs-keyword">private</span> String oname;<br>    <span class="hljs-keyword">private</span> String address;<br>    <span class="hljs-comment">//有参构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Order</span><span class="hljs-params">(String oname, String address)</span> &#123;<br>        <span class="hljs-built_in">this</span>.oname = oname;<br>        <span class="hljs-built_in">this</span>.address = address;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>(2) 在 spring 配置文件中进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--3 有参数构造注入属性--&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;orders&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.Orders&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;oname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;电脑&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;China&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>5、p 名称空间注入（了解</p><p>（1）使用 p 名称空间注入，可以简化基于 xml 配置方式 第一步 添加 p 名称空间在配置文件中</p><p>   (2)第二步 进行属性注入，在 bean 标签里面进行操作</p><h4 id="4-IOC-操作-Bean-管理（xml-注入其他类型属性）"><a href="#4-IOC-操作-Bean-管理（xml-注入其他类型属性）" class="headerlink" title="4. IOC 操作 Bean 管理（xml 注入其他类型属性）"></a><strong>4. IOC</strong> <strong>操作</strong> <strong>Bean</strong> <strong>管理（xml </strong>注入其他类型属性）</h4><p><strong>1</strong>、<strong>字面量</strong></p><p>(1)null值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--null 值--&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（2）属性值包含特殊符号</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--属性值包含特殊符号</span><br><span class="hljs-comment">1 把&lt;&gt;进行转义 &amp;lt; &amp;gt;</span><br><span class="hljs-comment"> 2 把带特殊符号内容写到 CDATA</span><br><span class="hljs-comment">--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>&lt;![CDATA[&lt;&lt;南京&gt;&gt;]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>2</strong>、<strong>注入属性-外部</strong> <strong>bean</strong></p><p>（1）创建两个类 service 类和 dao 类 </p><p>（2）在 service 调用 dao 里面的方法</p><p>（3）在 spring 配置文件中进行配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br> <span class="hljs-comment">//创建 UserDao 类型属性，生成 set 方法</span><br> <span class="hljs-keyword">private</span> UserDao userDao;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserDao</span><span class="hljs-params">(UserDao userDao)</span> &#123;<br> <span class="hljs-built_in">this</span>.userDao = userDao;<br> &#125;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br> System.out.println(<span class="hljs-string">&quot;service add...............&quot;</span>);<br> userDao.update();<br> &#125; &#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--1 service 和 dao 对象创建--&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.service.UserService&quot;</span>&gt;</span><br> <span class="hljs-comment">&lt;!--注入 userDao 对象</span><br><span class="hljs-comment"> name 属性：类里面属性名称</span><br><span class="hljs-comment"> ref 属性：创建 userDao 对象 bean 标签 id 值</span><br><span class="hljs-comment"> --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDaoImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDaoImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.dao.UserDaoImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>3.xml的其他注入</strong></p><p><strong>1</strong>、注入数组类型属性</p><p><strong>2</strong>、注入 <strong>List</strong> <strong>集合类型属性</strong></p><p><strong>3</strong>、注入 <strong>Map</strong> <strong>集合类型属性</strong></p><ul><li>首先定义一个类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring5.collectiontype;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">stu</span> &#123;<br>    <span class="hljs-comment">//数组类型的属性</span><br>    <span class="hljs-keyword">private</span> String[]courses;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; list;<br>    <span class="hljs-keyword">private</span> Map&lt;String,String&gt; map;<br>    <span class="hljs-keyword">private</span> Set&lt;String&gt;set;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCourses</span><span class="hljs-params">(String[] courses)</span> &#123;<br>        <span class="hljs-built_in">this</span>.courses = courses;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setList</span><span class="hljs-params">(List&lt;String&gt; list)</span> &#123;<br>        <span class="hljs-built_in">this</span>.list = list;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMap</span><span class="hljs-params">(Map&lt;String, String&gt; map)</span> &#123;<br>        <span class="hljs-built_in">this</span>.map = map;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSet</span><span class="hljs-params">(Set&lt;String&gt; set)</span> &#123;<br>        <span class="hljs-built_in">this</span>.set = set;<br>    &#125;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">text</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(Arrays.toString(courses));<br>        System.out.println(list);<br>        System.out.println(map);<br>        System.out.println(set);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>接着在xml文件中注入属性值</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;stu&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.collectiontype.stu&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;courses&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Java课程<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>数据库课程<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>小三<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;Java&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;java&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;PHP&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;php&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;set&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>MySQL<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Redis<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>最后写出text方法进行调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">textDemo1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean1.xml&quot;</span>);<br>    <span class="hljs-type">stu</span> <span class="hljs-variable">stu1</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;stu&quot;</span>, stu.class);<br>    stu1.text();<br>&#125;<br></code></pre></td></tr></table></figure><p> <strong>6.工厂FactoryBean</strong></p><p><strong>1</strong>、<strong>Spring</strong>有两种类型 <strong>bean</strong>，一种普通 bean<strong>，另外一种工厂</strong> <strong>bean</strong>（FactoryBean）</p><p><strong>2</strong>、普通bean<strong>：在配置文件中定义 </strong>bean <strong>类型就是返回类型</strong></p><p><strong>3</strong>、工厂 <strong>bean</strong>：在配置文件定义 <strong>bean</strong> <strong>类型可以和返回类型不一样</strong></p><h4 id="5-IOC操作Bean管理（Bean作用域）"><a href="#5-IOC操作Bean管理（Bean作用域）" class="headerlink" title="5. IOC操作Bean管理（Bean作用域）"></a>5. IOC操作Bean管理（Bean作用域）</h4><p><strong>1</strong>.<strong>在</strong> <strong>Spring</strong> <strong>里面，默认情况下，bean 是单实例对象</strong></p><p><strong>2</strong>、如何设置单实例还是多实例</p><p>（1）在 spring 配置文件 bean 标签里面有属性（scope）用于设置单实例还是多实例</p><p>（2）scope 属性值</p><ul><li>第一个值 默认值，singleton，表示是单实例对象</li><li>第二个值 prototype，表示是多实例对象</li></ul><p>（3）singleton 和 prototype 区别</p><p>第一 singleton 单实例，prototype 多实例</p><p>第二 设置 scope 值是 singleton 时候，加载 spring 配置文件时候就会创建单实例对象 设置 scope 值是 prototype 时候，不是在加载 spring 配置文件时候创建 对象，在调用getBean 方法时候创建多实例对象。</p><h4 id="6-IOC操作Bean管理（Bean的生命周期）"><a href="#6-IOC操作Bean管理（Bean的生命周期）" class="headerlink" title="6. IOC操作Bean管理（Bean的生命周期）"></a>6. IOC操作Bean管理（Bean的生命周期）</h4><p>（1）通过构造器创建 bean 实例（无参数构造）</p><p>（2）为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）</p><p>（3）调用 bean 的初始化的方法（需要进行配置初始化的方法）</p><p>（4）bean 可以使用了（对象获取到了）</p><p>（5）当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Orders</span> &#123;<br> <span class="hljs-comment">//无参数构造</span><br> <span class="hljs-keyword">public</span> <span class="hljs-title function_">Orders</span><span class="hljs-params">()</span> &#123;<br> System.out.println(<span class="hljs-string">&quot;第一步 执行无参数构造创建 bean 实例&quot;</span>);<br> &#125;<br> <span class="hljs-keyword">private</span> String oname;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setOname</span><span class="hljs-params">(String oname)</span> &#123;<br> <span class="hljs-built_in">this</span>.oname = oname;<br> System.out.println(<span class="hljs-string">&quot;第二步 调用 set 方法设置属性值&quot;</span>);<br> &#125;<br> <span class="hljs-comment">//创建执行的初始化的方法</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initMethod</span><span class="hljs-params">()</span> &#123;<br> System.out.println(<span class="hljs-string">&quot;第三步 执行初始化的方法&quot;</span>);<br> &#125;<br> <span class="hljs-comment">//创建执行的销毁的方法</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroyMethod</span><span class="hljs-params">()</span> &#123;<br> System.out.println(<span class="hljs-string">&quot;第五步 执行销毁的方法&quot;</span>);<br> &#125; &#125;<br><br> <span class="hljs-meta">@Test</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testBean3</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// ApplicationContext context =</span><br><span class="hljs-comment">// new ClassPathXmlApplicationContext(&quot;bean4.xml&quot;);</span><br> <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span><br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean4.xml&quot;</span>);<br> <span class="hljs-type">Orders</span> <span class="hljs-variable">orders</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;orders&quot;</span>, Orders.class);<br> System.out.println(<span class="hljs-string">&quot;第四步 获取创建 bean 实例对象&quot;</span>);<br> System.out.println(orders);<br> <span class="hljs-comment">//手动让 bean 实例销毁</span><br> context.close();<br> &#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;orders&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.bean.Orders&quot;</span> <span class="hljs-attr">init</span><span class="hljs-attr">method</span>=<span class="hljs-string">&quot;initMethod&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;destroyMethod&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;oname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;手机&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/image-20221009164124690.png" alt=""></p><p><strong>2、 </strong>bean <strong>的后置处理器， </strong> <strong>bean</strong> <strong>生命周期有七步</strong></p><p>（1）通过构造器创建 bean 实例（无参数构造）</p><p>（2）为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）</p><p>（3）把 bean 实例传递 bean 后置处理器的方法 postProcessBeforeInitialization </p><p>（4）调用 bean 的初始化的方法（需要进行配置初始化的方法）</p><p>（5）把 <strong>bean</strong> <strong>实例传递</strong> <strong>bean</strong> <strong>后置处理器的方法</strong> postProcessAfterInitialization</p><p>（6）bean 可以使用了（对象获取到了）</p><p>（7）当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法）</p><h4 id="6-IOC操作Bean管理-基于注解方法"><a href="#6-IOC操作Bean管理-基于注解方法" class="headerlink" title="6.IOC操作Bean管理(基于注解方法)"></a>6.IOC操作Bean管理(基于注解方法)</h4><p><strong>1</strong> <strong>、什么是注解</strong></p><p>（1）注解是代码特殊标记，格式：@注解名称(属性名称=属性值, 属性名称=属性值..)</p><p>（2）使用注解，注解作用在类上面，方法上面，属性上面</p><p>（3）使用注解目的：简化 xml 配置</p><p><strong>2</strong> <strong>、</strong> <strong>Spring</strong> <strong>针对</strong> <strong>Bean</strong> <strong>管理中创建对象提供注解</strong></p><p>（1）@Component</p><p>（2）@Service</p><p>（3）@Controller</p><p>（4）@Repository</p><p>* 上面四个注解功能是一样的，都可以用来创建 bean 实例</p><p><strong>3</strong> <strong>、基于注解方式实现对象创建</strong></p><ul><li>第一步 引入依赖</li><li>第二步 开启组件扫描</li><li>第三步 创建类，在类上面添加创建对象注解</li></ul><p><strong>4</strong> <strong>、开启组件扫描细节配置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--示例 1</span><br><span class="hljs-comment"> use-default-filters=&quot;false&quot; 表示现在不使用默认 filter，自己配置 filter</span><br><span class="hljs-comment"> context:include-filter ，设置扫描哪些内容</span><br><span class="hljs-comment">--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu&quot;</span> <span class="hljs-attr">use-default</span><span class="hljs-attr">filters</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">context:include-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> </span><br><span class="hljs-tag"> </span><br><span class="hljs-tag"><span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><span class="hljs-comment">&lt;!--示例 2</span><br><span class="hljs-comment"> 下面配置扫描包所有内容</span><br><span class="hljs-comment"> context:exclude-filter： 设置哪些内容不进行扫描</span><br><span class="hljs-comment">--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">context:exclude-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> </span><br><span class="hljs-tag"> </span><br><span class="hljs-tag"><span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>5</strong> <strong>、基于注解方式实现属性注入</strong></p><ul><li><p>@Autowired：根据属性类型进行自动装配</p><p>第一步 把 service 和 dao 对象创建，在 service 和 dao 类添加创建对象注解</p><p>第二步 在 service 注入 dao 对象，在 service 类添加 dao 类型属性，在属性上面使用注解</p></li><li><p>@Qualifier：根据名称进行注入</p><p>这个@Qualifier 注解的使用，和上面@Autowired 一起使用</p><p><em>//添加注入属性注解</em></p><p>@Autowired <em>//根据类型进行注入</em></p><p>@Qualifier(value = <strong>“userDaoImpl1”</strong>) <em>//根据名称进行注入</em></p></li><li><p>@Resource：可以根据类型注入，可以根据名称注入   //@Resource(name = <strong>“userDaoImpl1”</strong>) <em>//根据名称进行注入</em></p></li><li><p>@Value：注入普通类型属性</p></li></ul><p><strong>6、完全注解开发</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">（<span class="hljs-number">1</span>）创建配置类，替代 xml 配置文件<br><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">//作为配置类，替代 xml 配置文件</span><br><span class="hljs-meta">@ComponentScan(basePackages = &#123;&quot;com.atguigu&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-AOP-概念"><a href="#7-AOP-概念" class="headerlink" title="7.AOP(概念)"></a>7.AOP(概念)</h4><p><strong>1</strong> <strong>、什么是</strong> <strong>AOP</strong></p><p>（1）面向切面编程（方面），利用 AOP 可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><p>（2）通俗描述：不通过修改源代码方式，在主干功能里面添加新功能</p><p>（3）使用登录例子说明 AOP</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/image-20221010165047937.png" alt="image-20221010165047937"></p><p><strong>1</strong> <strong>、</strong> <strong>AOP</strong> <strong>底层使用动态代理</strong></p><p>（1）有两种情况动态代理</p><p><strong>第一种 有接口情况，使用</strong> <strong>JDK</strong> <strong>动态代理</strong></p><p>⚫ 创建接口实现类代理对象，增强类的方法</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/image-20221010165410954.png" alt="image-20221010165410954"></p><p><strong>第二种 没有接口情况，使用</strong> <strong>CGLIB</strong> <strong>动态代理</strong></p><p>⚫ 创建子类的代理对象，增强类的方法</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/image-20221010165427947.png" alt="image-20221010165427947"></p><p><strong>2.AOP</strong> <strong>（</strong> <strong>JDK</strong> <strong>动态代理）</strong></p><p>1、使用 JDK 动态代理，使用 Proxy 类里面的方法创建代理对象</p><p>（1）调用 newProxyInstance 方法</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/image-20221010165618081.png" alt="image-20221010165618081"></p><p>方法有三个参数：</p><ul><li>第一参数，类加载器</li><li>第二参数，增强方法所在的类，这个类实现的接口，支持多个接口</li><li>第三参数，实现这个接口 InvocationHandler，创建代理对象，写增强的部分</li></ul><p><strong>2</strong> <strong>、编写</strong> <strong>JDK</strong> <strong>动态代理代码</strong></p><p>（1）创建接口，定义方法</p><p>（2）创建接口实现类，实现方法</p><p>（3）使用 Proxy 类创建接口代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//(1)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>;<br> <span class="hljs-keyword">public</span> String <span class="hljs-title function_">update</span><span class="hljs-params">(String id)</span>;<br>&#125;<br><span class="hljs-comment">//(2)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br> <span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br> <span class="hljs-keyword">return</span> a+b;<br> &#125;<br> <span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">public</span> String <span class="hljs-title function_">update</span><span class="hljs-params">(String id)</span> &#123;<br> <span class="hljs-keyword">return</span> id;<br> &#125; &#125;<br><span class="hljs-comment">//(3)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDKProxy</span> &#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br> <span class="hljs-comment">//创建接口实现类代理对象</span><br> Class[] interfaces = &#123;UserDao.class&#125;;<br>     <span class="hljs-type">UserDaoImpl</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoImpl</span>();<br> <span class="hljs-type">UserDao</span> <span class="hljs-variable">dao</span> <span class="hljs-operator">=</span> <br>(UserDao)Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces, <br><span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoProxy</span>(userDao));<br> <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> dao.add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br> System.out.println(<span class="hljs-string">&quot;result:&quot;</span>+result);<br> &#125; &#125;<br><span class="hljs-comment">//创建代理对象代码</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br> <span class="hljs-comment">//1 把创建的是谁的代理对象，把谁传递过来</span><br> <span class="hljs-comment">//有参数构造传递</span><br> <span class="hljs-keyword">private</span> Object obj;<br> <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserDaoProxy</span><span class="hljs-params">(Object obj)</span> &#123;<br> <span class="hljs-built_in">this</span>.obj = obj;<br> &#125;<br> <span class="hljs-comment">//增强的逻辑</span><br> <span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> <br>Throwable &#123;<br> <span class="hljs-comment">//方法之前</span><br> System.out.println(<span class="hljs-string">&quot;方法之前执行....&quot;</span>+method.getName()+<span class="hljs-string">&quot; :传递的参</span><br><span class="hljs-string">数...&quot;</span>+ Arrays.toString(args));<br> <span class="hljs-comment">//被增强的方法执行</span><br> <span class="hljs-type">Object</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> method.invoke(obj, args);<br> <span class="hljs-comment">//方法之后</span><br> System.out.println(<span class="hljs-string">&quot;方法之后执行....&quot;</span>+obj);<br> <span class="hljs-keyword">return</span> res;<br> &#125; &#125;<br></code></pre></td></tr></table></figure><p><strong>3.AOP(术语)</strong></p><p>1.链接点</p><p>类里面那些方法可以被增强，这些方法称为链接点</p><p>2.切入点</p><p>实际被真正增强的方法，称为切入点</p><p>3.通知（增强）</p><p>（1）实际增强的逻辑部分称为通知（增强）</p><p>（2）通知有多种类型</p><ul><li>前置通知</li><li>后置通知</li><li>环绕通知</li><li>异常通知</li><li>最终通知</li></ul><p>4.切面</p><p>是动作：把通知应用到切入点过程</p><h4 id="8-AOP操作（准备工作）"><a href="#8-AOP操作（准备工作）" class="headerlink" title="8.AOP操作（准备工作）"></a>8.AOP操作（准备工作）</h4><p><strong>1**</strong>、<strong>**Spring</strong> <strong>框架一般都是基于</strong> <strong>AspectJ</strong> <strong>实现</strong> <strong>AOP</strong> <strong>操作</strong></p><p>（1）AspectJ 不是 Spring 组成部分，独立 AOP 框架，一般把 AspectJ 和 Spirng 框架一起使</p><p>用，进行 AOP 操作</p><p><strong>2</strong> <strong>、基于</strong> <strong>AspectJ</strong> <strong>实现</strong> <strong>AOP</strong> <strong>操作</strong></p><p>（1）基于 xml 配置文件实现</p><p>（2）基于注解方式实现（使用）</p><p><strong>3</strong> <strong>、在项目工程里面引入</strong> <strong>AOP</strong> <strong>相关依赖</strong></p><p><strong>4</strong> <strong>、切入点表达式</strong></p><p>（1）切入点表达式作用：知道对哪个类里面的哪个方法进行增强</p><p>（2）语法结构： execution([权限修饰符] [返回类型] [类全路径] [方法名称] ([参数列表]) )</p><ul><li><p>举例 1：对 com.atguigu.dao.BookDao 类里面的 add 进行增强 execution(* com.atguigu.dao.BookDao.add(..))</p></li><li><p>举例 2：对 com.atguigu.dao.BookDao 类里面的所有的方法进行增强 execution(<em> com.atguigu.dao.BookDao.</em> (..))</p></li><li><p>举例 3：对 com.atguigu.dao 包里面所有类，类里面所有方法进行增强 execution(<em> com.atguigu.dao.</em>.* (..))</p></li></ul><p><strong>5.AOP</strong> <strong>操作（</strong> <strong>AspectJ</strong> <strong>注解）</strong></p><p><strong>1</strong> <strong>、创建类，在类里面定义方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br> System.out.println(<span class="hljs-string">&quot;add.......&quot;</span>);<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2</strong> <strong>、创建增强类（编写增强逻辑）</strong></p><p>（1）在增强类里面，创建方法，让不同方法代表不同通知类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//增强的类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserProxy</span> &#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//前置通知</span><br> System.out.println(<span class="hljs-string">&quot;before......&quot;</span>);<br> &#125; &#125;<br></code></pre></td></tr></table></figure><p><strong>3</strong> <strong>、进行通知的配置</strong></p><p>（1）在 spring 配置文件中，开启注解扫描</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--开启组件扫描--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.spring5.aopanno&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（2）使用注解创建 User 和 UserProxy 对象</p><p>（3）在增强类上面添加注解 @Aspect</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//User.java中</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;add,......&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//UserProxy.java中</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserProxy</span> &#123;<br>    <span class="hljs-meta">@Before(value = &quot;execution(* com.atguigu.spring5.aopanno.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;before.....&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>（4）在 spring 配置文件中开启生成代理对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 开启 Aspect 生成代理对象--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspectj-autoproxy</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>4</strong> <strong>、配置不同类型的通知</strong></p><p>（1）在增强类的里面，在作为通知方法上面添加通知类型注解，使用切入点表达式配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span> <span class="hljs-comment">//生成代理对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserProxy</span> &#123;<br>    <span class="hljs-comment">//前置通知</span><br>    <span class="hljs-comment">//@Before 注解表示作为前置通知</span><br>    <span class="hljs-meta">@Before(value = &quot;execution(* com.atguigu.spring5.aopanno.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;before.........&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//后置通知（返回通知）</span><br>    <span class="hljs-meta">@AfterReturning(value = &quot;execution(* </span><br><span class="hljs-meta">            com.atguigu.spring5.aopanno.User.add(..))&quot;)</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturning</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;afterReturning.........&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//最终通知</span><br>    <span class="hljs-meta">@After(value = &quot;execution(* com.atguigu.spring5.aopanno.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;after.........&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//异常通知</span><br>    <span class="hljs-meta">@AfterThrowing(value = &quot;execution(* </span><br><span class="hljs-meta">            com.atguigu.spring5.aopanno.User.add(..))&quot;)</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowing</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;afterThrowing.........&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//环绕通知</span><br>    <span class="hljs-meta">@Around(value = &quot;execution(* com.atguigu.spring5.aopanno.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="hljs-keyword">throws</span><br>            Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;环绕之前.........&quot;</span>);<br>        <span class="hljs-comment">//被增强的方法执行</span><br>        proceedingJoinPoint.proceed();<br>        System.out.println(<span class="hljs-string">&quot;环绕之后.........&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>5</strong> <strong>、相同的切入点抽取</strong></p><p><em>//相同切入点抽取</em></p><p>@Pointcut(value = <strong>“execution(* com.atguigu.spring5.aopanno.User.add(..))”</strong>)</p><p><strong>6</strong> <strong>、有多个增强类多同一个方法进行增强，设置增强类优先级</strong></p><p>（1）在增强类上面添加注解 @Order(数字类型值)，数字类型值越小优先级越高</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Order(1)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonProxy</span><br></code></pre></td></tr></table></figure><h1 id="2-事务概念"><a href="#2-事务概念" class="headerlink" title="2.事务概念"></a>2.事务概念</h1><p><strong>1</strong> <strong>、什么事务</strong></p><p>（1）事务是数据库操作最基本单元，逻辑上一组操作，要么都成功，如果有一个失败所有操</p><p>作都失败</p><p>（2）典型场景：银行转账</p><p>* lucy 转账 100 元 给 mary</p><p>* lucy 少 100，mary 多 100</p><p><strong>2</strong> <strong>、事务四个特性（</strong> <strong>ACID</strong> <strong>）</strong> </p><p>（1）原子性</p><p>（2）一致性</p><p>（3）隔离性</p><p>（4）持久性</p><p><strong>3.事务操作（搭建事务操作环境）</strong></p><ul><li><p><strong>创建数据库表，添加记录</strong></p></li><li><p><strong>创建</strong> <strong>service</strong> <strong>，搭建</strong> <strong>dao</strong> <strong>，完成对象创建和注入关系</strong></p></li></ul><p>（1）service 注入 dao，在 dao 注入 JdbcTemplate，在 JdbcTemplate 注入 DataSource</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br> <span class="hljs-comment">//注入 dao</span><br> <span class="hljs-meta">@Autowired</span><br> <span class="hljs-keyword">private</span> UserDao userDao; &#125;<br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br> <span class="hljs-meta">@Autowired</span><br> <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate; &#125;<br></code></pre></td></tr></table></figure><ul><li><strong>在</strong> <strong>dao</strong> <strong>创建两个方法：多钱和少钱的方法，在</strong> <strong>service</strong> <strong>创建方法（转账的方法）</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br> <span class="hljs-meta">@Autowired</span><br> <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br> <span class="hljs-comment">//lucy 转账 100 给 mary</span><br> <span class="hljs-comment">//少钱</span><br> <span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reduceMoney</span><span class="hljs-params">()</span> &#123;<br> <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update t_account set money=money-? where username=?&quot;</span>;<br> jdbcTemplate.update(sql,<span class="hljs-number">100</span>,<span class="hljs-string">&quot;lucy&quot;</span>);<br> &#125;<br> <span class="hljs-comment">//多钱</span><br> <span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addMoney</span><span class="hljs-params">()</span> &#123;<br> <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update t_account set money=money+? where username=?&quot;</span>;<br> jdbcTemplate.update(sql,<span class="hljs-number">100</span>,<span class="hljs-string">&quot;mary&quot;</span>);<br> &#125; &#125;<br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br> <span class="hljs-comment">//注入 dao</span><br> <span class="hljs-meta">@Autowired</span><br> <span class="hljs-keyword">private</span> UserDao userDao;<br> <span class="hljs-comment">//转账的方法</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accountMoney</span><span class="hljs-params">()</span> &#123;<br> <span class="hljs-comment">//lucy 少 100</span><br> userDao.reduceMoney();<br> <span class="hljs-comment">//mary 多 100</span><br> userDao.addMoney();<br> &#125; &#125;<br></code></pre></td></tr></table></figure><p><strong>4、事务操作（</strong> <strong>Spring</strong> <strong>事务管理介绍）</strong></p><ul><li><strong>事务添加到</strong> <strong>JavaEE</strong> <strong>三层结构里面</strong> <strong>Service</strong> <strong>层（业务逻辑层）</strong></li><li><strong>在</strong> <strong>Spring</strong> <strong>进行事务管理操作</strong></li><li><strong>（</strong> <strong>1</strong> <strong>）有两种方式：</strong>编程式事务管理<strong>和声明式事务管理（使用）</strong></li><li><strong>声明式事务管理</strong></li><li><strong>（</strong> <strong>1</strong> <strong>）基于注解方式（使用）</strong></li><li><strong>（2）基于 xml 配置文件方式</strong></li><li><strong>在</strong> <strong>Spring</strong> <strong>进行声明式事务管理，底层使用</strong> <strong>AOP</strong> <strong>原理</strong></li><li><strong>Spring</strong> <strong>事务管理</strong> <strong>API</strong></li><li>（1）提供一个接口，代表事务管理器，这个接口针对不同的框架提供不同的实现类</li></ul><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/image-20221011160228717.png" alt="image-20221011160228717"></p><p><strong>事务的传播行为</strong></p><p><strong>3</strong> <strong>、</strong> <strong>ioslation</strong> <strong>：事务隔离级别</strong></p><p>（1）事务有特性成为隔离性，多事务操作之间不会产生影响。不考虑隔离性产生很多问题</p><p>（2）有三个读问题：脏读、不可重复读、虚（幻）读</p><p>（3）脏读：一个未提交事务读取到另一个未提交事务的数据</p><p>（4）不可重复读：一个未提交事务读取到另一提交事务修改数据</p><p>（5）虚读：一个未提交事务读取到另一提交事务添加数据</p><p>解决方案：</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/image-20221011160356263.png" alt="image-20221011160356263"></p><p><strong>4</strong> <strong>、</strong> <strong>timeout</strong> <strong>：超时时间</strong></p><p>（1）事务需要在一定时间内进行提交，如果不提交进行回滚</p><p>（2）默认值是 -1 ，设置时间以秒单位进行计算</p><p><strong>5</strong> <strong>、</strong> <strong>readOnly</strong> <strong>：是否只读</strong></p><p>（1）读：查询操作，写：添加修改删除操作</p><p>（2）readOnly 默认值 false，表示可以查询，可以添加修改删除操作</p><p>（3）设置 readOnly 值是 true，设置成 true 之后，只能查询</p><p><strong>6</strong> <strong>、</strong> <strong>rollbackFor</strong> <strong>：回滚</strong></p><p>（1）设置出现哪些异常进行事务回滚</p><p><strong>7</strong> <strong>、</strong> <strong>noRollbackFor</strong> <strong>：不回滚</strong></p><p>（1）设置出现哪些异常不进行事务回滚</p><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h1><h3 id="1-Spring5-IOC原理"><a href="#1-Spring5-IOC原理" class="headerlink" title="1.Spring5 IOC原理"></a>1.Spring5 IOC原理</h3><p><strong>IOC :</strong> <strong>控制反转，把创建对象的过程交给Spring进行管理</strong></p><p><strong>1.1 原理理解：</strong></p><p>IOC是Inversion of Control的缩写，即控制反转，就是把对象创建和对象之间调用的过程交给Spring进行管理，使用 IOC 的目的是为了降低耦合。</p><p>对 IOC 的理解就是，比如说对象 A 要调用对象 B ，正常写代码的情况下，通常就是当对象 A 需要用到对象 B 的时候，然后就需要自己主动的 new 一个对象 B，主动权在对象 A 自己手中，但是引入了IOC 之后，，如果对象A在需要调用对象B，此时 IOC 会主动的创建一个B对象，然后注入到对象 A 需要的地方。这样就断绝了对象 A 和 对象 B 直接的直接联系。这点与电脑读取USB上文件的场景非常相似。</p><p>在电脑读取USB上的文件时，电脑不会关心这个是那个USB设备，只要这个USB是可用的，他就可以从上面读取文件，而电脑读取什么文件的决定权就在我的手上，我想要电脑读取什么文件，我就插入什么USB，这个时候 我 就扮演 IOC 的角色。</p><p> IOC 内部的底层原理主要包括xml解析 、 工厂模式 、 反射。</p><p><strong>1.2 Spring提供 IOC 容器的实现方式有两种：</strong></p><p>BeanFactory : IOC 容器的基本实现，是Spring内部的使用接口，不提供给开发人员使用，（加载配置文件时不会创建对象，只有使用对象时才会创建对象，不利于程序的时效性）</p><p>ApplicationContext : BeanFactory的子接口，提供给开发人员使用，（加载配置文件的时候就会把在配置文件中的对象创建，有利于程序的时效性）</p><p>IOC 操作bean管理</p><p>Bean管理是指两个操作 <strong>创建对象</strong> 和 <strong>注入属性</strong></p><p>Bean管理有两种方式 <strong>基于xml配置文件方式实现</strong> 和 <strong>注解方式实现</strong></p><h3 id="2-AOP的基础概念"><a href="#2-AOP的基础概念" class="headerlink" title="2.AOP的基础概念"></a>2.AOP的基础概念</h3><p><strong>2.1 AOP面向切面编程</strong>，可以不修改源代码进行方法增强，AOP是OOP（面向对象编程）的延续，主要用于日志记录、性能统计、安全控制、事务处理等方面。它是基于代理设计模式，而代理设计模式又分为静态代理和动态代理，静态代理比较简单就是一个接口，分别由一个真实实现和一个代理实现，而动态代理分为基于接口的JDK动态代理和基于类的cglib的动态代理，咱们正常都是面向接口开发，所以AOP使用的是基于接口的JDK动态代理。</p><p><strong>2.2 AOP中的一些常用概念</strong></p><p><strong>切面(Aspect)</strong>：AOP核心就是切面，它将多个类的通用行为封装成可重用的模块，该模块含有一组API提供横切功能。比如，一个日志模块可以被称作日志的AOP切面。根据需求的不同，一个应用程序可以有若干切面。在Spring AOP中，切面通过带有@Aspect注解的类实现。</p><p><strong>连接点(Join Point)</strong>：哪些方法需要被AOP增强，这些方法就叫做连接点。</p><p><strong>通知(Advice)</strong>：AOP在特定的切入点上执行的增强处理，有</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">before<br>after<br>afterReturning<br>afterThrowing<br>around<br></code></pre></td></tr></table></figure><p><strong>2.3 通知类型</strong></p><p>通知(advice)是你在你的程序中想要应用在其他模块中的横切关注点的实现。Advice主要有以下5种类型：</p><ul><li><strong>前置通知(Before Advice)</strong>：在连接点之前执行的Advice，不过除非它抛出异常，否则没有能力中断执行流。使用@Before注解使用这个Advice。</li><li><strong>返回之后通知(After Retuning Advice)</strong>：在连接点正常结束之后执行的Advice。例如，如果一个方法没有抛出异常正常返回。通过 @AfterReturning注解使用它。</li><li><strong>抛出（异常）后执行通知(After Throwing Advice)</strong>：如果一个方法通过抛出异常来退出的话，这个Advice就会被执行。通过 @AfterThrowing注解来使用。</li><li><strong>后置通知(After Advice)</strong>：无论连接点是通过什么方式退出的(正常返回或者抛出异常)都会执行在结束后执行这些Advice。通过 @After注解使用。</li><li><strong>围绕通知(Around Advice)</strong>：围绕连接点执行的Advice，就你一个方法调用。这是最强大的Advice。通过@Around注解使用。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理2</title>
      <link href="/2022/10/08/%E5%A4%A7%E4%B8%89%E4%B8%8A%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%AC%E4%BA%8C%E4%B8%89%E7%AB%A0/"/>
      <url>/2022/10/08/%E5%A4%A7%E4%B8%89%E4%B8%8A%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%AC%E4%BA%8C%E4%B8%89%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="计算机组成原理"><a href="#计算机组成原理" class="headerlink" title="计算机组成原理"></a>计算机组成原理</h2><p>计算机系统=硬件+软件</p><blockquote><p>软件</p></blockquote><p>系统软件：用来管理整个计算机系统(操作系统，数据库管理系统)</p><p>应用软件：按任务需要编织成的各种程序(抖音、王者)</p><p>第一台电子数字计算机:ENIC(1964)  逻辑元件：电子管</p><p>第一代：电子管                                     内存：泵延迟线、磁鼓</p><p>第二代：晶体管                                     内存： 磁芯存储器    </p><p>第三代：中小规模继承电路                             半导体存储器</p><p> 第四代：大规模、超大规模集成电路              半导体存储器</p><p>微处理器：CPU，微型计算机</p><blockquote><p>硬件的发展</p></blockquote><ul><li>1947贝尔实验室 发明了”晶体管“</li><li>1955，肖克利在硅谷创建公司</li><li>1959年 仙童半导体公司发明集成电路</li><li>1968年 摩尔等人离开仙童创立Inter</li><li>1969年仙童销售部负责人桑德斯离开仙童创立AMD</li></ul><blockquote><p>摩尔定律</p></blockquote><p>集成电路上可容纳的晶体管数目，约每隔18个月便会增加一倍，效率也提升一倍</p><blockquote><p>软件的发展</p></blockquote><p>机器语言—&gt;汇编语言—-&gt;pascal、C++、java、python</p><p>操作系统   DOS—windows—-Linux</p><blockquote><p>目前趋势</p></blockquote><p>两级分化：一极是微型计算机向跟微型化网络化、高性能、多用途方向发展</p><p>另一极是巨型化，向更巨型化、超高速、并行处理、智能化方向发展</p><blockquote><p> 计算机硬件的基本组成</p></blockquote><p>冯诺依曼的计算机</p><ul><li>计算机由五大部件组成</li><li>指令和数据以同等的地位存于存储器中，可以按地址访问</li><li>指令和操作数用二进制表示</li><li>指令由操作码和地址吗组成</li><li>存储程序</li><li>以运算器为中心</li></ul><p>ENIAC 手动接线来控制计算</p><blockquote><p>存储程序概念</p></blockquote><p>将指令以二进制代码的形式事先输入到计算机的主存储器，然后按照其在存储器中的首地址执行程序的第一条指令，以后就按该程序的规定顺序执行其它命令直至程序执行结束。</p><ul><li>输入设备：将信息转换为机器能识别的形式</li><li>存储器：存放程序和数据</li><li>运算器：算术逻辑运算</li><li>控制器：指挥程序运行</li><li>输出设备：转为为人们熟悉的形式</li></ul><p>在计算机系统中软件和硬件在逻辑上是等效的。软件实现：成本低、效率也低 硬件实现：效率高成本也高。</p><p>现代计算机：以存储器为中心 CPU=运算器+控制器</p><blockquote><p>现代计算机的结构</p></blockquote><p>CPU（运算器、控制器）—-主存储器———（输入设备、输出设备）</p><blockquote><p>主存储器的基本组成</p></blockquote><p>存储体—-（存储地址寄存器MAR、存储数据寄存器MDR)</p><p>cpu将地址写到MDR中 然后主存储器根据地址到存储体中取出数据，然后主存储器中的一些控制逻辑将CPU想要的数据写到(存储数据寄存器)MDR中最后CPU通过线路从MDR中取出数据</p><p>CPU写入数据：写入的位置放在MAR中，写入的数据放在MDR中 再通过地址总线写入存储体</p><p>存储体：数据在存储体内按地址存储</p><p>存储单元”每个存储单元存放一串二级制代码</p><p>存储字：存储单元的二进制代码组合</p><p>存储字长：存储单元二进制代码的位数</p><p>存储元：存储二级制电子元件，每个存储元可以存储1bit（原理：电容）</p><p>MAR位数反映了存储单元的个数  MDR位数=存储字长</p><p>列题：</p><p>MAR=4位—&gt;总共由2^4个存储单元</p><p>MD=16位——&gt;每个存储单元可以存放16bit，一个字（word）=16bit</p><p>一个字节byte=8bit</p><p>1B=1个字节，1b=1个bit</p><blockquote><p>运算器的基本组成</p></blockquote><p>运算器：用于实现算术运算（如：加减乘除）、逻辑运算（如：与非）</p><ul><li>ACC：累加器、用于存放操作数、或者运算结果</li><li>MQ：乘商寄存器，在乘除法运算时，用于存放操作数或者运算结果</li><li>X：通用的操作数寄存器，用于存放操作数</li><li>ALU：算术逻辑单元、通过内部复杂的电路实现算术运算、逻辑运算</li></ul><blockquote><p>控制器的基本组成</p></blockquote><ul><li>CU:控制单元，分析指令，给出控制信号（Control Unit）</li><li>IR：指令寄存器，存放当前执行的指令(Instruction Register)</li><li>PC：程序计数器，存放下一条指令地址，有自动加1的功能(Program Counter)</li></ul><p>完成一条指令—-{取指令PC、分析指令IR}—-{执行指令CU}</p><blockquote><p>计算机系统的多级层次结构</p></blockquote><p>高级语言机器 虚拟机器M4    用编译程序翻译成汇编语言程序</p><p> 汇编语言机器叫做虚拟机器M3           （用汇编程序翻译成机器语言程序）</p><p>操作系统机器（虚拟机器M2）           向上提供“广义指令”系统调用</p><p>传统的机器M1用机器语言的机器             执行二进制机器指令</p><p>微程序机器M0 （微指令系统）                由硬件直接执行的微指令</p><blockquote><p>三种级别的语言</p></blockquote><p>汇编语言：助记符   高级语言 ：C++   机器语言：二级制代码</p><p> 编译程序：将高级语言编写的源程序全部语句一次性的翻译成机器语言程序，而后在执行机器语言程序（只需要执行一次）（C++/C/Java）</p><p>解释程序：将原程序的一条语句翻译成对应的机器语言的语句，并立即执行。紧接着再翻译下一句（每次执行都要翻译）（JavaScript、Python、Shell）</p><blockquote><p>存储器的性能指标</p></blockquote><p> 主存储器中的MAR:位数反映存储单元的个数（最多支持多少个）</p><p>主存储器中的MDR：位数=存储字长=每个存储单元的大小</p><p>总容量=存储单元的个数×存储字长 bit     1Byte=8bit</p><p>​            =存储单元的个数×存储字长/8  Byte</p><p>Eg:  MAR为32位  MDR为8位  总容量=2^(32)×8bit=4GB</p><blockquote><p>CPU的性能指标</p></blockquote><p>CPU主频（时钟频率）=1/（CPU的时钟周期）</p><p>CPI：执行一条指令所需要的时钟周期数</p><p>执行一条指令的耗时=CPI×CPU的时钟周期</p><p>CPU执行时间=CPU时钟周期数/主频=（指令条数*CPI）/主频</p><p>IPS：每秒执行多少条指令</p><p>IPS=主频/平均CPI</p><p>FLOPS:每秒执行多少次浮点运算</p><blockquote><p>系统整体的性能指标</p></blockquote><p>数据通路带宽：数据总线一次所能运行并传送信息的位数</p><p>吞吐量：指系统在单位时间内处理请求的数量</p><p>响应时间：指用户向计算机发送一个请求到系统对该请求做出响应并获取它所需要的结果的等待时间</p><blockquote><p> ASCLL码</p></blockquote><p>可印刷的字符：32~126 其余的为控制、通信字符</p><blockquote><p>汉字的表示和编码</p></blockquote><p>GB 2312-80：汉字+各种符号共7445个</p><blockquote><p>字符串</p></blockquote><p>大端模式：将数据的最高有效字节存放在低地址单元中</p><p>小端模式：将数据的最高有效字节存放在高地址的单元中</p><h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><h4 id="1-主存储器"><a href="#1-主存储器" class="headerlink" title="1.主存储器"></a>1.主存储器</h4><p>存储体、MAR（地址寄存器）、MDR（数据寄存器）</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/image-20221003174934941.png" alt="image-20221003174934941"></p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/image-20221003175031177.png" alt="image-20221003175031177"></p><p>一个存储单元有多个存储元构成，一个存储体有多个存储单元构成</p><p>存储字：一串二进制数  存储字长:8bit  字节：1Byte=8bit</p><p>n位地址—-&gt;2^n个存储单元（代表行数） 总容量=存储单元的个数×存储字长</p><p><strong>存储芯片的基本构成：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/image-20221003175639654.png" alt="image-20221003175639654"></p><h5 id="1-常见的描述"><a href="#1-常见的描述" class="headerlink" title="1.常见的描述"></a>1.常见的描述</h5><p>8×8位的存储芯片 ：</p><p>8K×8 位 即 2^13^×8bit</p><p>8K×1位   即2^13^ ×1bit</p><p>64K×16位 即2^16^ ×16bit</p><p>K：2^10^   M:2^20^  G : 2^30^  T : 2^40^  </p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/image-20221003181617497.png" alt="image-20221003181617497"></p><ul><li>存储矩阵：有大量相同的位存储单元阵列构成</li><li>译码驱动：将来自地址总线的地址信号翻译对应的存储单元的选通信号，该信号在读写电路的配合下完成对被选中单元的读/写操作。</li><li>读写电路：包括读出放大器和写入电路，用来完成读写操作</li><li>读写控制线：决定芯片进行读/写操作</li><li>片选线：确定那个存储芯片被选中。可用于容量扩充（开关 0 /1） </li><li>地址线：是单向输入的，其位数与存储字的个数有关（决定要操作的数据的地址）</li><li>数据线：是双向的，其位数与读写或写入的数据位数有关。</li><li>数据线数和地址线数共同的反映了存储芯片容量的大小。（确定存储器的容量）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/image-20221003194424078.png" alt="image-20221003194424078"></p><blockquote><p>DRAM的刷新</p></blockquote><p>刷新周期为2ms</p><p>每次刷新多少存储单元？以行为单位，每次刷新一行存储单元</p><p>使用行列地址 可以大幅度的减少选通线的数量；</p><p>如何刷新？ 有硬件支持，读出一行的信息后重新写入占用一个读写周期</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/image-20221003195412025.png" alt="image-20221003195412025"></p><p>RAM:易失去性存储器</p><p>ROM:只读存储器</p><blockquote><p>存储器的分类</p></blockquote><p>1.磁表面存储器：磁盘（直接存取：非易失性）、磁带（顺序存取：访问速度慢）</p><p>2.磁芯存储器</p><p>3.半导体存储器（ROM、DRAM【破坏性读出】 随机存取）（存取时间与位置无关）</p><p>4.光存储器</p><p>按照不同的特性分：存取方式和信息的可保存性</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/image-20221005102304041.png" alt=""></p><blockquote><p>存储器的性能指标</p></blockquote><p>1.存储容量：存储字数×字长（如1M×8位）</p><p>2.单位成本：每位价格=总成本/总容量</p><p>3.存储速度：数据的传输率=数据的宽度/存储周期</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/image-20221005103458468.png" alt="image-20221005103458468"></p><blockquote><p>存储器的层次化结构</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/image-20221005103643497.png" alt="image-20221005103643497"></p><h3 id="主存与CPU的链接"><a href="#主存与CPU的链接" class="headerlink" title="主存与CPU的链接"></a>主存与CPU的链接</h3><blockquote><p>主存储器容量的扩展-译码器</p></blockquote><p>线选法—&gt;n个片选信号：电路简单：地址空间不连续</p><p>译码片选法—-&gt;2^n^ 个片选信号 :电路复杂：地址空间可连续，可以增加逻辑设计</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/image-20221005115954352.png" alt="image-20221005115954352"></p><blockquote><p>流水线：</p></blockquote><p>微观（计算题）</p><p>模块数m=4，存储周期为T，字长为W，数据总线宽度为W，总线的传输周期为r，连续存取n个字，求交叉存储器的宽度。</p><p>有m个存储体，存储周期为T，字长为w每隔r时间启动下一个存储体，连续存取n个字，求存储器的存取速率。</p><p>连续存取n个字耗时=T+(n-1)r        m&gt;=T/r</p><p>带宽=n×W/（T+（n-1）r)  </p><p>当n较大时，带宽—-&gt;W/r 相当于m个存储体并行工作，对比单个存储体的带宽：W/T</p><p>宏观（概念题）</p><p>一个存储周期内，交叉存储器可以提供数据量为单个模块的m倍</p><p>补充：可以并行工作如总线宽度为mW时可以同时取出长度为mW的数据</p><blockquote><p>高速缓冲存储器</p></blockquote><p>提高存储器的工作速度：如m个模块组成的低位交叉编址存储器，可以将带宽提升为m倍。</p><p>优化后速度与CPU的差距依然很大—&gt;更高速的存储单元设计—-&gt;存储器价格高容量小和程序访问的局部性原理——&gt;存储体系的改善”Cache-主存“层次</p><blockquote><p>局部性原理</p></blockquote><p>空间局部性：在最近的未来要使用到的信息（指令和数据），很可能与现在正在使用的信息在存储空间上是临近的</p><p>时间局部性：在最近的未来要使用到的信息，很可能是现在正在使用的信息</p><blockquote><p>性能分析</p></blockquote><p>命中率H：CPU欲访问的信息已在Cache中的比率</p><p>设一个程序执行期间，Cache的总命中次数为N~c~ 访问主存的总次数为N~m~ 则$\frac {N_c} {N_c+N_m}$    </p><p>缺失率M=1-H </p><p>设t~c~ 为命中时的Cache访问时间，t~m~ 为未命中时的访问时间则：Cache—主存系统的平均访问时间T~a~ 为</p><p>T~a~ =Ht~c~ +(1-H)t~m~ </p><blockquote><p>Cache的基本工作原理</p></blockquote><p>主存中快放到Cache中的位置</p><ul><li>空位随意放，全相联映射（主存块地址+字块内地址）</li><li>对号入座（主存字块标记+Cache字块地址+字块内地址）</li><li>按号分组，组内随意放：组相联映射（主存字块标记+组地址+字块内地址）</li></ul><blockquote><p>高速缓冲</p></blockquote><p>替换算法：</p><ul><li>随机算法</li></ul><p>随机地确定替换Cache块、。他的实现比较简单，但没有依据程序访问的局部性原理，故可能命中率较低</p><ul><li>先进先出算法</li></ul><p>选择最早调入的进行替换。它比较容易实现，但是没有根据程序访问的局部性原理，可能会把一些需要经常使用的程序块（如循环程序）也作为最早进入Cache的块替换掉</p><ul><li>近期最少使用的算法</li></ul><p>依据程序访问的局部性原理选择近期内长久未访问过的存储行作为替换行，平均命中率要比先进先出要高，是一个堆栈类的算法。他的算法对每行设置一个计数器，Cache每命中一次，命中行计数器清零，而其他的各行计数器均加1，需要替换时比较个特定的行计数值，将计数值最大的行换出</p><ul><li>最不经常使用算法</li></ul><p>将一段时间内被访问次数最少的存储行换出，每行也设置一个计数器，新建立后从0开始计数，，每访问一次，被访问的行计数器加1，需要替换时比较个特定行的计数值，将计数值最小的行换出。</p><blockquote><p>存储系统</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/image-20221005160439585.png" alt="image-20221005160439585"></p><blockquote><p>提高存储系统的容量</p></blockquote><p>1.地址转换</p><p>2.虚拟存储器的访问过程</p><p>虚拟存储器是一个逻辑模型</p><p>功能：用户给出一个地址，叫做虚拟地址或者逻辑地址，虚拟存储器要给出该地址对应的数据</p><p>实现：有辅助硬件将虚地址映射到主存当中的某个单元，主存单元地址称为实地址或者物理地址</p><p>辅存地址：磁盘号+盘面号+磁道号+扇区号</p><blockquote><p>页式虚拟存储</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/image-20221005163439651.png" alt="image-20221005163439651"></p><blockquote><p>段式虚拟存储器</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/image-20221005163651743.png" alt="image-20221005163651743"></p><blockquote><p>段页式虚拟存储</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/image-20221005163752969.png" alt="image-20221005163752969"></p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/image-20221005164040889.png" alt="image-20221005164040889"></p>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/2022/09/26/JavaWeb%E5%AD%A6%E4%B9%A0/JavaScript/"/>
      <url>/2022/09/26/JavaWeb%E5%AD%A6%E4%B9%A0/JavaScript/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p><strong>今日目标</strong></p><blockquote><ul><li>掌握 JavaScript 的基础语法</li><li>掌握 JavaScript 的常用对象（Array、String）</li><li>能根据需求灵活运用定时器及通过 js 代码进行页面跳转</li><li>能通过DOM 对象对标签进行常规操作</li><li>掌握常用的事件</li><li>能独立完成表单校验案例</li></ul></blockquote><h2 id="1，JavaScript简介"><a href="#1，JavaScript简介" class="headerlink" title="1，JavaScript简介"></a>1，JavaScript简介</h2><p>==JavaScript 是一门跨平台、面向对象的脚本语言==，而Java语言也是跨平台的、面向对象的语言，只不过Java是编译语言，是需要编译成字节码文件才能运行的；JavaScript是脚本语言，不需要编译，由浏览器直接解析并执行。</p><p>JavaScript 是用来控制网页行为的，它能使网页可交互；那么它可以做什么呢？如改变页面内容、修改指定元素的属性值、对表单进行校验等，下面是这些功能的效果展示：</p><ul><li><p><strong>改变页面内容</strong></p><p><img src="assets/image-20210814173417834.png" alt="image-20210814173417834" style="zoom:80%;" /></p><p>当我点击上面左图的 <code>点击我</code> 按钮，按钮上面的文本就改为上面右图内容，这就是js 改变页面内容的功能。</p></li><li><p><strong>修改指定元素的属性值</strong></p><p><img src="assets/image-20210814173719505.png" alt="image-20210814173719505" style="zoom:70%;" /></p><p>当我们点击上图的 <code>开灯</code> 按钮，效果就是上面右图效果；当我点击 <code>关灯</code> 按钮，效果就是上面左图效果。其他这个功能中有两张灯泡的图片（使用img标签进行展示），通过修改 img 标签的 src 属性值改变展示的图片来实现。</p></li><li><p><strong>对表单进行校验</strong></p><p><img src="assets/image-20210814174242688.png" alt="image-20210814174242688" style="zoom:70%;" /></p><p>在上面左图的输入框输入用户名，如果输入的用户名是不满足规则的就展示右图(上) 的效果；如果输入的用户名是满足规则的就展示右图(下) 的效果。</p></li></ul><p>JavaScript 和 Java 是完全不同的语言，不论是概念还是设计，只是名字比较像而已。但是==基础语法类似==，所以我们有java的学习经验，再学习JavaScript 语言就相对比较容易些。</p><p>JavaScript（简称：JS） 在 1995 年由 Brendan Eich 发明，并于 1997 年成为一部 ECMA 标准。ECMA 规定了一套标准 就叫 <code>ECMAScript</code> ，所有的客户端校验语言必须遵守这个标准，当然 JavaScript 也遵守了这个标准。ECMAScript 6 (简称ES6) 是最新的 JavaScript 版本（发布于 2015 年)，我们的课程就是基于最新的 <code>ES6</code> 进行讲解。</p><h2 id="2，JavaScript引入方式"><a href="#2，JavaScript引入方式" class="headerlink" title="2，JavaScript引入方式"></a>2，JavaScript引入方式</h2><p>JavaScript 引入方式就是 HTML 和 JavaScript 的结合方式。JavaScript引入方式有两种：</p><ul><li>内部脚本：将 JS代码定义在HTML页面中</li><li>外部脚本：将 JS代码定义在外部 JS文件中，然后引入到 HTML页面中</li></ul><h3 id="2-1-内部脚本"><a href="#2-1-内部脚本" class="headerlink" title="2.1  内部脚本"></a>2.1  内部脚本</h3><p>在 HTML 中，JavaScript 代码必须位于 <code>&lt;script&gt;</code> 与 <code>&lt;/script&gt;</code> 标签之间</p><p><strong>代码如下：</strong></p><p><code>alert(数据)</code> 是 JavaScript 的一个方法，作用是将参数数据以浏览器弹框的形式输出出来。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hello js1&quot;</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>效果如下：</strong></p><p><img src="assets/image-20210814181419691.png" alt="image-20210814181419691" style="zoom:70%;" /></p><p>从结果可以看到 js 代码已经执行了。</p><blockquote><p>==提示：==</p><ul><li><p>在 HTML 文档中可以在任意地方，放置任意数量的<script>标签。如下图</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hello js1&quot;</span>);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hello js1&quot;</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hello js1&quot;</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>一般把脚本置于 <body> 元素的底部，可改善显示速度</p><p>因为浏览器在加载页面的时候会从上往下进行加载并解析。 我们应该让用户看到页面内容，然后再展示动态的效果。</p></li></ul></blockquote><h3 id="2-2-外部脚本"><a href="#2-2-外部脚本" class="headerlink" title="2.2  外部脚本"></a>2.2  外部脚本</h3><p><strong>第一步：定义外部 js 文件。如定义名为 demo.js的文件</strong></p><p>项目结构如下：</p><p><img src="assets/image-20210814182345236.png" alt="image-20210814182345236" style="zoom:80%;" /></p><p>demo.js 文件内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hello js&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>第二步：在页面中引入外部的js文件</strong></p><p>在页面使用 <code>script</code> 标签中使用 <code>src</code> 属性指定 js 文件的 URL 路径。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/demo.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>==注意：==</p><ul><li><p>外部脚本不能包含 <code>&lt;script&gt;</code> 标签</p><p>在js文件中直接写 js 代码即可，不要在 js文件 中写 <code>script</code> 标签</p></li><li><p><code>&lt;script&gt;</code> 标签不能自闭合</p><p>在页面中引入外部js文件时，不能写成 <code>&lt;script src=&quot;../js/demo.js&quot; /&gt;</code>。</p></li></ul></blockquote><h2 id="3，JavaScript基础语法"><a href="#3，JavaScript基础语法" class="headerlink" title="3，JavaScript基础语法"></a>3，JavaScript基础语法</h2><h3 id="3-1-书写语法"><a href="#3-1-书写语法" class="headerlink" title="3.1  书写语法"></a>3.1  书写语法</h3><ul><li><p>区分大小写：与 Java 一样，变量名、函数名以及其他一切东西都是区分大小写的</p></li><li><p>每行结尾的分号可有可无</p><p>如果一行上写多个语句时，必须加分号用来区分多个语句。</p></li><li><p>注释</p><ul><li>单行注释：// 注释内容</li><li>多行注释：/<em> 注释内容 </em>/</li></ul><blockquote><p>注意：JavaScript 没有文档注释</p></blockquote></li><li><p>大括号表示代码块</p><p>下面语句大家肯定能看懂，和 java 一样 大括号表示代码块。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (count == <span class="hljs-number">3</span>) &#123; <br>   <span class="hljs-title function_">alert</span>(count); <br>&#125; <br></code></pre></td></tr></table></figure></li></ul><h3 id="3-2-输出语句"><a href="#3-2-输出语句" class="headerlink" title="3.2  输出语句"></a>3.2  输出语句</h3><p>js 可以通过以下方式进行内容的输出，只不过不同的语句输出到的位置不同</p><ul><li><p><strong>使用 window.alert() 写入警告框</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hello js&quot;</span>);<span class="hljs-comment">//写入警告框</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面代码通过浏览器打开，我们可以看到如下图弹框效果</p><p><img src="assets/image-20210814181419691.png" alt="image-20210814181419691" style="zoom:70%;" /></p></li><li><p><strong>使用 document.write() 写入 HTML 输出</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;hello js 2~&quot;</span>);<span class="hljs-comment">//写入html页面</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面代码通过浏览器打开，我们可以在页面上看到 <code>document.write(内容)</code> 输出的内容</p><p><img src="assets/image-20210814190302845.png" alt="image-20210814190302845" style="zoom:80%;" /></p></li><li><p><strong>使用 console.log() 写入浏览器控制台</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hello js 3&quot;</span>);<span class="hljs-comment">//写入浏览器的控制台</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面代码通过浏览器打开，我们可以在不能页面上看到  <code>console.log(内容)</code> 输出的内容，它是输出在控制台了，而怎么在控制台查看输出的内容呢？在浏览器界面按 <code>F12</code> 就可以看到下图的控制台</p><p><img src="assets/image-20210814190906202.png" alt="image-20210814190906202"></p></li></ul><h3 id="3-3-变量"><a href="#3-3-变量" class="headerlink" title="3.3  变量"></a>3.3  变量</h3><p>JavaScript 中用 var 关键字（variable 的缩写）来声明变量。格式 <code>var 变量名 = 数据值;</code>。而在JavaScript 是一门弱类型语言，变量==可以存放不同类型的值==；如下在定义变量时赋值为数字数据，还可以将变量的值改为字符串类型的数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> test = <span class="hljs-number">20</span>;<br>test = <span class="hljs-string">&quot;张三&quot;</span>;<br></code></pre></td></tr></table></figure><p>js 中的变量名命名也有如下规则，和java语言基本都相同</p><ul><li>组成字符可以是任何字母、数字、下划线（_）或美元符号（$）</li><li>数字不能开头</li><li>建议使用驼峰命名</li></ul><p>JavaScript 中 <code>var</code> 关键字有点特殊，有以下地方和其他语言不一样</p><ul><li><p>作用域：全局变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-keyword">var</span> age = <span class="hljs-number">20</span>;<br>&#125;<br><span class="hljs-title function_">alert</span>(age);  <span class="hljs-comment">// 在代码块中定义的age 变量，在代码块外边还可以使用</span><br></code></pre></td></tr></table></figure></li><li><p>变量可以重复定义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-keyword">var</span> age = <span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">var</span> age = <span class="hljs-number">30</span>;<span class="hljs-comment">//JavaScript 会用 30 将之前 age 变量的 20 替换掉</span><br>&#125;<br><span class="hljs-title function_">alert</span>(age); <span class="hljs-comment">//打印的结果是 30</span><br></code></pre></td></tr></table></figure></li></ul><p>针对如上的问题，==ECMAScript 6 新增了 <code>let</code>关键字来定义变量。==它的用法类似于 <code>var</code>，但是所声明的变量，只在 <code>let</code> 关键字所在的代码块内有效，且不允许重复声明。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-keyword">let</span> age = <span class="hljs-number">20</span>;<br>&#125;<br><span class="hljs-title function_">alert</span>(age); <br></code></pre></td></tr></table></figure><p>运行上面代码，浏览器并没有弹框输出结果，说明这段代码是有问题的。通过 <code>F12</code> 打开开发者模式可以看到如下错误信息</p><p><img src="assets/image-20210815170848426.png" alt="image-20210815170848426" style="zoom:80%;" /></p><p>而如果在代码块中定义两个同名的变量，IDEA 开发工具就直接报错了</p><blockquote><p><img src="assets/image-20210815170952829.png" alt="image-20210815170952829" style="zoom:80%;" /></p></blockquote><p>==ECMAScript 6 新增了 const关键字，用来声明一个只读的常量。一旦声明，常量的值就不能改变。== 通过下面的代码看一下常用的特点就可以了</p><blockquote><p><img src="assets/image-20210815171128095.png" alt="image-20210815171128095" style="zoom:80%;" /></p></blockquote><p>我们可以看到给 PI 这个常量重新赋值时报错了。</p><h3 id="3-4-数据类型"><a href="#3-4-数据类型" class="headerlink" title="3.4  数据类型"></a>3.4  数据类型</h3><p>JavaScript 中提供了两类数据类型：原始类型 和 引用类型。</p><blockquote><p>使用 typeof 运算符可以获取数据类型</p><p><code>alert(typeof age);</code> 以弹框的形式将 age 变量的数据类型输出</p></blockquote><p>原始数据类型：</p><ul><li><p><strong>number</strong>：数字（整数、小数、NaN(Not a Number)）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> age = <span class="hljs-number">20</span>;<br><span class="hljs-keyword">var</span> price = <span class="hljs-number">99.8</span>;<br><br><span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> age); <span class="hljs-comment">// 结果是 ： number</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> price);<span class="hljs-comment">// 结果是 ： number</span><br></code></pre></td></tr></table></figure><blockquote><p>==注意：== NaN是一个特殊的number类型的值，后面用到再说</p></blockquote></li><li><p><strong>string</strong>：字符、字符串，单双引皆可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> ch = <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;张三&#x27;</span>; <br><span class="hljs-keyword">var</span> addr = <span class="hljs-string">&quot;北京&quot;</span>;<br><br><span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> ch); <span class="hljs-comment">//结果是  string</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> name); <span class="hljs-comment">//结果是  string</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> addr); <span class="hljs-comment">//结果是  string</span><br></code></pre></td></tr></table></figure><blockquote><p>==注意：==在 js 中 双引号和单引号都表示字符串类型的数据</p></blockquote></li><li><p><strong>boolean</strong>：布尔。true，false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> flag = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">var</span> flag2 = <span class="hljs-literal">false</span>;<br><br><span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> flag); <span class="hljs-comment">//结果是 boolean</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> flag2); <span class="hljs-comment">//结果是 boolean</span><br></code></pre></td></tr></table></figure></li><li><p><strong>null</strong>：对象为空</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = <span class="hljs-literal">null</span>;<br><br><span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> obj);<span class="hljs-comment">//结果是 object</span><br></code></pre></td></tr></table></figure><p>为什么打印上面的 obj 变量的数据类型，结果是object；这个官方给出了解释，下面是从官方文档截的图</p><p><img src="assets/image-20210815173003408.png" alt="image-20210815173003408" style="zoom:80%;" /></p></li><li><p><strong>undefined</strong>：当声明的变量未初始化时，该变量的默认值是 undefined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a ;<br><span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> a); <span class="hljs-comment">//结果是 undefined</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="3-5-运算符"><a href="#3-5-运算符" class="headerlink" title="3.5  运算符"></a>3.5  运算符</h3><p>JavaScript 提供了如下的运算符。大部分和 Java语言 都是一样的，不同的是 JS 关系运算符中的 <code>==</code> 和 <code>===</code>，一会我们只演示这两个的区别，其他运算符将不做演示</p><ul><li><p>一元运算符：++，—</p></li><li><p>算术运算符：+，-，*，/，%</p></li><li><p>赋值运算符：=，+=，-=…</p></li><li><p>关系运算符：&gt;，&lt;，&gt;=，&lt;=，!=，\==，===…</p></li><li><p>逻辑运算符：&amp;&amp;，||，!</p></li><li><p>三元运算符：条件表达式 ? true_value : false_value </p></li></ul><h4 id="3-5-1-和-区别"><a href="#3-5-1-和-区别" class="headerlink" title="3.5.1  \==和===区别"></a>3.5.1  \==和===区别</h4><p><strong>概述:</strong></p><ul><li><p>==：</p><ol><li><p>判断类型是否一样，如果不一样，则进行类型转换</p></li><li><p>再去比较其值</p></li></ol></li><li><p>===：js 中的全等于</p><ol><li>判断类型是否一样，如果不一样，直接返回false</li><li>再去比较其值</li></ol></li></ul><p><strong>代码：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> age1 = <span class="hljs-number">20</span>;<br><span class="hljs-keyword">var</span> age2 = <span class="hljs-string">&quot;20&quot;</span>;<br><br><span class="hljs-title function_">alert</span>(age1 == age2);<span class="hljs-comment">// true</span><br><span class="hljs-title function_">alert</span>(age1 === age2);<span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h4 id="3-5-2-类型转换"><a href="#3-5-2-类型转换" class="headerlink" title="3.5.2  类型转换"></a>3.5.2  类型转换</h4><p>上述讲解 <code>==</code> 运算符时，发现会进行类型转换，所以接下来我们来详细的讲解一下 JavaScript 中的类型转换。</p><ul><li><p>其他类型转为number</p><ul><li><p>string 转换为 number 类型：按照字符串的字面值，转为数字。如果字面值不是数字，则转为NaN</p><p>将 string 转换为 number 有两种方式：</p><ul><li><p>使用 <code>+</code> 正号运算符：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = +<span class="hljs-string">&quot;20&quot;</span>;<br><span class="hljs-title function_">alert</span>(str + <span class="hljs-number">1</span>) <span class="hljs-comment">//21</span><br></code></pre></td></tr></table></figure></li><li><p>使用 <code>parseInt()</code> 函数(方法)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;20&quot;</span>;<br><span class="hljs-title function_">alert</span>(<span class="hljs-built_in">parseInt</span>(str) + <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure></li></ul><blockquote><p>==建议使用 <code>parseInt()</code> 函数进行转换。==</p></blockquote></li><li><p>boolean 转换为 number 类型：true 转为1，false转为0</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> flag = +<span class="hljs-literal">false</span>;<br><span class="hljs-title function_">alert</span>(flag); <span class="hljs-comment">// 0</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>其他类型转为boolean</p><ul><li>number 类型转换为 boolean 类型：0和NaN转为false，其他的数字转为true</li><li>string 类型转换为 boolean 类型：空字符串转为false，其他的字符串转为true</li><li>null类型转换为 boolean 类型是 false</li><li>undefined 转换为 boolean 类型是 false</li></ul><p><strong>代码如下：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// var flag = 3;</span><br><span class="hljs-comment">// var flag = &quot;&quot;;</span><br><span class="hljs-keyword">var</span> flag = <span class="hljs-literal">undefined</span>;<br><br><span class="hljs-keyword">if</span>(flag)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;转为true&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;转为false&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><strong>使用场景：</strong></p><p>在 Java 中使用字符串前，一般都会先判断字符串不是null，并且不是空字符才会做其他的一些操作，JavaScript也有类型的操作，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abc&quot;</span>;<br><br><span class="hljs-comment">//健壮性判断</span><br><span class="hljs-keyword">if</span>(str != <span class="hljs-literal">null</span> &amp;&amp; str.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;转为true&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;转为false&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>但是由于 JavaScript 会自动进行类型转换，所以上述的判断可以进行简化，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abc&quot;</span>;<br><br><span class="hljs-comment">//健壮性判断</span><br><span class="hljs-keyword">if</span>(str)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;转为true&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;转为false&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-6-流程控制语句"><a href="#3-6-流程控制语句" class="headerlink" title="3.6  流程控制语句"></a>3.6  流程控制语句</h3><p>JavaScript 中提供了和 Java 一样的流程控制语句，如下</p><ul><li>if </li><li>switch</li><li>for</li><li>while</li><li>dowhile</li></ul><h4 id="3-6-1-if-语句"><a href="#3-6-1-if-语句" class="headerlink" title="3.6.1  if 语句"></a>3.6.1  if 语句</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> count = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">if</span> (count == <span class="hljs-number">3</span>) &#123;<br>    <span class="hljs-title function_">alert</span>(count);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-6-2-switch-语句"><a href="#3-6-2-switch-语句" class="headerlink" title="3.6.2  switch 语句"></a>3.6.2  switch 语句</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> num = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">switch</span> (num) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;星期一&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;星期二&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;星期三&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;星期四&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;星期五&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;星期六&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;星期日&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-attr">default</span>:<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;输入的星期有误&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-6-3-for-循环语句"><a href="#3-6-3-for-循环语句" class="headerlink" title="3.6.3  for 循环语句"></a>3.6.3  for 循环语句</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123; <span class="hljs-comment">//建议for循环小括号中定义的变量使用let</span><br>    sum += i;<br>&#125;<br><span class="hljs-title function_">alert</span>(sum);<br></code></pre></td></tr></table></figure><h4 id="3-6-4-while-循环语句"><a href="#3-6-4-while-循环语句" class="headerlink" title="3.6.4  while 循环语句"></a>3.6.4  while 循环语句</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (i &lt;= <span class="hljs-number">100</span>) &#123;<br>    sum += i;<br>    i++;<br>&#125;<br><span class="hljs-title function_">alert</span>(sum);<br></code></pre></td></tr></table></figure><h4 id="3-6-5-dowhile-循环语句"><a href="#3-6-5-dowhile-循环语句" class="headerlink" title="3.6.5  dowhile 循环语句"></a>3.6.5  dowhile 循环语句</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">do</span> &#123;<br>    sum += i;<br>    i++;<br>&#125;<br><span class="hljs-keyword">while</span> (i &lt;= <span class="hljs-number">100</span>);<br><span class="hljs-title function_">alert</span>(sum);<br></code></pre></td></tr></table></figure><h3 id="3-7-函数"><a href="#3-7-函数" class="headerlink" title="3.7  函数"></a>3.7  函数</h3><p>函数（就是Java中的方法）是被设计为执行特定任务的代码块；JavaScript 函数通过 function 关键词进行定义。</p><h4 id="3-7-1-定义格式"><a href="#3-7-1-定义格式" class="headerlink" title="3.7.1  定义格式"></a>3.7.1  定义格式</h4><p>函数定义格式有两种：</p><ul><li><p>方式1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> 函数名(参数<span class="hljs-number">1</span>,参数<span class="hljs-number">2.</span>.)&#123;<br>    要执行的代码<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>方式2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> 函数名 = <span class="hljs-keyword">function</span> (<span class="hljs-params">参数列表</span>)&#123;<br>    要执行的代码<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><blockquote><p>==注意：==</p><ul><li><p>形式参数不需要类型。因为JavaScript是弱类型语言</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b</span>)&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述函数的参数 a 和 b 不需要定义数据类型，因为在每个参数前加上 var 也没有任何意义。</p></li><li><p>返回值也不需要定义类型，可以在函数内部直接使用return返回即可</p></li></ul></blockquote><h4 id="3-7-2-函数调用"><a href="#3-7-2-函数调用" class="headerlink" title="3.7.2  函数调用"></a>3.7.2  函数调用</h4><p>函数调用函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">函数名称(实际参数列表);<br></code></pre></td></tr></table></figure><p>eg：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> result = <span class="hljs-title function_">add</span>(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>);<br></code></pre></td></tr></table></figure><blockquote><p>==注意：==</p><ul><li><p>JS中，函数调用可以传递任意个数参数</p></li><li><p>例如  <code>let result = add(1,2,3);</code> </p><p>它是将数据 1 传递给了变量a，将数据 2 传递给了变量 b，而数据 3 没有变量接收。</p></li></ul></blockquote><h2 id="4，JavaScript常用对象"><a href="#4，JavaScript常用对象" class="headerlink" title="4，JavaScript常用对象"></a>4，JavaScript常用对象</h2><p>JavaScript 提供了很多对象供使用者来使用。这些对象总共分类三类</p><ul><li><p>基本对象</p><p><img src="assets/image-20210815183147297.png" alt="image-20210815183147297" style="zoom:80%;" /></p></li><li><p>BOM 对象</p><p><img src="assets/image-20210815183207660.png" alt="image-20210815183207660" style="zoom:80%;" /></p></li><li><p>DOM对象</p><p>DOM 中的对象就比较多了，下图只是截取部分</p><p><img src="assets/image-20210815183225718.png" alt="image-20210815183225718" style="zoom:80%;" /></p></li></ul><p>这小节我们先学习基本对象，而我们先学习 <code>Array</code> 数组对象和 <code>String</code> 字符串对象。</p><h3 id="4-1-Array对象"><a href="#4-1-Array对象" class="headerlink" title="4.1  Array对象"></a>4.1  Array对象</h3><p>JavaScript Array对象用于定义数组</p><h4 id="4-1-1-定义格式"><a href="#4-1-1-定义格式" class="headerlink" title="4.1.1  定义格式"></a>4.1.1  定义格式</h4><p>数组的定义格式有两种：</p><ul><li><p>方式1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> 变量名 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(元素列表); <br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>); <span class="hljs-comment">//1,2,3 是存储在数组中的数据（元素）</span><br></code></pre></td></tr></table></figure></li><li><p>方式2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> 变量名 = [元素列表];<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]; <span class="hljs-comment">//1,2,3 是存储在数组中的数据（元素）</span><br></code></pre></td></tr></table></figure><p>==注意：Java中的数组静态初始化使用的是{}定义，而 JavaScript 中使用的是 [] 定义==</p></li></ul><h4 id="4-1-2-元素访问"><a href="#4-1-2-元素访问" class="headerlink" title="4.1.2  元素访问"></a>4.1.2  元素访问</h4><p>访问数组中的元素和 Java 语言的一样，格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">arr[索引] = 值;<br></code></pre></td></tr></table></figure><p><strong>代码演示：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-comment">// 方式一</span><br><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br><span class="hljs-comment">// alert(arr);</span><br><br><span class="hljs-comment">// 方式二</span><br><span class="hljs-keyword">var</span> arr2 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-comment">//alert(arr2);</span><br><br><span class="hljs-comment">// 访问</span><br>arr2[<span class="hljs-number">0</span>] = <span class="hljs-number">10</span>;<br><span class="hljs-title function_">alert</span>(arr2)<br></code></pre></td></tr></table></figure><h4 id="4-1-3-特点"><a href="#4-1-3-特点" class="headerlink" title="4.1.3  特点"></a>4.1.3  特点</h4><p>JavaScript 中的数组相当于 Java 中集合。数组的长度是可以变化的，而 JavaScript 是弱类型，所以可以存储任意的类型的数据。</p><p>例如如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 变长</span><br><span class="hljs-keyword">var</span> arr3 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br>arr3[<span class="hljs-number">10</span>] = <span class="hljs-number">10</span>;<br><span class="hljs-title function_">alert</span>(arr3[<span class="hljs-number">10</span>]); <span class="hljs-comment">// 10</span><br><span class="hljs-title function_">alert</span>(arr3[<span class="hljs-number">9</span>]);  <span class="hljs-comment">//undefined</span><br></code></pre></td></tr></table></figure><p>上面代码在定义数组中给了三个元素，又给索引是 10 的位置添加了数据 10，那么 <code>索引3</code> 到 <code>索引9</code> 位置的元素是什么呢？我们之前就介绍了，在 JavaScript 中没有赋值的话，默认就是 <code>undefined</code>。</p><p>如果给 <code>arr3</code> 数组添加字符串的数据，也是可以添加成功的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">arr3[<span class="hljs-number">5</span>] = <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-title function_">alert</span>(arr3[<span class="hljs-number">5</span>]); <span class="hljs-comment">// hello</span><br></code></pre></td></tr></table></figure><h4 id="4-1-4-属性"><a href="#4-1-4-属性" class="headerlink" title="4.1.4  属性"></a>4.1.4  属性</h4><p>Array 对象提供了很多属性，如下图是官方文档截取的</p><p><img src="assets/image-20210815190319166.png" alt="image-20210815190319166" style="zoom:80%;" /></p><p>而我们只讲解 <code>length</code> 属性，该数组可以动态的获取数组的长度。而有这个属性，我们就可以遍历数组了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-title function_">alert</span>(arr[i]);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-1-5-方法"><a href="#4-1-5-方法" class="headerlink" title="4.1.5  方法"></a>4.1.5  方法</h4><p>Array 对象同样也提供了很多方法，如下图是官方文档截取的</p><p><img src="assets/image-20210815190601340.png" alt="image-20210815190601340" style="zoom:80%;" /></p><p>而我们在课堂中只演示 <code>push</code> 函数和 <code>splice</code> 函数。</p><ul><li><p>push 函数：给数组添加元素，也就是在数组的末尾添加元素</p><p>参数表示要添加的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// push:添加方法</span><br><span class="hljs-keyword">var</span> arr5 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br>arr5.<span class="hljs-title function_">push</span>(<span class="hljs-number">10</span>);<br><span class="hljs-title function_">alert</span>(arr5);  <span class="hljs-comment">//数组的元素是 &#123;1,2,3,10&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>splice 函数：删除元素</p><p>参数1：索引。表示从哪个索引位置删除</p><p>参数2：个数。表示删除几个元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// splice:删除元素</span><br><span class="hljs-keyword">var</span> arr5 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br>arr5.<span class="hljs-title function_">splice</span>(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>); <span class="hljs-comment">//从 0 索引位置开始删除，删除一个元素 </span><br><span class="hljs-title function_">alert</span>(arr5); <span class="hljs-comment">// &#123;2,3&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="4-2-String对象"><a href="#4-2-String对象" class="headerlink" title="4.2  String对象"></a>4.2  String对象</h3><p>String对象的创建方式有两种</p><ul><li><p>方式1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> 变量名 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(s); <br></code></pre></td></tr></table></figure></li><li><p>方式2：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> 变量名 = <span class="hljs-string">&quot;数组&quot;</span>; <br></code></pre></td></tr></table></figure></li></ul><p><strong>属性：</strong></p><p>String对象提供了很多属性，下面给大家列举了一个属性 <code>length</code> ，该属性是用于动态的获取字符串的长度</p><p><img src="assets/image-20210815192504884.png" alt="image-20210815192504884" style="zoom:60%;" /></p><p><strong>函数：</strong></p><p>String对象提供了很多函数（方法），下面给大家列举了两个方法。</p><p><img src="assets/image-20210815192544172.png" alt="image-20210815192544172" style="zoom:70%;" /></p><p>String对象还有一个函数 <code>trim()</code> ，该方法在文档中没有体现，但是所有的浏览器都支持；它是用来去掉字符串两端的空格。</p><p>代码演示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str4 = <span class="hljs-string">&#x27;  abc   &#x27;</span>;<br><span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span> + str4 + <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>上面代码会输出内容 <code>1  abc  1</code>，很明显可以看到 abc 字符串左右两边是有空格的。接下来使用 <code>trim()</code> 函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str4 = <span class="hljs-string">&#x27;  abc   &#x27;</span>;<br><span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span> + str4.<span class="hljs-title function_">trim</span>() + <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>输出的内容是 <code>1abc1</code> 。这就是 <code>trim()</code> 函数的作用。</p><p><code>trim()</code> 函数在以后开发中还是比较常用的，例如下图所示是登陆界面</p><p><img src="assets/image-20210815193420418.png" alt="image-20210815193420418" style="zoom:80%;"/> </p><p>用户在输入用户名和密码时，可能会习惯的输入一些空格，这样在我们后端程序中判断用户名和密码是否正确，结果肯定是失败。所以我们一般都会对用户输入的字符串数据进行去除前后空格的操作。</p><h3 id="4-3-自定义对象"><a href="#4-3-自定义对象" class="headerlink" title="4.3  自定义对象"></a>4.3  自定义对象</h3><p>在 JavaScript 中自定义对象特别简单，下面就是自定义对象的格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> 对象名称 = &#123;<br>    属性名称<span class="hljs-number">1</span>:属性值<span class="hljs-number">1</span>,<br>    属性名称<span class="hljs-number">2</span>:属性值<span class="hljs-number">2</span>,<br>    ...,<br>    函数名称:<span class="hljs-keyword">function</span> (<span class="hljs-params">形参列表</span>)&#123;&#125;,<br>...<br>&#125;;<br></code></pre></td></tr></table></figure><p>调用属性的格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">对象名.属性名<br></code></pre></td></tr></table></figure><p>调用函数的格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">对象名.函数名()<br></code></pre></td></tr></table></figure><p>接下来通过代码演示一下，让大家体验一下 JavaScript 中自定义对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> person = &#123;<br>        name : <span class="hljs-string">&quot;zhangsan&quot;</span>,<br>        age : <span class="hljs-number">23</span>,<br>        <span class="hljs-attr">eat</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;干饭~&quot;</span>);<br>        &#125;<br>    &#125;;<br><br><br><span class="hljs-title function_">alert</span>(person.<span class="hljs-property">name</span>);  <span class="hljs-comment">//zhangsan</span><br><span class="hljs-title function_">alert</span>(person.<span class="hljs-property">age</span>); <span class="hljs-comment">//23</span><br><br>person.<span class="hljs-title function_">eat</span>();  <span class="hljs-comment">//干饭~</span><br></code></pre></td></tr></table></figure><h2 id="5，BOM"><a href="#5，BOM" class="headerlink" title="5，BOM"></a>5，BOM</h2><p>BOM：Browser Object Model 浏览器对象模型。也就是 JavaScript 将浏览器的各个组成部分封装为对象。</p><p>我们要操作浏览器的各个组成部分就可以通过操作 BOM 中的对象来实现。比如：我现在想将浏览器地址栏的地址改为 <code>https://www.itheima.com</code> 就可以通过使用 BOM 中定义的 <code>Location</code> 对象的 <code>href</code> 属性，代码： <code>location.href = &quot;https://itheima.com&quot;;</code> </p><p> BOM 中包含了如下对象：</p><ul><li>Window：浏览器窗口对象</li><li>Navigator：浏览器对象</li><li>Screen：屏幕对象</li><li>History：历史记录对象</li><li>Location：地址栏对象</li></ul><p>下图是 BOM 中的各个对象和浏览器的各个组成部分的对应关系</p><p><img src="assets/image-20210815194911914.png" alt="image-20210815194911914" style="zoom:70%;" /></p><p>BOM 中的 <code>Navigator</code> 对象和 <code>Screen</code> 对象基本不会使用，所以我们的课堂只对 <code>Window</code>、<code>History</code>、<code>Location</code> 对象进行讲解。</p><h3 id="5-1-Window对象"><a href="#5-1-Window对象" class="headerlink" title="5.1  Window对象"></a>5.1  Window对象</h3><p>window 对象是 JavaScript 对浏览器的窗口进行封装的对象。</p><h4 id="5-1-1-获取window对象"><a href="#5-1-1-获取window对象" class="headerlink" title="5.1.1  获取window对象"></a>5.1.1  获取window对象</h4><p>该对象不需要创建直接使用 <code>window</code>，其中 <code>window.</code> 可以省略。比如我们之前使用的 <code>alert()</code> 函数，其实就是 <code>window</code> 对象的函数，在调用是可以写成如下两种</p><ul><li><p>显式使用 <code>window</code> 对象调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>隐式调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">alert(&quot;abc&quot;)<br></code></pre></td></tr></table></figure></li></ul><h4 id="5-1-2-window对象属性"><a href="#5-1-2-window对象属性" class="headerlink" title="5.1.2  window对象属性"></a>5.1.2  window对象属性</h4><p><code>window</code> 对象提供了用于获取其他 BOM 组成对象的属性</p><p><img src="assets/image-20210815200625592.png" alt="image-20210815200625592" style="zoom:80%;" /></p><p>也就是说，我们想使用 <code>Location</code> 对象的话，就可以使用 <code>window</code> 对象获取；写成 <code>window.location</code>，而 <code>window.</code> 可以省略，简化写成 <code>location</code> 来获取 <code>Location</code> 对象。</p><h4 id="5-1-3-window对象函数"><a href="#5-1-3-window对象函数" class="headerlink" title="5.1.3  window对象函数"></a>5.1.3  window对象函数</h4><p><code>window</code> 对象提供了很多函数供我们使用，而很多都不常用；下面给大家列举了一些比较常用的函数</p><p><img src="assets/image-20210815201323329.png" alt="image-20210815201323329" style="zoom:80%;" /></p><blockquote><p><code>setTimeout(function,毫秒值)</code> : 在一定的时间间隔后执行一个function，只执行一次<br><code>setInterval(function,毫秒值)</code> :在一定的时间间隔后执行一个function，循环执行</p></blockquote><p><strong>confirm代码演示：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// confirm()，点击确定按钮，返回true，点击取消按钮，返回false</span><br><span class="hljs-keyword">var</span> flag = <span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;确认删除？&quot;</span>);<br><br><span class="hljs-title function_">alert</span>(flag);<br></code></pre></td></tr></table></figure><p>下图是 <code>confirm()</code> 函数的效果。当我们点击 <code>确定</code> 按钮，<code>flag</code> 变量值记录的就是 <code>true</code> ；当我们点击 <code>取消</code> 按钮，<code>flag</code> 变量值记录的就是 <code>false</code>。</p><p><img src="assets/image-20210815201600493.png" alt="image-20210815201600493" style="zoom:80%;" /></p><p>而以后我们在页面删除数据时候如下图每一条数据后都有 <code>删除</code> 按钮，有可能是用户的一些误操作，所以对于删除操作需要用户进行再次确认，此时就需要用到 <code>confirm()</code> 函数。</p><p><img src="assets/image-20210815202406490.png" alt="image-20210815202406490" style="zoom:70%;" /></p><p><strong>定时器代码演示：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hehe&quot;</span>);<br>&#125;,<span class="hljs-number">3000</span>);<br></code></pre></td></tr></table></figure><p>当我们打开浏览器，3秒后才会弹框输出 <code>hehe</code>，并且只会弹出一次。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hehe&quot;</span>);<br>&#125;,<span class="hljs-number">2000</span>);<br></code></pre></td></tr></table></figure><p>当我们打开浏览器，每隔2秒都会弹框输出 <code>hehe</code>。</p><h4 id="5-1-4-案例"><a href="#5-1-4-案例" class="headerlink" title="5.1.4  案例"></a>5.1.4  案例</h4><p><strong>需求：每隔1秒，灯泡切换一次状态</strong></p><p><img src="assets/image-20210815203345262.png" alt="image-20210815203345262" style="zoom:70%;" /></p><p>需求说明：</p><p>有如下页面效果，实现定时进行开灯、关灯功能</p><p><img src="assets/image-20210815203623739.png" alt="image-20210815203623739" style="zoom:80%;" /></p><p>初始页面环境</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JavaScript演示<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;on()&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;开灯&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myImage&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../imgs/off.gif&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align:center;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;off()&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;关灯&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">on</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;myImage&#x27;</span>).<span class="hljs-property">src</span>=<span class="hljs-string">&#x27;../imgs/on.gif&#x27;</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">off</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;myImage&#x27;</span>).<span class="hljs-property">src</span>=<span class="hljs-string">&#x27;../imgs/off.gif&#x27;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>代码实现：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JavaScript演示<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;on()&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;开灯&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myImage&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../imgs/off.gif&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align:center;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;off()&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;关灯&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">on</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;myImage&#x27;</span>).<span class="hljs-property">src</span>=<span class="hljs-string">&#x27;../imgs/on.gif&#x27;</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">off</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;myImage&#x27;</span>).<span class="hljs-property">src</span>=<span class="hljs-string">&#x27;../imgs/off.gif&#x27;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-comment">//定义一个变量，用来记录灯的状态，偶数是开灯状态，奇数是关灯状态</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> x = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">    <span class="hljs-comment">//使用循环定时器</span></span><br><span class="language-javascript">    <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span>(x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//表示是偶数，开灯状态，调用 on() 函数</span></span><br><span class="language-javascript">            <span class="hljs-title function_">on</span>();</span><br><span class="language-javascript">        &#125;<span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">//表示是奇数，关灯状态，调用 off() 函数</span></span><br><span class="language-javascript">            <span class="hljs-title function_">off</span>();</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        x ++;<span class="hljs-comment">//改变变量的值</span></span><br><span class="language-javascript">    &#125;,<span class="hljs-number">1000</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-2-History对象"><a href="#5-2-History对象" class="headerlink" title="5.2  History对象"></a>5.2  History对象</h3><p>History 对象是 JavaScript 对历史记录进行封装的对象。</p><ul><li><p>History 对象的获取</p><p>使用 window.history获取，其中window. 可以省略</p></li><li><p>History 对象的函数</p><p><img src="assets/image-20210815224826535.png" alt="image-20210815224826535" style="zoom:70%;" /></p><p>这两个函数我们平时在访问其他的一些网站时经常使用对应的效果，如下图</p><p><img src="assets/image-20210815225059114.png" alt="image-20210815225059114" style="zoom:80%;" /></p><p>当我们点击向左的箭头，就跳转到前一个访问的页面，这就是 <code>back()</code> 函数的作用；当我们点击向右的箭头，就跳转到下一个访问的页面，这就是 <code>forward()</code> 函数的作用。</p></li></ul><h3 id="5-3-Location对象"><a href="#5-3-Location对象" class="headerlink" title="5.3  Location对象"></a>5.3  Location对象</h3><p><img src="assets/image-20210815225243560.png" alt="image-20210815225243560" style="zoom:80%;" /></p><p>Location 对象是 JavaScript 对地址栏封装的对象。可以通过操作该对象，跳转到任意页面。</p><h4 id="5-3-1-获取Location对象"><a href="#5-3-1-获取Location对象" class="headerlink" title="5.3.1  获取Location对象"></a>5.3.1  获取Location对象</h4><p>使用 window.location获取，其中window. 可以省略</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.方法();<br>location.方法();<br></code></pre></td></tr></table></figure><h4 id="5-3-2-Location对象属性"><a href="#5-3-2-Location对象属性" class="headerlink" title="5.3.2  Location对象属性"></a>5.3.2  Location对象属性</h4><p>Location对象提供了很对属性。以后常用的只有一个属性 <code>href</code></p><p><img src="assets/image-20210815225707580.png" alt="image-20210815225707580" style="zoom:80%;" /></p><p><strong>代码演示：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;要跳转了&quot;</span>);<br>location.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;https://www.baidu.com&quot;</span>;<br></code></pre></td></tr></table></figure><p>在浏览器首先会弹框显示 <code>要跳转了</code>，当我们点击了 <code>确定</code> 就会跳转到 百度 的首页。</p><h4 id="5-3-3-案例"><a href="#5-3-3-案例" class="headerlink" title="5.3.3  案例"></a>5.3.3  案例</h4><p><strong>需求：3秒跳转到百度首页</strong></p><p><strong>分析：</strong></p><ol><li>3秒跳转，由此可以确定需要使用到定时器，而只跳转一次，所以使用 <code>setTimeOut()</code></li><li>要进行页面跳转，所以需要用到 <code>location</code> 对象的 <code>href</code> 属性实现</li></ol><p><strong>代码实现：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;3秒跳转到首页...&quot;</span>); <br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>    location.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;https://www.baidu.com&quot;</span><br>&#125;,<span class="hljs-number">3000</span>);<br></code></pre></td></tr></table></figure><h2 id="6，DOM"><a href="#6，DOM" class="headerlink" title="6，DOM"></a>6，DOM</h2><h3 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1  概述"></a>6.1  概述</h3><p>DOM：Document Object Model 文档对象模型。也就是 JavaScript 将 HTML 文档的各个组成部分封装为对象。</p><p>DOM 其实我们并不陌生，之前在学习 XML 就接触过，只不过 XML 文档中的标签需要我们写代码解析，而 HTML 文档是浏览器解析。封装的对象分为</p><ul><li>Document：整个文档对象</li><li>Element：元素对象</li><li>Attribute：属性对象</li><li>Text：文本对象</li><li>Comment：注释对象</li></ul><p>如下图，左边是 HTML 文档内容，右边是 DOM 树</p><p><img src="assets/image-20210815231028430.png" alt="image-20210815231028430"></p><p><strong>作用：</strong></p><p>JavaScript 通过 DOM， 就能够对 HTML进行操作了</p><ul><li>改变 HTML 元素的内容</li><li>改变 HTML 元素的样式（CSS）</li><li>对 HTML DOM 事件作出反应</li><li>添加和删除 HTML 元素</li></ul><p><strong>DOM相关概念：</strong></p><p>DOM 是 W3C（万维网联盟）定义了访问 HTML 和 XML 文档的标准。该标准被分为 3 个不同的部分：</p><ol><li><p>核心 DOM：针对任何结构化文档的标准模型。 XML 和 HTML 通用的标准</p><ul><li><p>Document：整个文档对象</p></li><li><p>Element：元素对象</p></li><li><p>Attribute：属性对象</p></li><li><p>Text：文本对象</p></li><li><p>Comment：注释对象</p></li></ul></li><li><p>XML DOM： 针对 XML 文档的标准模型</p></li><li><p>HTML DOM： 针对 HTML 文档的标准模型</p><p>该标准是在核心 DOM 基础上，对 HTML 中的每个标签都封装成了不同的对象</p><ul><li>例如：<code>&lt;img&gt;</code> 标签在浏览器加载到内存中时会被封装成 <code>Image</code> 对象，同时该对象也是 <code>Element</code> 对象。</li><li>例如：<code>&lt;input type=&#39;button&#39;&gt;</code> 标签在浏览器加载到内存中时会被封装成 <code>Button</code> 对象，同时该对象也是 <code>Element</code> 对象。</li></ul></li></ol><h3 id="6-2-获取-Element对象"><a href="#6-2-获取-Element对象" class="headerlink" title="6.2  获取 Element对象"></a>6.2  获取 Element对象</h3><p>HTML 中的 Element 对象可以通过 <code>Document</code> 对象获取，而 <code>Document</code> 对象是通过 <code>window</code> 对象获取。</p><p><code>Document</code> 对象中提供了以下获取 <code>Element</code> 元素对象的函数</p><ul><li><code>getElementById()</code>：根据id属性值获取，返回单个Element对象</li><li><code>getElementsByTagName()</code>：根据标签名称获取，返回Element对象数组</li><li><code>getElementsByName()</code>：根据name属性值获取，返回Element对象数组</li><li><code>getElementsByClassName()</code>：根据class属性值获取，返回Element对象数组</li></ul><p><strong>代码演示：</strong></p><p>下面有提前准备好的页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;light&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../imgs/off.gif&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cls&quot;</span>&gt;</span>传智教育<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cls&quot;</span>&gt;</span>黑马程序员<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>&gt;</span> 电影<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>&gt;</span> 旅游<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>&gt;</span> 游戏<br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//在此处书写js代码</span></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li><p>根据 <code>id</code> 属性值获取上面的 <code>img</code> 元素对象，返回单个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> img = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;light&quot;</span>);<br><span class="hljs-title function_">alert</span>(img);<br></code></pre></td></tr></table></figure><p>结果如下：</p><p><img src="assets/image-20210815233232924.png" alt="image-20210815233232924" style="zoom:80%;" /></p><p>从弹框输出的内容，也可以看出是一个图片元素对象。</p></li><li><p>根据标签名称获取所有的 <code>div</code> 元素对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> divs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;div&quot;</span>);<span class="hljs-comment">// 返回一个数组，数组中存储的是 div 元素对象</span><br><span class="hljs-comment">// alert(divs.length);  //输出 数组的长度</span><br><span class="hljs-comment">//遍历数组</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; divs.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-title function_">alert</span>(divs[i]);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>获取所有的满足 <code>name = &#39;hobby&#39;</code> 条件的元素对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//3. getElementsByName：根据name属性值获取，返回Element对象数组</span><br><span class="hljs-keyword">var</span> hobbys = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByName</span>(<span class="hljs-string">&quot;hobby&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; hobbys.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-title function_">alert</span>(hobbys[i]);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>获取所有的满足 <code>class=&#39;cls&#39;</code> 条件的元素对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//4. getElementsByClassName：根据class属性值获取，返回Element对象数组</span><br><span class="hljs-keyword">var</span> clss = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; clss.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-title function_">alert</span>(clss[i]);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="6-3-HTML-Element对象使用"><a href="#6-3-HTML-Element对象使用" class="headerlink" title="6.3  HTML Element对象使用"></a>6.3  HTML Element对象使用</h3><p>HTML 中的 <code>Element</code> 元素对象有很多，不可能全部记住，以后是根据具体的需求查阅文档使用。</p><p>下面我们通过具体的案例给大家演示文档的查询和对象的使用；下面提前给大家准备好的页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;light&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../imgs/off.gif&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cls&quot;</span>&gt;</span>传智教育<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cls&quot;</span>&gt;</span>黑马程序员<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>&gt;</span> 电影<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>&gt;</span> 旅游<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>&gt;</span> 游戏<br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//在此处写js低吗</span></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>需求：</strong></p><ol><li><p>点亮灯泡</p><p>此案例由于需要改变 <code>img</code> 标签 的图片，所以我们查询文档，下图是查看文档的流程：</p><p><img src="assets/查看文档.png" alt="image-20210815233232924" style="zoom:100%;" /></p><p>代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1，根据 id=&#x27;light&#x27; 获取 img 元素对象</span><br><span class="hljs-keyword">var</span> img = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;light&quot;</span>);<br><span class="hljs-comment">//2，修改 img 对象的 src 属性来改变图片</span><br>img.<span class="hljs-property">src</span> = <span class="hljs-string">&quot;../imgs/on.gif&quot;</span>;<br></code></pre></td></tr></table></figure></li><li><p>将所有的 <code>div</code> 标签的标签体内容替换为 <code>呵呵</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1，获取所有的 div 元素对象</span><br><span class="hljs-keyword">var</span> divs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;div&quot;</span>);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">        style:设置元素css样式</span><br><span class="hljs-comment">        innerHTML：设置元素内容</span><br><span class="hljs-comment">    */</span><br><span class="hljs-comment">//2，遍历数组，获取到每一个 div 元素对象，并修改元素内容</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; divs.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-comment">//divs[i].style.color = &#x27;red&#x27;;</span><br>    divs[i].<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;呵呵&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使所有的复选框呈现被选中的状态</p><p>此案例我们需要看 复选框 元素对象有什么属性或者函数是来操作 复选框的选中状态。下图是文档的查看</p><p><img src="assets/image-20210816000520457.png" alt="image-20210816000520457"></p><p>代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1，获取所有的 复选框 元素对象</span><br><span class="hljs-keyword">var</span> hobbys = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByName</span>(<span class="hljs-string">&quot;hobby&quot;</span>);<br><span class="hljs-comment">//2，遍历数组，通过将 复选框 元素对象的 checked 属性值设置为 true 来改变复选框的选中状态</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; hobbys.<span class="hljs-property">length</span>; i++) &#123;<br>    hobbys[i].<span class="hljs-property">checked</span> = <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="7，事件监听"><a href="#7，事件监听" class="headerlink" title="7，事件监听"></a>7，事件监听</h2><p>要想知道什么是事件监听，首先先聊聊什么是事件？</p><p>HTML 事件是发生在 HTML 元素上的“事情”。比如：页面上的 <code>按钮被点击</code>、<code>鼠标移动到元素之上</code>、<code>按下键盘按键</code> 等都是事件。</p><p>事件监听是JavaScript 可以在事件被侦测到时==执行一段逻辑代码。==例如下图当我们点击 <code>开灯</code> 按钮，就需要通过 js 代码实现替换图片</p><p><img src="assets/image-20210816194143246.png" alt="image-20210816194143246" style="zoom:80%;" /></p><p>再比如下图输入框，当我们输入了用户名 <code>光标离开</code> 输入框，就需要通过 js 代码对输入的内容进行校验，没通过校验就在输入框后提示 <code>用户名格式有误!</code></p><p><img src="assets/image-20210816194333252.png" alt="image-20210816194333252" style="zoom:90%;" /></p><h3 id="7-1-事件绑定"><a href="#7-1-事件绑定" class="headerlink" title="7.1  事件绑定"></a>7.1  事件绑定</h3><p>JavaScript 提供了两种事件绑定方式：</p><ul><li><p>方式一：通过 HTML标签中的事件属性进行绑定</p><p>如下面代码，有一个按钮元素，我们是在该标签上定义 <code>事件属性</code>，在事件属性中绑定函数。<code>onclick</code> 就是 <code>单击事件</code> 的事件属性。<code>onclick=&#39;on（）&#39;</code> 表示该点击事件绑定了一个名为 <code>on()</code> 的函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&#x27;on()’&gt;</span></span><br></code></pre></td></tr></table></figure><p>下面是点击事件绑定的 <code>on()</code> 函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">on</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;我被点了&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>方式二：通过 DOM 元素属性绑定</p><p>如下面代码是按钮标签，在该标签上我们并没有使用 <code>事件属性</code>，绑定事件的操作需要在 js 代码中实现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>下面 js 代码是获取了 <code>id=&#39;btn&#39;</code> 的元素对象，然后将 <code>onclick</code> 作为该对象的属性，并且绑定匿名函数。该函数是在事件触发后自动执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn&quot;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;我被点了&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><strong>代码演示：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--方式1：在下面input标签上添加 onclick 属性，并绑定 on() 函数--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点我&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;on()&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;再点我&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">on</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;我被点了&quot;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      <span class="hljs-comment">//方式2：获取 id=&quot;btn&quot; 元素对象，通过调用 onclick 属性 绑定点击事件</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn&quot;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;我被点了&quot;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="7-2-常见事件"><a href="#7-2-常见事件" class="headerlink" title="7.2  常见事件"></a>7.2  常见事件</h3><p>上面案例中使用到了 <code>onclick</code> 事件属性，那都有哪些事件属性供我们使用呢？下面就给大家列举一些比较常用的事件属性</p><div class="table-container"><table><thead><tr><th>事件属性名</th><th>说明</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标单击事件</td></tr><tr><td>onblur</td><td>元素失去焦点</td></tr><tr><td>onfocus</td><td>元素获得焦点</td></tr><tr><td>onload</td><td>某个页面或图像被完成加载</td></tr><tr><td>onsubmit</td><td>当表单提交时触发该事件</td></tr><tr><td>onmouseover</td><td>鼠标被移到某元素之上</td></tr><tr><td>onmouseout</td><td>鼠标从某元素移开</td></tr></tbody></table></div><ul><li><p><code>onfocus</code> 获得焦点事件。</p><p>如下图，当点击了输入框后，输入框就获得了焦点。而下图示例是当获取焦点后会更改输入框的背景颜色。</p><p><img src="assets/image-20210816214900928.png" alt="image-20210816214900928" style="zoom:80%;" /></p></li><li><p><code>onblur</code> 失去焦点事件。</p><p>如下图，当点击了输入框后，输入框就获得了焦点；再点击页面其他位置，那输入框就失去焦点了。下图示例是将输入的文本转换为大写。</p><p><img src="assets/image-20210816215235969.png" alt="image-20210816215235969" style="zoom:80%;" /></p></li><li><p><code>onmouseout</code> 鼠标移出事件。</p></li><li><p><code>onmouseover</code>  鼠标移入事件。</p><p>如下图，当鼠标移入到 苹果 图片上时，苹果图片变大；当鼠标移出 苹果图片时，苹果图片变小。</p><p><img src="assets/image-20210816220149093.png" alt="image-20210816220149093" style="zoom:70%;" /></p></li><li><p><code>onsubmit</code> 表单提交事件</p><p>如下是带有表单的页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;register&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;#&quot;</span> &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>        <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如上代码的表单，当我们点击 <code>提交</code> 按钮后，表单就会提交，此处默认使用的是 <code>GET</code> 提交方式，会将提交的数据拼接到 URL 后。现需要通过 js 代码实现阻止表单提交的功能，js 代码实现如下：</p><ol><li>获取 <code>form</code> 表单元素对象。</li><li>给 <code>form</code> 表单元素对象绑定 <code>onsubmit</code> 事件，并绑定匿名函数。</li><li>该匿名函数如果返回的是true，提交表单；如果返回的是false，阻止表单提交。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;register&quot;</span>).<span class="hljs-property">onsubmit</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">//onsubmit 返回true，则表单会被提交，返回false，则表单不提交</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="8，表单验证案例"><a href="#8，表单验证案例" class="headerlink" title="8，表单验证案例"></a>8，表单验证案例</h2><h3 id="8-1-需求"><a href="#8-1-需求" class="headerlink" title="8.1  需求"></a>8.1  需求</h3><p><img src="assets/image-20210816225925955.png" alt="image-20210816225925955" style="zoom:60%;" /></p><p>有如下注册页面，对表单进行校验，如果输入的用户名、密码、手机号符合规则，则允许提交；如果不符合规则，则不允许提交。</p><p>完成以下需求：</p><ol><li><p>当输入框失去焦点时，验证输入内容是否符合要求</p></li><li><p>当点击注册按钮时，判断所有输入框的内容是否都符合要求，如果不合符则阻止表单提交</p></li></ol><h3 id="8-2-环境准备"><a href="#8-2-环境准备" class="headerlink" title="8.2  环境准备"></a>8.2  环境准备</h3><p>下面是初始页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>欢迎注册<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../css/register.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-div&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;reg-content&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎注册<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>已有帐号？<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;reg-form&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inputs&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username_err&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;err_msg&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: none&quot;</span>&gt;</span>用户名不太受欢迎<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inputs&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;password_err&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;err_msg&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: none&quot;</span>&gt;</span>密码格式有误<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>手机号<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inputs&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;tel&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tel&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tel_err&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;err_msg&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: none&quot;</span>&gt;</span>手机号格式有误<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;buttons&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;注 册&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;reg_btn&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">br</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;clear&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="8-3-验证输入框"><a href="#8-3-验证输入框" class="headerlink" title="8.3  验证输入框"></a>8.3  验证输入框</h3><p>此小节完成如下功能：</p><ul><li>校验用户名。当用户名输入框失去焦点时，判断输入的内容是否符合 <code>长度是 6-12 位</code> 规则，不符合使 <code>id=&#39;username_err&#39;</code> 的span标签显示出来，给出用户提示。</li><li>校验密码。当密码输入框失去焦点时，判断输入的内容是否符合 <code>长度是 6-12 位</code> 规则，不符合使 <code>id=&#39;password_err&#39;</code> 的span标签显示出来，给出用户提示。</li><li>校验手机号。当手机号输入框失去焦点时，判断输入的内容是否符合 <code>长度是 11 位</code> 规则，不符合使 <code>id=&#39;tel_err&#39;</code> 的span标签显示出来，给出用户提示。</li></ul><p>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1. 验证用户名是否符合规则</span><br><span class="hljs-comment">//1.1 获取用户名的输入框</span><br><span class="hljs-keyword">var</span> usernameInput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;username&quot;</span>);<br><br><span class="hljs-comment">//1.2 绑定onblur事件 失去焦点</span><br>usernameInput.<span class="hljs-property">onblur</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//1.3 获取用户输入的用户名</span><br>    <span class="hljs-keyword">var</span> username = usernameInput.<span class="hljs-property">value</span>.<span class="hljs-title function_">trim</span>();<br><br>    <span class="hljs-comment">//1.4 判断用户名是否符合规则：长度 6~12</span><br>    <span class="hljs-keyword">if</span> (username.<span class="hljs-property">length</span> &gt;= <span class="hljs-number">6</span> &amp;&amp; username.<span class="hljs-property">length</span> &lt;= <span class="hljs-number">12</span>) &#123;<br>        <span class="hljs-comment">//符合规则</span><br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;username_err&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//不合符规则</span><br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;username_err&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//1. 验证密码是否符合规则</span><br><span class="hljs-comment">//1.1 获取密码的输入框</span><br><span class="hljs-keyword">var</span> passwordInput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;password&quot;</span>);<br><br><span class="hljs-comment">//1.2 绑定onblur事件 失去焦点</span><br>passwordInput.<span class="hljs-property">onblur</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//1.3 获取用户输入的密码</span><br>    <span class="hljs-keyword">var</span> password = passwordInput.<span class="hljs-property">value</span>.<span class="hljs-title function_">trim</span>();<br><br>    <span class="hljs-comment">//1.4 判断密码是否符合规则：长度 6~12</span><br>    <span class="hljs-keyword">if</span> (password.<span class="hljs-property">length</span> &gt;= <span class="hljs-number">6</span> &amp;&amp; password.<span class="hljs-property">length</span> &lt;= <span class="hljs-number">12</span>) &#123;<br>        <span class="hljs-comment">//符合规则</span><br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;password_err&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//不合符规则</span><br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;password_err&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//1. 验证手机号是否符合规则</span><br><span class="hljs-comment">//1.1 获取手机号的输入框</span><br><span class="hljs-keyword">var</span> telInput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;tel&quot;</span>);<br><br><span class="hljs-comment">//1.2 绑定onblur事件 失去焦点</span><br>telInput.<span class="hljs-property">onblur</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//1.3 获取用户输入的手机号</span><br>    <span class="hljs-keyword">var</span> tel = telInput.<span class="hljs-property">value</span>.<span class="hljs-title function_">trim</span>();<br><br>    <span class="hljs-comment">//1.4 判断手机号是否符合规则：长度 11</span><br>    <span class="hljs-keyword">if</span> (tel.<span class="hljs-property">length</span> == <span class="hljs-number">11</span>) &#123;<br>        <span class="hljs-comment">//符合规则</span><br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;tel_err&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//不合符规则</span><br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;tel_err&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-3-验证表单"><a href="#8-3-验证表单" class="headerlink" title="8.3  验证表单"></a>8.3  验证表单</h3><p>当用户点击 <code>注册</code> 按钮时，需要同时对输入的 <code>用户名</code>、<code>密码</code>、<code>手机号</code> ，如果都符合规则，则提交表单；如果有一个不符合规则，则不允许提交表单。实现该功能需要获取表单元素对象，并绑定 <code>onsubmit</code> 事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1. 获取表单对象</span><br><span class="hljs-keyword">var</span> regForm = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;reg-form&quot;</span>);<br><br><span class="hljs-comment">//2. 绑定onsubmit 事件</span><br>regForm.<span class="hljs-property">onsubmit</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><code>onsubmit</code> 事件绑定的函数需要对输入的 <code>用户名</code>、<code>密码</code>、<code>手机号</code> 进行校验，这些校验我们之前都已经实现过了，这里我们还需要再校验一次吗？不需要，只需要对之前校验的代码进行改造，把每个校验的代码专门抽象到有名字的函数中，方便调用；并且每个函数都要返回结果来去决定是提交表单还是阻止表单提交，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1. 验证用户名是否符合规则</span><br><span class="hljs-comment">//1.1 获取用户名的输入框</span><br><span class="hljs-keyword">var</span> usernameInput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;username&quot;</span>);<br><br><span class="hljs-comment">//1.2 绑定onblur事件 失去焦点</span><br>usernameInput.<span class="hljs-property">onblur</span> = checkUsername;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkUsername</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//1.3 获取用户输入的用户名</span><br>    <span class="hljs-keyword">var</span> username = usernameInput.<span class="hljs-property">value</span>.<span class="hljs-title function_">trim</span>();<br><br>    <span class="hljs-comment">//1.4 判断用户名是否符合规则：长度 6~12</span><br>    <span class="hljs-keyword">var</span> flag = username.<span class="hljs-property">length</span> &gt;= <span class="hljs-number">6</span> &amp;&amp; username.<span class="hljs-property">length</span> &lt;= <span class="hljs-number">12</span>;<br>    <span class="hljs-keyword">if</span> (flag) &#123;<br>        <span class="hljs-comment">//符合规则</span><br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;username_err&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//不合符规则</span><br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;username_err&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> flag;<br>&#125;<br><br><span class="hljs-comment">//1. 验证密码是否符合规则</span><br><span class="hljs-comment">//1.1 获取密码的输入框</span><br><span class="hljs-keyword">var</span> passwordInput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;password&quot;</span>);<br><br><span class="hljs-comment">//1.2 绑定onblur事件 失去焦点</span><br>passwordInput.<span class="hljs-property">onblur</span> = checkPassword;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkPassword</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//1.3 获取用户输入的密码</span><br>    <span class="hljs-keyword">var</span> password = passwordInput.<span class="hljs-property">value</span>.<span class="hljs-title function_">trim</span>();<br><br>    <span class="hljs-comment">//1.4 判断密码是否符合规则：长度 6~12</span><br>    <span class="hljs-keyword">var</span> flag = password.<span class="hljs-property">length</span> &gt;= <span class="hljs-number">6</span> &amp;&amp; password.<span class="hljs-property">length</span> &lt;= <span class="hljs-number">12</span>;<br>    <span class="hljs-keyword">if</span> (flag) &#123;<br>        <span class="hljs-comment">//符合规则</span><br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;password_err&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//不合符规则</span><br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;password_err&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> flag;<br>&#125;<br><br><span class="hljs-comment">//1. 验证手机号是否符合规则</span><br><span class="hljs-comment">//1.1 获取手机号的输入框</span><br><span class="hljs-keyword">var</span> telInput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;tel&quot;</span>);<br><br><span class="hljs-comment">//1.2 绑定onblur事件 失去焦点</span><br>telInput.<span class="hljs-property">onblur</span> = checkTel;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkTel</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//1.3 获取用户输入的手机号</span><br>    <span class="hljs-keyword">var</span> tel = telInput.<span class="hljs-property">value</span>.<span class="hljs-title function_">trim</span>();<br><br>    <span class="hljs-comment">//1.4 判断手机号是否符合规则：长度 11</span><br>    <span class="hljs-keyword">var</span> flag = tel.<span class="hljs-property">length</span> == <span class="hljs-number">11</span>;<br>    <span class="hljs-keyword">if</span> (flag) &#123;<br>        <span class="hljs-comment">//符合规则</span><br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;tel_err&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//不合符规则</span><br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;tel_err&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> flag;<br>&#125;<br></code></pre></td></tr></table></figure><p>而 <code>onsubmit</code> 绑定的函数需要调用 <code>checkUsername()</code> 函数、<code>checkPassword()</code> 函数、<code>checkTel()</code> 函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1. 获取表单对象</span><br><span class="hljs-keyword">var</span> regForm = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;reg-form&quot;</span>);<br><br><span class="hljs-comment">//2. 绑定onsubmit 事件</span><br>regForm.<span class="hljs-property">onsubmit</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//挨个判断每一个表单项是否都符合要求，如果有一个不合符，则返回false</span><br><br>    <span class="hljs-keyword">var</span> flag = <span class="hljs-title function_">checkUsername</span>() &amp;&amp; <span class="hljs-title function_">checkPassword</span>() &amp;&amp; <span class="hljs-title function_">checkTel</span>();<br><br>    <span class="hljs-keyword">return</span> flag;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9，RegExp对象"><a href="#9，RegExp对象" class="headerlink" title="9，RegExp对象"></a>9，RegExp对象</h2><p>RegExp 是正则对象。正则对象是判断指定字符串是否符合规则。</p><p>如下图是百度贴吧中的帖子</p><p><img src="assets/image-20210816235112754.png" alt="image-20210816235112754" style="zoom:70%;" /></p><p>我们可以通过爬虫技术去爬取该页面源代码，然后获取页面中所有的邮箱，后期我们可以给这些邮箱地址发送推广的邮件。那么问题来了，如何才能知道页面内容中哪些事邮箱地址呢？这里就可以使用正则表达式来匹配邮箱。</p><p>在 js 中对正则表达式封装的对象就是正则对象。</p><h3 id="9-1-正则对象使用"><a href="#9-1-正则对象使用" class="headerlink" title="9.1  正则对象使用"></a>9.1  正则对象使用</h3><h4 id="9-1-1-创建对象"><a href="#9-1-1-创建对象" class="headerlink" title="9.1.1  创建对象"></a>9.1.1  创建对象</h4><p>正则对象有两种创建方式：</p><ul><li><p>直接量方式：注意不要加引号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/正则表达式/</span>;<br></code></pre></td></tr></table></figure></li><li><p>创建 RegExp 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&quot;正则表达式&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul><h4 id="9-1-2-函数"><a href="#9-1-2-函数" class="headerlink" title="9.1.2  函数"></a>9.1.2  函数</h4><p><code>test(str)</code> ：判断指定字符串是否符合规则，返回 true或 false</p><h3 id="9-2-正则表达式"><a href="#9-2-正则表达式" class="headerlink" title="9.2  正则表达式"></a>9.2  正则表达式</h3><p>从上面创建正则对象的格式中可以看出不管哪种方式都需要正则表达式，那么什么是正则表达式呢？</p><p>正则表达式定义了字符串组成的规则。也就是判断指定的字符串是否符合指定的规则，如果符合返回true，如果不符合返回false。</p><p>正则表达式是和语言无关的。很多语言都支持正则表达式，Java语言也支持，只不过正则表达式在不同的语言中的使用方式不同，js 中需要使用正则对象来使用正则表达式。</p><p>正则表达式常用的规则如下：</p><ul><li><p>^：表示开始</p></li><li><p>$：表示结束</p></li><li><p>[ ]：代表某个范围内的单个字符，比如： [0-9] 单个数字字符</p></li><li><p>.：代表任意单个字符，除了换行和行结束符</p></li><li><p>\w：代表单词字符：字母、数字、下划线(<em>)，相当于 [A-Za-z0-9</em>]</p></li><li><p>\d：代表数字字符： 相当于 [0-9]</p></li></ul><p>量词：</p><ul><li><p>+：至少一个</p></li><li><p>*：零个或多个</p></li><li><p>？：零个或一个</p></li><li><p>{x}：x个</p></li><li><p>{m,}：至少m个</p></li><li><p>{m,n}：至少m个，最多n个</p></li></ul><p><strong>代码演示：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 规则：单词字符，6~12</span><br><span class="hljs-comment">//1,创建正则对象，对正则表达式进行封装</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^\w&#123;6,12&#125;$/</span>;<br><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abcccc&quot;</span>;<br><span class="hljs-comment">//2,判断 str 字符串是否符合 reg 封装的正则表达式的规则</span><br><span class="hljs-keyword">var</span> flag = reg.<span class="hljs-title function_">test</span>(str);<br><span class="hljs-title function_">alert</span>(flag);<br></code></pre></td></tr></table></figure><h3 id="9-3-改进表单校验案例"><a href="#9-3-改进表单校验案例" class="headerlink" title="9.3  改进表单校验案例"></a>9.3  改进表单校验案例</h3><p>表单校验案例中的规则是我们进行一系列的判断来实现的，现在学习了正则对象后，就可以使用正则对象来改进这个案例。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>欢迎注册<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../css/register.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-div&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;reg-content&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎注册<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>已有帐号？<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;reg-form&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inputs&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username_err&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;err_msg&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: none&quot;</span>&gt;</span>用户名不太受欢迎<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inputs&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;password_err&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;err_msg&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: none&quot;</span>&gt;</span>密码格式有误<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>手机号<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inputs&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;tel&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tel&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tel_err&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;err_msg&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: none&quot;</span>&gt;</span>手机号格式有误<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;buttons&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;注 册&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;reg_btn&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;clear&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//1. 验证用户名是否符合规则</span></span><br><span class="language-javascript">    <span class="hljs-comment">//1.1 获取用户名的输入框</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> usernameInput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;username&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//1.2 绑定onblur事件 失去焦点</span></span><br><span class="language-javascript">    usernameInput.<span class="hljs-property">onblur</span> = checkUsername;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">checkUsername</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//1.3 获取用户输入的用户名</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> username = usernameInput.<span class="hljs-property">value</span>.<span class="hljs-title function_">trim</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//1.4 判断用户名是否符合规则：长度 6~12,单词字符组成</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^\w&#123;6,12&#125;$/</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> flag = reg.<span class="hljs-title function_">test</span>(username);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//var flag = username.length &gt;= 6 &amp;&amp; username.length &lt;= 12;</span></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (flag) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//符合规则</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;username_err&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;</span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//不合符规则</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;username_err&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> flag;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//1. 验证密码是否符合规则</span></span><br><span class="language-javascript">    <span class="hljs-comment">//1.1 获取密码的输入框</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> passwordInput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;password&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//1.2 绑定onblur事件 失去焦点</span></span><br><span class="language-javascript">    passwordInput.<span class="hljs-property">onblur</span> = checkPassword;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">checkPassword</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//1.3 获取用户输入的密码</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> password = passwordInput.<span class="hljs-property">value</span>.<span class="hljs-title function_">trim</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//1.4 判断密码是否符合规则：长度 6~12</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^\w&#123;6,12&#125;$/</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> flag = reg.<span class="hljs-title function_">test</span>(password);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//var flag = password.length &gt;= 6 &amp;&amp; password.length &lt;= 12;</span></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (flag) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//符合规则</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;password_err&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;</span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//不合符规则</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;password_err&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> flag;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//1. 验证手机号是否符合规则</span></span><br><span class="language-javascript">    <span class="hljs-comment">//1.1 获取手机号的输入框</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> telInput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;tel&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//1.2 绑定onblur事件 失去焦点</span></span><br><span class="language-javascript">    telInput.<span class="hljs-property">onblur</span> = checkTel;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">checkTel</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//1.3 获取用户输入的手机号</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> tel = telInput.<span class="hljs-property">value</span>.<span class="hljs-title function_">trim</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//1.4 判断手机号是否符合规则：长度 11，数字组成，第一位是1</span></span><br><span class="language-javascript">        <span class="hljs-comment">//var flag = tel.length == 11;</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^[1]\d&#123;10&#125;$/</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> flag = reg.<span class="hljs-title function_">test</span>(tel);</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (flag) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//符合规则</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;tel_err&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;</span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//不合符规则</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;tel_err&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-javascript">        </span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> flag;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//1. 获取表单对象</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> regForm = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;reg-form&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//2. 绑定onsubmit 事件</span></span><br><span class="language-javascript">    regForm.<span class="hljs-property">onsubmit</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//挨个判断每一个表单项是否都符合要求，如果有一个不合符，则返回false</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> flag = <span class="hljs-title function_">checkUsername</span>() &amp;&amp; <span class="hljs-title function_">checkPassword</span>() &amp;&amp; <span class="hljs-title function_">checkTel</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> flag;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>插入排序</title>
      <link href="/2022/09/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
      <url>/2022/09/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><p>Leecode第147题：</p><blockquote><p>题目描述</p></blockquote><p>给定单个链表的头 head ，使用 插入排序 对链表进行排序，并返回 排序后链表的头 。</p><p>插入排序 算法的步骤:</p><p>插入排序是迭代的，每次只移动一个元素，直到所有元素可以形成一个有序的输出列表。<br>每次迭代中，插入排序只从输入数据中移除一个待排序的元素，找到它在序列中适当的位置，并将其插入。<br>重复直到所有输入数据插入完为止。<br>下面是插入排序算法的一个图形示例。部分排序的列表(黑色)最初只包含列表中的第一个元素。每次迭代时，从输入数据中删除一个元素(红色)，并就地插入已排序的列表中。</p><p>对链表进行插入排序。<br>链接：<a href="https://leetcode.cn/problems/insertion-sort-list">https://leetcode.cn/problems/insertion-sort-list</a><br><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/ccc.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入: head = [4,2,1,3]<br>输出: [1,2,3,4]<br></code></pre></td></tr></table></figure><p>题解代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">insertionSortList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>     <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>();<br>     cur = head.next;<br>     <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>();<br>     pre = head;<br>     <span class="hljs-keyword">while</span> (cur.next != <span class="hljs-literal">null</span>) &#123;<br>         <span class="hljs-keyword">if</span> (cur.val &lt; pre.val) &#123;<br>             swap(cur, pre);<br>         &#125;<br>         <span class="hljs-keyword">if</span> (pre.next == cur) &#123;<br>             pre = head;<br>             cur = cur.next;<br>         &#125; <span class="hljs-keyword">else</span> &#123;<br>             pre = pre.next;<br>         &#125;<br>     &#125;<br>     <span class="hljs-keyword">return</span> head;<br> &#125;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(ListNode cur, ListNode pre)</span> &#123;<br>     <span class="hljs-type">int</span> temp;<br>     temp = cur.val;<br>     cur.val = pre.val;<br>     pre.val = temp;<br> &#125;<br></code></pre></td></tr></table></figure><p>题解思路：</p><ol><li>首先我们创建两个指针一个指向head的pre和一个指向head.next的cur</li><li>我们来判断终止的条件就是当cur指针指向的最后一个元素比较完成后结束也就是(cur!=null)</li><li>在循环里面我们要知道如果当前的cur.val&lt;pre.val这时我们需要交换两者的数据。</li><li><p>交换完毕后有两种情况：</p><ul><li>当pre.next==cur时证明两者刚刚交换过此时直接让cur指向下一位而pre回到head</li><li>当pre.next!=cur时这时候cur不能指向下一位而是让pre指向下一位进行和cur的值进行比较完成循环。</li></ul></li><li><p>最终直接返回head的指针。</p></li></ol><blockquote><p>Leecode题解时间更快</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">insertionSortList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-comment">//首先判断头节点是否为空</span><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>        <span class="hljs-comment">//其次创建一个虚拟的头节点</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummyHead</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">//让该虚拟头节点指向head</span><br>        dummyHead.next = head;<br>        <span class="hljs-comment">//接着创建两个指着一个指向头一个指向头的下一个节点</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">lastSorted</span> <span class="hljs-operator">=</span> head, curr = head.next;<br>        <span class="hljs-comment">//判断当最快到达链表尾部的元素不为空时进行循环</span><br>        <span class="hljs-keyword">while</span> (curr != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//如果发现靠后的节点小于当前靠前的节点直接让靠后的节点++</span><br>            <span class="hljs-keyword">if</span> (lastSorted.val &lt;= curr.val) &#123;<br>                lastSorted = lastSorted.next;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//否则的话 就创建一个prev节点指向虚拟节点</span><br>                <span class="hljs-type">ListNode</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> dummyHead;<br>                <span class="hljs-comment">//直至prev指向=当前靠前节点</span><br>                <span class="hljs-keyword">while</span> (prev.next.val &lt;= curr.val) &#123;<br>                    prev = prev.next;<br>                &#125;<br>                <span class="hljs-comment">//然后进行节点的交换</span><br>                lastSorted.next = curr.next;<br>                curr.next = prev.next;<br>                prev.next = curr;<br>            &#125;<br>            curr = lastSorted.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummyHead.next;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong><a href="https://www.runoob.com/data-structures/insertion-sort.html">插入排序</a>算法的图解和代码详解；</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InsertionSort</span> &#123;<br>    <span class="hljs-comment">//核心代码---开始</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(Comparable[] arr)</span>&#123;<br><span class="hljs-comment">//首先获取数组的长度</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> arr.length;<br>        <span class="hljs-comment">//其次对数组进行遍历</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-comment">// j从第1开始每次和前面的作比较如果比前面的数据小则直接交换数据反之则退出内循环</span><br>          <span class="hljs-comment">//这个相当于j每次--从后面开始直至比到比他小的数为止也是插入排序的精髓</span><br>            <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i ; j &gt; <span class="hljs-number">0</span> ; j -- )<br>                <span class="hljs-keyword">if</span>( arr[j].compareTo( arr[j-<span class="hljs-number">1</span>] ) &lt; <span class="hljs-number">0</span> )<br>                    swap( arr, j , j-<span class="hljs-number">1</span> );<br>                <span class="hljs-keyword">else</span><br>                    <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//交换两个数组的内容</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(Object[] arr, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> arr[i];<br>        arr[i] = arr[j];<br>        arr[j] = t;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插入排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaWeb学习</title>
      <link href="/2022/09/06/JavaWeb%E5%AD%A6%E4%B9%A0/MyBatis/"/>
      <url>/2022/09/06/JavaWeb%E5%AD%A6%E4%B9%A0/MyBatis/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><h3 id="1-什么使MyBatis"><a href="#1-什么使MyBatis" class="headerlink" title="1.什么使MyBatis"></a>1.什么使MyBatis</h3><ul><li>MyBatis是一款优秀的持久层框架，用于简化JDBC开发</li><li>MyBatis本事APache的一个开源项目iBatis</li></ul><h3 id="2-持久层"><a href="#2-持久层" class="headerlink" title="2.持久层"></a>2.持久层</h3><ul><li>负责将数据保存到数据库的那一层代码</li><li>JavaEE三层架构：表现层、业务层、持久层</li></ul><h3 id="3-框架"><a href="#3-框架" class="headerlink" title="3.框架"></a>3.框架</h3><ul><li>框架就是在一个半成品的软件上，是一套可重用的，通用的、软件基础代码模型</li><li>在框架的基础之上构建软件编写更加高效、规范、通用、可扩展</li></ul><h3 id="4-JDBC的缺点"><a href="#4-JDBC的缺点" class="headerlink" title="4.JDBC的缺点"></a>4.JDBC的缺点</h3><ul><li>硬编码 <ul><li>注册驱动，获取连接</li><li>SQL语句</li></ul></li><li>操作繁琐<ul><li>手动设置参数</li><li>手动封装结果集</li></ul></li></ul><p><strong>MyBatis免除了几乎所有的JDBC代码以及设置参数和获取结果集的工作</strong></p><h1 id="MyBatis快速入门"><a href="#MyBatis快速入门" class="headerlink" title="MyBatis快速入门"></a>MyBatis快速入门</h1><blockquote><p>查询user表中的所有数据</p></blockquote><ol><li>创建user表，添加数据(在数据库中创建)</li><li>创建模块，导入坐标</li><li>编写MyBatis核心配置文件—-&gt;替换连接信息解决硬编码问题</li><li>编写SQL映射文件——&gt;统一管理sql语句，解决硬编码问题</li><li>编码<ol><li>定义PoJo类</li><li>加载核心配置文件获取SqlSessionFactory对象</li></ol></li></ol><blockquote><p>操作步骤</p></blockquote><p>1.新建文件创建Maven项目模块</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/bu1.png" alt=""></p><p>2.在创建好的pom.xml文件中导入坐标：在MyBatis官网上有入门操作</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--mybatis的依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>x.x.x<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>   <span class="hljs-comment">&lt;!--自己选择版本号--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>插入到下图二</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/bu2.png" alt=""></p><p>3、导入数据库的驱动mysql和单元测试的驱动junit</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.28<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4.导入logback-core依赖可以直接复制就行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 添加slf4j日志api --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 添加logback-classic依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 添加logback-core依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>5.在添加完成后需要配置文件在src/main/resources文件目录下建立<code>lockback.xml</code>文件添加以下代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        CONSOLE ：表示当前的日志信息是可以输出到控制台的。</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Console&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>[%level] %blue(%d&#123;HH:mm:ss.SSS&#125;) %cyan([%thread]) %boldGreen(%logger&#123;15&#125;) - %msg %n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.itheima&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;Console&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">      level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF</span><br><span class="hljs-comment">     ， 默认debug</span><br><span class="hljs-comment">      &lt;root&gt;可以包含零个或多个&lt;appender-ref&gt;元素，标识这个输出位置将会被本日志级别控制。</span><br><span class="hljs-comment">      --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;Console&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>6.编写MyBatis核心配置文件（替换数据库连接信息）在官网上看</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/bu5.png" alt=""></p><p>7.找到后返回idea继续在src/main/resources文件下建立<code>mybatis-config.xml</code>文件。并将下列代码copy到该文件下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">  <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">  <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>     <span class="hljs-comment">&lt;!--配置数据库连接信息可以配置多个environments通过default</span><br><span class="hljs-comment">属性来切换不同的environments--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>          <span class="hljs-comment">&lt;!--数据库连接信息--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--加载sql映射文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/mybatis/example/BlogMapper.xml&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>8.拷贝完成后需要其中修改相关数据库连接信息:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--将$&#123;driver&#125;改成jdbc的驱动路径--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span> <br><span class="hljs-comment">&lt;!--将$&#123;url&#125;改成jdbc的驱动路径--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://mybatis?useSSL=false&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--修改自己数据库的用户名和密码--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>9.加载sql的映射文件直接在官网上找相关映射实列代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">  <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">  <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--namespace这个需要修改他是个名称空间,以下代码需要修改--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.mybatis.example.BlogMapper&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectBlog&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>    select * from Blog where id = #&#123;id&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>10.找到后在src/main/resources文件下建立<code>UserMapper.xml</code>文件 这个名字可以修改用户为UserMapper，汽车为CarMapper等等。完成后将9步骤的代码复制到该文件下。</p><p>11.然后在src/main/java下创建相关的User类</p><p>12.修改第9步的相关信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!--修改名称空间为test--&gt;</span><br>  <span class="hljs-comment">&lt;!--查询数据库所有改为selectAll,后面的参数为User类的路径直接写User就可以--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span>  <br>       <span class="hljs-comment">&lt;!--修改相关的sql语句操作,tb_user为自己定义的表的名字--&gt;</span><br>    select * from tb_user;  <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>13.接着修改第七步里面的sql映射文件为<code>UserMapper.xml</code></p><p><code>&lt;mapper resource=&quot;UserMapper.xml&quot;/&gt;</code></p><h2 id="开始编码"><a href="#开始编码" class="headerlink" title="开始编码"></a>开始编码</h2><p>1.打开User类</p><p>创建相关数据库内的相关属性信息如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.pojo;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String PASSWORD;<br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-keyword">private</span> String addr;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, username=&#x27;&quot;</span> + username + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, PASSWORD=&#x27;&quot;</span> + PASSWORD + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, addr=&#x27;&quot;</span> + addr + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPASSWORD</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> PASSWORD;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPASSWORD</span><span class="hljs-params">(String PASSWORD)</span> &#123;<br>        <span class="hljs-built_in">this</span>.PASSWORD = PASSWORD;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getGender</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGender</span><span class="hljs-params">(String gender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAddr</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> addr;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAddr</span><span class="hljs-params">(String addr)</span> &#123;<br>        <span class="hljs-built_in">this</span>.addr = addr;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>2.接着写MyBatis的测试类：直接在src/main/java目录下创建一个文件<code>MyBatisDemo</code>然后进入官网拷贝以下代码并修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;org/mybatis/example/mybatis-config.xml&quot;</span>;<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br><span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br></code></pre></td></tr></table></figure><p>修改resource=”mybatis-config.xml”第二句有异常直接try-catch抛出就行可以，接着需要获取SqlSession对象，用来执行sql最后执行sql语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>     <span class="hljs-comment">//加载MyBatis的核心配置文件获取SqlSessionFactory</span><br>     <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>     <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>     <span class="hljs-keyword">try</span> &#123;<br>         inputStream = Resources.getResourceAsStream(resource);<br>     &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>         e.printStackTrace();<br>     &#125;<br>     <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span>         <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br>     <span class="hljs-comment">//获取SqlSession对象 用它来执行sql</span><br>     <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>     <span class="hljs-comment">//执行sql语句</span><br>    <span class="hljs-comment">//调用selectList括号的内容为上面自己定义的名称作用域test和标识(id)selectAll</span><br>     List&lt;User&gt; users = sqlSession.selectList(<span class="hljs-string">&quot;test.selectAll&quot;</span>);<br>    <span class="hljs-comment">//打印结果</span><br>     System.out.println(users);<br>     sqlSession.close();<br> &#125;<br><br></code></pre></td></tr></table></figure><h1 id="Mapper代理开发"><a href="#Mapper代理开发" class="headerlink" title="Mapper代理开发"></a>Mapper代理开发</h1><h3 id="代理步骤详解"><a href="#代理步骤详解" class="headerlink" title="代理步骤详解"></a>代理步骤详解</h3><ul><li>定义与SQL映射文件同名的Mapper接口，并且将Mapper接口和SQL映射文件放在同一目录下。</li></ul><p>需要在main下建立一个mapper类，而且在resource文件下建立相应的mapper路径 文件名称层次不用<code>.</code>用<code>\</code>来表示并且建立完成后将对应的UserMapper.xml放在该路径下即可。编译后IDEA自动将接口和SQL映射文件放在一起.</p><ul><li>设置SQL映射文件的namespace属性为mapper接口的全限定名:open_file_folder:UserMapper.xml修改代码</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.itheima.mapper.UserMapper&quot;</span>&gt;</span> <br>  <span class="hljs-comment">&lt;!---修改text为com.itheima.mapper.UserMapper--&gt;</span><br><span class="hljs-comment">&lt;!--就是你的UserMapper放在的地方路径--&gt;</span><br></code></pre></td></tr></table></figure><ul><li>在Mapper接口中定义方法，方法名就是SQL映射文件中的sql语句的id，并保持参数类型和返回值类型的一致</li></ul><p>在接口类：UserMapper中添加以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    List&lt;User&gt; <span class="hljs-title function_">selectAll</span><span class="hljs-params">()</span>;   <br>    <span class="hljs-comment">//因为在配置文件UserMapper.xml中有</span><br>    <span class="hljs-comment">// &lt;select id=&quot;selectAll&quot; resultType=&quot;com.itheima.pojo.User&quot;&gt;</span><br>    <span class="hljs-comment">//上面代码有标识id和返回值类型为User所以这里定义的接口为List容器来盛放多个User对象</span><br>&#125;<br></code></pre></td></tr></table></figure><p>完成后需要修改mybatis-config.xml文件中的配置路径，因为刚刚我们把UserMapper.xml文件放在了新的目录下所以这里我们需要改变路径：复制文件的路径修改以下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--加载sql映射文件 更改后修改resource路径--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/itheima/mapper/UserMapper.xml&quot;</span>/&gt;</span>  <br>   <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>编码<ol><li>通过SqlSession的getMapper方法获取Mapper接口的代理对象</li><li>调用对应的方法完成sql的执行</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>     <span class="hljs-comment">//加载MyBatis的核心配置文件获取SqlSessionFactory</span><br>     <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>     <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>     <span class="hljs-keyword">try</span> &#123;<br>         inputStream = Resources.getResourceAsStream(resource);<br>     &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>         e.printStackTrace();<br>     &#125;<br>     <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br>     <span class="hljs-comment">//获取SqlSession对象 用它来执行sql</span><br>     <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>     <span class="hljs-comment">//执行sql语句(在Mapper代理中下面这句代码注释掉)</span><br>    <span class="hljs-comment">// List&lt;User&gt; users = sqlSession.selectList(&quot;test.selectAll&quot;);</span><br>     <span class="hljs-comment">//重点！！！获取对应userMapper代理对象 </span><br>     <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>     List&lt;User&gt;users= userMapper.selectAll();<br>    <span class="hljs-comment">//重点两句代码</span><br>     System.out.println(users);<br>     sqlSession.close();<br> &#125;<br></code></pre></td></tr></table></figure><p><strong>运行流程分析：</strong></p><ol><li>利用<code>SqlSession sqlSession = sqlSessionFactory.openSession();</code>获取sqlSession</li><li>通过sqlSession可以获取UserMapper代理对象就直接找到UserMapper.java接口</li><li>接着在当前目录下有一个同名的映射文件就可以找到UserMapper.xml的sql语句</li><li>通过最后一句<code>List&lt;User&gt;users= userMapper.selectAll();</code>调用UserMapper.java接口的方法然而该函数<code>List&lt;User&gt; selectAll();</code>名称为UserMapper.xml文件中sql的id名字：<code>&lt;select id=&quot;selectAll&quot; resultType=&quot;com.itheima.pojo.User&quot;&gt;</code></li><li>所以接着就执行id对应的sql语句，执行完毕后因为有返回类型User所以就返回给UserMapper接口，在调用文件中我们用一个List<User>来接收该返回值并打印输出。</li></ol><blockquote><p>细节</p></blockquote><p>​    如果Mapper接口名称和SQL映射文件名称相同，并且在同一目录下，则可以使用包扫描的方式简化SQL映射的加载</p><p><strong>相关操作：</strong>在mybatis-config.xml文件中修改sql映射文件代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--加载sql映射文件,在这里可以直接引入同一个包下面的文件--&gt;</span><br>      <span class="hljs-comment">&lt;!-- &lt;mapper resource=&quot;com/itheima/mapper/UserMapper.xml&quot;/&gt; --&gt;</span><br>    <span class="hljs-comment">&lt;!--Mapper代理方式 一行代码全部搞定--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.itheima.mapper&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>核心配置文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;typeAliases&gt;  &lt;!--起别名--&gt;<br>       &lt;<span class="hljs-keyword">package</span> name=<span class="hljs-string">&quot;com.itheima.pojo&quot;</span>/&gt;<br>   &lt;/typeAliases&gt;<br></code></pre></td></tr></table></figure><h3 id="配置文件完成增删改查"><a href="#配置文件完成增删改查" class="headerlink" title="配置文件完成增删改查"></a>配置文件完成增删改查</h3><h4 id="1-查询所有数据"><a href="#1-查询所有数据" class="headerlink" title="1.查询所有数据"></a>1.查询所有数据</h4><p>1.编写接口方法：Mapper接口</p><ul><li>参数无</li><li>结果:List<Brand></li></ul><p>2.编写SQL语句,SQL映射文件</p><p>3.执行方法，测试</p><blockquote><p>编写方法</p></blockquote><p>参数占位符 1.#{} 会将其替换为? 为了防止SQL注入 </p><p>   2.${}   拼SQL 会存在SQL注入问题</p><p>3.使用时机 <strong>*在参数传递的时候；#{}  不使用${}</strong></p><p>可以指定参数类型:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectById&quot;</span>  <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;brandResultMap&quot;</span>&gt;</span> <br>    <span class="hljs-comment">&lt;!--还有一个parameterType=&quot;参数类型&quot; 一般不写--&gt;</span><br>    select *from tb_brand where id=#&#123;id&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>对应的特殊字符</p></blockquote><p>解决小于号不能用：</p><ol><li><p>转义字符 &lt;(&amp;lt)</p></li><li><p>输入CDATA区</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="/2022/09/05/JavaWeb%E5%AD%A6%E4%B9%A0/JDBC/"/>
      <url>/2022/09/05/JavaWeb%E5%AD%A6%E4%B9%A0/JDBC/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><blockquote><p>详解DriveManager</p></blockquote><p>驱动管理类(工具类)：</p><p>1.注册驱动  ——可以省略注册驱动这个步骤 <code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;)</code></p><p>2.获取数据库连接 ——url:连接路径 ——user：用户名—password:密码</p><p>语法：<code>jdbc:mysql://127.0.0.1:3306/db1</code>  解释 {//ip地址（域名）:端口号/数据库名称?参数键值对1&amp;参数键值对2&amp;…}</p><p>获取连接；如果连接的是本机的mysql并且端口号是默认的3306 可以简化书写<code>jdbc:mysql://db1</code></p><p>可以配置useSSL=false 可以去除警告</p><blockquote><p>Connection详解</p></blockquote><p><strong>1.获取执行的SQL对象</strong></p><ul><li>普通执行SQL对象：<code>Statement creatStatement()</code></li><li>预编译SQL的执行SQL对象：防止SQL注入<code>PreparedStatement prepareStatement(sql)</code></li><li>执行存储过程的对象 <code>CallableStatement prepareCall(sql)</code></li></ul><p><strong>2.执行事务</strong></p><ul><li>MySQL事务管理</li></ul><p>开启事务：<code>BEGIN;/START TRANSACTION</code></p><p>提交事务：<code>COMMIT</code></p><p>回滚事务：<code>ROLLBACK</code></p><p>mysql默认自动提交事务</p><ul><li>JDBC 事务管理：Connection接口中定义了3个对应的方法</li></ul><p>开启事务：<code>setAutoCommit(boolean autoCommit):true 为自动提交事务 false为手动提交事务，即开启事务</code></p><p>提交事务：<code>COMMIT()</code></p><p>回滚事务：<code>ROLLBACK()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.jdbc;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCDemo3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//注册驱动</span><br>        <span class="hljs-comment">// Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br>        <span class="hljs-comment">//获取连接</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/db1?useSSL=false&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br>        <span class="hljs-comment">//定义SQL语句</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update account set money =3000 where id =1&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update account set money =3000 where id =2&quot;</span>;<br>        <span class="hljs-comment">//获取执行sql的对象Statement</span><br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> conn.createStatement();<br><br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//**开启事务</span><br>            conn.setAutoCommit(<span class="hljs-literal">false</span>); <span class="hljs-comment">//如果注释掉则会修改数据</span><br>            <span class="hljs-comment">//执行sql</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">count1</span> <span class="hljs-operator">=</span> stmt.executeUpdate(sql1);  <span class="hljs-comment">//受影响的行数</span><br>            <span class="hljs-comment">//处理结果</span><br>            System.out.println(count1);<br>           <span class="hljs-comment">// int i = 3 / 0;  //打开手动制造一个异常</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">count2</span> <span class="hljs-operator">=</span> stmt.executeUpdate(sql2);  <span class="hljs-comment">//受影响的行数</span><br>            <span class="hljs-comment">//处理结果</span><br>            System.out.println(count2);<br>            <span class="hljs-comment">//提交事务</span><br>            conn.commit();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception throwables) &#123;<br>            <span class="hljs-comment">//回滚事务</span><br>            conn.rollback();<br>            throwables.printStackTrace();<br>        &#125;<br><br><br>        <span class="hljs-comment">//释放资源</span><br>        stmt.close();<br>        conn.close();<br>        ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>Statement详解</p></blockquote><p>1.执行SQL语句</p><p><code>int executeUpdate(sql)</code>执行DML、DDL语句</p><p>→返回值(1)DML语句影响的行数  （2）DDL语句执行后，执行成功也可能返回0</p><p><code>ResultSet executeQuery(sql)</code>执行DQL语句 →返回值：ResultSet结果集对象</p><blockquote><p>ResultSet详解</p></blockquote><ul><li>ResultSet(结果集对象)作用：</li></ul><p>​        1.封装了DQL查询语句的结果</p><p><code>ResultSet stmt.executrQuery(sql)</code> 执行DQL语句，返回ResultSet对象</p><ul><li>获取查询结果</li></ul><p><code>boolean next()</code>(1)将光标从当前位置向前移动一行(2)判断当前行是否有效行；</p><p>→返回值:</p><ul><li>true:有效行，当前行有数据</li><li>false：无效行，当前行没有数据</li></ul><p>xxx getXxx(参数) 获取数据</p><p>→xxx：数据类型；如int getlnt(参数)；String getString(参数)</p><p>→参数：</p><ul><li>int :列的编号，从一开始</li><li>String ：列的名称</li></ul><p>使用步骤：</p><ol><li>游标向下移动一行，并判断改行是否有数据:next()</li><li>获取数据：getXxx(参数)</li></ol><blockquote><p>PreparedStatement</p></blockquote><p>作用：</p><ol><li>预编译SQL语句并执行,预防SQL注入问题</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">textResultSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/db1?useSSL=false&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br>    <span class="hljs-comment">//接收用户名和密码</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;zhangsan&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">pwd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from tb_user where username=&#x27;&quot;</span> + name + <span class="hljs-string">&quot;&#x27; and password=&#x27;&quot;</span> + pwd + <span class="hljs-string">&quot;&#x27;&quot;</span>;<br>    <span class="hljs-comment">//获取stmt对象</span><br>    <span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> conn.createStatement();<br>    <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> stmt.executeQuery(sql);<br>    <span class="hljs-comment">//判断登录是否成功</span><br>    <span class="hljs-keyword">if</span> (rs.next()) &#123;<br>        System.out.println(<span class="hljs-string">&quot;登录成功！！&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;登录失败~~&quot;</span>);<br>    &#125;<br>    rs.close();<br>    stmt.close();<br>    conn.close();<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>SQL注入<ul><li>SQL注入是通过操作输入来修改事先定义好的SQL语句，用以达到执行代码对服务器进行攻击的方法。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * SQL注入</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">textLogin_Inject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/db1?useSSL=false&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br>    <span class="hljs-comment">//接收用户名和密码</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;sadasdasd&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">pwd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#x27; or &#x27;1&#x27; = &#x27;1&quot;</span>;  <span class="hljs-comment">//注入语法</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from tb_user where username=&#x27;&quot;</span> + name + <span class="hljs-string">&quot;&#x27; and password=&#x27;&quot;</span> + pwd + <span class="hljs-string">&quot;&#x27;&quot;</span>;<br>    <span class="hljs-comment">//获取stmt对象</span><br>    System.out.println(sql);<br>    <span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> conn.createStatement();<br>    <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> stmt.executeQuery(sql);<br>    <span class="hljs-comment">//判断登录是否成功</span><br>    <span class="hljs-keyword">if</span> (rs.next()) &#123;<br>        System.out.println(<span class="hljs-string">&quot;登录成功！！&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;登录失败~~&quot;</span>);<br>    &#125;<br>    rs.close();<br>    stmt.close();<br>    conn.close();<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>防止SQL注入的方法</li></ul><ol><li>获取<code>PreparedStatement</code>对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//SQL语句中的参数值，使用?占位符来代替</span><br><br>String sql=<span class="hljs-string">&quot;select *from user where username =? and password = ?&quot;</span>;<br><br><span class="hljs-comment">//通过Connection对象获取，并且传入对应的SQL语句</span><br>PrepareStatedment pstmt=conn.prepareStatement(sql);<br></code></pre></td></tr></table></figure><p>2.设置参数值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">PreparedStatement 对象 ：setXxx(参数<span class="hljs-number">1</span>，参数二):给？赋值<br>    →Xxx：数据类型; 如setInt(参数一，参数二)<br>    →参数：<br>        参数<span class="hljs-number">1</span>：?的位置编号从一开始<br>        参数<span class="hljs-number">2</span>: ?的值<br></code></pre></td></tr></table></figure><p>3.执行SQL</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">executeUpdate(); /executeQuery(); ：不需要在传递sql<br></code></pre></td></tr></table></figure><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">textPreparedStatement</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/db1?useSSL=false&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br>    <span class="hljs-comment">//接收用户名和密码</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;zhangsan&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">pwd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#x27; or &#x27;1&#x27; = &#x27;1&quot;</span>;  <span class="hljs-comment">//此时注入无效</span><br>    <span class="hljs-comment">//定义SQL</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select*from tb_user where username=? and password=?&quot;</span>;<br>    <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">pstmt</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br>    <span class="hljs-comment">//设置？的值</span><br>    pstmt.setString(<span class="hljs-number">1</span>, name);<br>    pstmt.setString(<span class="hljs-number">2</span>, pwd);<br>    <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> pstmt.executeQuery();<br><br><br>    <span class="hljs-comment">//判断登录是否成功</span><br>    <span class="hljs-keyword">if</span> (rs.next()) &#123;<br>        System.out.println(<span class="hljs-string">&quot;登录成功！！&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;登录失败~~&quot;</span>);<br>    &#125;<br>    rs.close();<br>    pstmt.close();<br>    conn.close();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><blockquote><p>数据库连接池简介</p></blockquote><ul><li>数据库连接池是个容器，负责分配管理数据库连接</li><li>它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个</li><li>释放空闲的实践超过最大空闲时间的数据库连接来避免因为没有释放数据库连接而引起的数据库遗漏</li><li>好处</li></ul><ol><li>资源重用</li><li>提升数据库的响应速度</li><li>避免数据库连接遗漏</li></ol><blockquote><p>数据库连接池的实现</p></blockquote><ul><li><p>标准接口：DataSource</p><ul><li>官方（SUN）提供的数据库连接池标准接口，由第三方组织实现此接口</li><li>功能：获取连接<code>Connection getConnection()</code></li></ul></li><li><p>常见的数据库连接池</p><ul><li>DBCP</li><li>C3P0</li><li>Druid</li></ul></li><li><p>Druid(德鲁伊)</p><ul><li>Druid连接池是阿里巴巴开源的数据库连接池项目</li><li>功能强大，性能优秀，是java语言最好的数据库连接池之一</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AVL和红黑树</title>
      <link href="/2022/09/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/AVL%E6%A0%91/"/>
      <url>/2022/09/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/AVL%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="AVL树"><a href="#AVL树" class="headerlink" title="AVL树"></a>AVL树</h1><blockquote><p>AVL树的概念</p></blockquote><p>基于二叉搜索树上的优化，它解决了如果数据有序或者接近有序的二叉搜索树将退化为单链表查找元素相当于在顺序表中搜索元素，效率低下。故AVL树当向二叉搜索树中插入新的节点，能够保持每个节点的左右子树高度之差的绝对值不超过1，从而减少平均搜索的长度，</p><blockquote><p>特点</p></blockquote><p>①叶子节点的最大高度相差不会超过1 平衡二叉树</p><p>②对于任意一个节点，左子树和右子树的高度差不能超过1</p><p>③平横二叉树的高度和节点的数量之间的关系也是O(logn)的</p><p>④AVL常常用于查询较多的情况下</p><p>⑤他的左右子树均为AVL树</p><p>⑥如果一棵二叉树是高度平衡的，他就是AVL树，如果他有n个节点，其高度可保持在<script type="math/tex">O(log_{2}N)</script>搜索的时间复杂度为<script type="math/tex">O(log_{2}N)</script>  </p><p>⑦AVL树中的任意节点的BF只可能是-1 0 1；</p><p>如下图为一颗AVL树：</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/ssss.png" alt=""></p><h2 id="AVL的实现"><a href="#AVL的实现" class="headerlink" title="AVL的实现"></a>AVL的实现</h2><blockquote><p>实现AVL树的逻辑</p></blockquote><ol><li>首先在<code>AVLTree</code>中定义一个节点内部类Node;</li><li>构造函数初始化AVL树</li><li>基于二分搜索树的实现AVL树</li></ol><blockquote><p>实现Node节点的代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>     <span class="hljs-keyword">public</span> K key;<br>     <span class="hljs-keyword">public</span> V value;<br>     <span class="hljs-keyword">public</span> Node left, right;<br>     <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> height;<br><br>     <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(K key, V value)</span> &#123;<br>         <span class="hljs-built_in">this</span>.key = key;<br>         <span class="hljs-built_in">this</span>.value = value;<br>         left = <span class="hljs-literal">null</span>;<br>         right = <span class="hljs-literal">null</span>;<br>         height = <span class="hljs-number">1</span>;<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>定义一个节点主要存储他的key和value （一般只用value 就可以这里复用了BSTMap的结构算法）</p><blockquote><p>对<code>AVLTree</code> 树的初始化</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//私有成员变量root和size并在构造函数里面初始化操作 </span><br><span class="hljs-keyword">private</span> Node root;    <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AVLTree</span><span class="hljs-params">()</span> &#123;<br>        root = <span class="hljs-literal">null</span>;<br>        size = <span class="hljs-number">0</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p>判断该树是否为一个二分搜索树（这个可以省略）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//判断是否为二分搜索树 </span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isBST</span><span class="hljs-params">()</span> &#123;<br>        ArrayList&lt;K&gt; keys = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>       <span class="hljs-comment">//判断是否有序</span><br>    inOrder(root, keys);<br>    <span class="hljs-comment">//由上一步可以的出整棵树的顺序均在keys容器中存放</span><br>    <span class="hljs-comment">//遍历容器让后者根前者比较如果后者小于前者则证明不是个二分搜索树</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; keys.size(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (keys.get(i - <span class="hljs-number">1</span>).compareTo(keys.get(i)) &gt; <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><span class="hljs-comment">//中序遍历法：如果有序则结果也有序</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inOrder</span><span class="hljs-params">(Node node, ArrayList&lt;K&gt; keys)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        inOrder(node.left, keys);<br>        <span class="hljs-comment">//将节点数据拿出向ArrayList中添加keys值便于isBST判断</span><br>        keys.add(node.key);<br>        inOrder(node.right, keys);<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p>一些辅助函数<code>contains() --set()---get()</code></p></blockquote><p><code>minimun()</code>得到对应子树下的最小的节点值属于一个递归函数</p><p><code>contains(K key)</code>该函数主要证明所查的节点是否在该树内</p><p><code>get(K key)</code>得到键值为key得value值（对于AVL树来说可以不需要）</p><p><code>set(K key ,V newValue)</code>将键值为key得地方的值修改为value 如果存在进行覆盖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//拿到传入节点的最小的值   </span><br><span class="hljs-keyword">private</span> Node <span class="hljs-title function_">minimum</span><span class="hljs-params">(Node node)</span> &#123;<br>       <span class="hljs-comment">//递归终止的条件最左边为null</span><br>       <span class="hljs-keyword">if</span> (node.left == <span class="hljs-literal">null</span>) &#123;<br>           <span class="hljs-keyword">return</span> node;<br>       &#125;<br>       <span class="hljs-comment">//进入递归将左子树的左子树传入</span><br>       <span class="hljs-keyword">return</span> minimum(node.left);<br>   &#125;<br><br><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(K key)</span> &#123;<br>       <span class="hljs-keyword">return</span> getNode(root, key) != <span class="hljs-literal">null</span>;<br>   &#125;<br><br><br>   <span class="hljs-keyword">public</span> V <span class="hljs-title function_">get</span><span class="hljs-params">(K key)</span> &#123;<br>       <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> getNode(root, key);<br>       <span class="hljs-keyword">return</span> node == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : node.value;<br>   &#125;<br><br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(K key, V newValue)</span> &#123;<br>       <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> getNode(root, key);<br>       <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(key + <span class="hljs-string">&quot;doesn&#x27;t exist!&quot;</span>);<br>       &#125;<br>       node.value = newValue;<br>   &#125;<br><span class="hljs-comment">//得到数的元素个数</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-keyword">return</span> size;<br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-keyword">return</span> size==<span class="hljs-number">0</span>;<br>   &#125;<br><span class="hljs-comment">//得到以node为节点树的高度</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getHeight</span><span class="hljs-params">(Node node)</span>&#123;<br>       <span class="hljs-keyword">if</span>(node==<span class="hljs-literal">null</span>)&#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>       &#125;<br>       <span class="hljs-keyword">return</span> node.height;<br>   &#125;<br></code></pre></td></tr></table></figure><blockquote><p>辅助函数判断该树是否为一颗二叉平衡树</p></blockquote><p><strong>这里可以创建一个<code>isBalanced()</code>函数通过递归调用最终的出结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isBalanced</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> isBalanced(root);<br>&#125;<br> <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isBalanced</span><span class="hljs-params">(Node node)</span> &#123;<br>     <span class="hljs-comment">//递归终止的条件只有当节点为空的时候返回true</span><br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>     <span class="hljs-comment">//得到当前节点的平衡因数；</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">balanceFactor</span> <span class="hljs-operator">=</span> getBalanceFactor(node);<br>     <span class="hljs-comment">//因为平衡因数的绝对值不可能大于一，一旦大于一直接返回false</span><br>        <span class="hljs-keyword">if</span> (Math.abs(balanceFactor) &gt; <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>     <span class="hljs-comment">//最后递归调用左子树和右子树分别进行判断直至全部遍历完成</span><br>        <span class="hljs-keyword">return</span> isBalanced(node.left) &amp;&amp; isBalanced(node.right);<br>    &#125;<br><span class="hljs-comment">//私有函数能够的到当前的平衡因数这里规定左子树的高度-右子树的高度</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getBalanceFactor</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> getHeight(node.left) - getHeight(node.right);<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p>向<code>AVL</code>树中添加元素</p></blockquote><p><strong>基本逻辑</strong></p><ol><li>传入三个元素 root ,key ,value 先判断根节点是否为空是的话维护size 然后创建一个新节点。</li><li>当元素不为空的时候比较插入的位置是左子树还是右子树</li><li>当插入元素以后更新树的高度，可以利用上面的辅助函数<code>getHeight()</code>函数，得到根节点的高度。</li><li>计算平衡因子以便于维护AVL树的平衡</li><li>辅助函数LL、RR、LR、RL函数共同来维持加入一个元素后树的平衡性。</li></ol><p>①当添加一个新的节点后构成LL（左子树的左孩子）则需要进行右旋转</p><p>②当添加一个新的节点后构成RR（右子树的右孩子）则需要进行左旋转</p><p>③当添加一个新的节点后构成LR（左子树的右孩子）则需要对左子树进行左旋转，然后整体右旋转</p><p>④当添加一个新的节点后构成RL（右子树的左孩子）则需要对右子树进行右旋转，然后整体左旋转</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/uuu1.png" alt=""></p><p>​    图片解析 上图主要介绍了三个旋转LL、RR、RL旋转LR旋转和RL旋转相反应该先对以左子树为根节点进行左转，然后再以根节点为中心进行右转可以的到；</p><blockquote><p>右旋转<code>rightRotate(Node y)</code> 的实现及其原理</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Node <span class="hljs-title function_">rightRotate</span><span class="hljs-params">(Node y)</span>&#123;<br>   <span class="hljs-comment">//首先用x暂存节点y的左子树</span><br>    Node x=y.left;<br>    <span class="hljs-comment">//其次用节点temp存储x的右子树</span><br>    Node temp=x.right;<br>    <span class="hljs-comment">//接着让x的右指针指向y</span><br>    x.rignt=y;<br>    <span class="hljs-comment">//最后将x原本的右子树挂到y的左子树上</span><br>    y.left=temp;<br>    <span class="hljs-comment">//旋转完成后要更新height的值</span><br>    <span class="hljs-comment">//总体来说只有y和x的高度变了其余的高度正常</span><br>    y.height=Math.max(getHeight(y.left),getHeight(y.right))+<span class="hljs-number">1</span>;<br>    x.height=Math.max(getHeight(x.left),getHeight(x.right))+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>左旋转 <code>leftRotate(Node y)</code> 的实现及其原理和右子树正好相反</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Node <span class="hljs-title function_">leftRotate</span><span class="hljs-params">(Node y)</span> &#123;  <br>    <span class="hljs-type">Node</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> y.right;<br>       <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> x.left;<br>       x.left = y;<br>       y.right = temp;<br>       <span class="hljs-comment">//更新height的 值</span><br>       y.height = Math.max(getHeight(y.left), getHeight(y.right)) + <span class="hljs-number">1</span>;<br>       x.height = Math.max(getHeight(x.left), getHeight(x.right)) + <span class="hljs-number">1</span>;<br>       <span class="hljs-keyword">return</span> x;<br>   &#125;<br></code></pre></td></tr></table></figure><blockquote><p>add函数的实现</p></blockquote><p>主要功能：实现元素的增加；代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(K key,V value)</span>&#123;<br>    root=add(root,key,value);<br>&#125;<br><br><span class="hljs-keyword">private</span> Node <span class="hljs-title function_">add</span><span class="hljs-params">(Node node,K key,V value)</span>&#123;<br>    <span class="hljs-comment">//最简单的情况 整棵树为null</span><br>    <span class="hljs-keyword">if</span>(node==<span class="hljs-literal">null</span>)&#123;<br>        size++;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(key,value);<br>    &#125;<br>    <span class="hljs-comment">//如果key小于根节点 遍历加入左子树</span><br>    <span class="hljs-keyword">if</span>(key.compareTo(node.key)&lt;<span class="hljs-number">0</span>)<br>        node.left=add(node.left,key,value);<br>    <span class="hljs-comment">//当key大于根节点在右子树上插入</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(key.compareTo(node.key) &gt; <span class="hljs-number">0</span>)<br>        node.right=add(node.right,key,value);<br>    <span class="hljs-comment">//反之当两者相同时 替换value值</span><br>    <span class="hljs-keyword">else</span><br>        node.value=value;<br>    <br>    <span class="hljs-comment">//以上完成插入数据后开始调节平衡度</span><br>    <span class="hljs-comment">//首先先更新下树的高度</span><br>    node.height=<span class="hljs-number">1</span>+Math.max(getHeight(node.left),getHeight(node.right));<br>    <span class="hljs-comment">//接着得到树的高度后开始计算平衡因子</span><br>    <span class="hljs-type">int</span> balanceFactor=getBalanceFactor(node);<br>    <span class="hljs-keyword">if</span>(Math.abs(balanceFactor)&gt;<span class="hljs-number">1</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;unbalanced:&quot;</span>+balanceFactor);<br>    &#125;<br>    <span class="hljs-comment">//得到平衡因数后开始维护平衡性</span><br>     <span class="hljs-comment">//LL  因为balanceFactor左子树高度-右子树高度</span><br>    <span class="hljs-comment">//后一个参数确定了该树就是左左类型的树直接调用右旋转</span><br>        <span class="hljs-keyword">if</span> (balanceFactor &gt; <span class="hljs-number">1</span> &amp;&amp; getBalanceFactor(node.left) &gt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">//右旋转</span><br>            <span class="hljs-keyword">return</span> rightRotate(node);<br>        &#125;<br>        <span class="hljs-comment">//RR  &amp;&amp;后的参数确保了该树是一个RR树</span><br>        <span class="hljs-keyword">if</span> (balanceFactor &lt; -<span class="hljs-number">1</span> &amp;&amp; getBalanceFactor(node.right) &lt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> leftRotate(node);<br>        &#125;<br>        <span class="hljs-comment">//LR</span><br>        <span class="hljs-keyword">if</span> (balanceFactor &gt; <span class="hljs-number">1</span> &amp;&amp; getBalanceFactor(node.left) &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">//先以左孩子为节点进行左旋转</span><br>            node.left = leftRotate(node.left);<br>            <span class="hljs-comment">//其次在以node为根节点进行右旋正好构建成功</span><br>            <span class="hljs-keyword">return</span> rightRotate(node);<br>        &#125;<br>        <span class="hljs-comment">//RL</span><br>        <span class="hljs-keyword">if</span> (balanceFactor &lt; -<span class="hljs-number">1</span> &amp;&amp; getBalanceFactor(node.right) &gt; <span class="hljs-number">0</span>) &#123;<br>            node.right = rightRotate(node.right);<br>            <span class="hljs-keyword">return</span> leftRotate(node);<br>        &#125;<br>        <span class="hljs-keyword">return</span> node;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> AVL_;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AVLTree</span>&lt;K <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Comparable</span>&lt;K&gt;, V&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>        <span class="hljs-keyword">public</span> K key;<br>        <span class="hljs-keyword">public</span> V value;<br>        <span class="hljs-keyword">public</span> Node left, right;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> height;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(K key, V value)</span> &#123;<br>            <span class="hljs-built_in">this</span>.key = key;<br>            <span class="hljs-built_in">this</span>.value = value;<br>            left = <span class="hljs-literal">null</span>;<br>            right = <span class="hljs-literal">null</span>;<br>            height = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Node root;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AVLTree</span><span class="hljs-params">()</span> &#123;<br>        root = <span class="hljs-literal">null</span>;<br>        size = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isBST</span><span class="hljs-params">()</span> &#123;<br>        ArrayList&lt;K&gt; keys = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        inOrder(root, keys);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; keys.size(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (keys.get(i - <span class="hljs-number">1</span>).compareTo(keys.get(i)) &gt; <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inOrder</span><span class="hljs-params">(Node node, ArrayList&lt;K&gt; keys)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        inOrder(node.left, keys);<br>        keys.add(node.key);<br>        inOrder(node.right, keys);<br>    &#125;<br><br>    <span class="hljs-comment">//判断是否是一颗二叉平衡树</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isBalanced</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> isBalanced(root);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isBalanced</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">balanceFactor</span> <span class="hljs-operator">=</span> getBalanceFactor(node);<br>        <span class="hljs-keyword">if</span> (Math.abs(balanceFactor) &gt; <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> isBalanced(node.left) &amp;&amp; isBalanced(node.right);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size == <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getHeight</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> node.height;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getBalanceFactor</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> getHeight(node.left) - getHeight(node.right);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(K key, V value)</span> &#123;<br>        root = add(root, key, value);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">add</span><span class="hljs-params">(Node node, K key, V value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            size++;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(key, value);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (key.compareTo(node.key) &lt; <span class="hljs-number">0</span>) &#123;<br>            node.left = add(node.left, key, value);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key.compareTo(node.key) &gt; <span class="hljs-number">0</span>) &#123;<br>            node.right = add(node.right, key, value);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            node.value = value;<br>        &#125;<br>        <span class="hljs-comment">//更新height</span><br>        node.height = <span class="hljs-number">1</span> + Math.max(getHeight(node.right), getHeight(node.left));<br>        <span class="hljs-comment">//计算平衡因子</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">balanceFactor</span> <span class="hljs-operator">=</span> getBalanceFactor(node);<br>        <span class="hljs-keyword">if</span> (Math.abs(balanceFactor) &gt; <span class="hljs-number">1</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;unbalanced:&quot;</span> + balanceFactor);<br>        &#125;<br>        <span class="hljs-comment">//维护平衡性</span><br>        <span class="hljs-comment">//LL</span><br>        <span class="hljs-keyword">if</span> (balanceFactor &gt; <span class="hljs-number">1</span> &amp;&amp; getBalanceFactor(node.left) &gt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">//右旋转</span><br>            <span class="hljs-keyword">return</span> rightRotate(node);<br>        &#125;<br>        <span class="hljs-comment">//RR</span><br>        <span class="hljs-keyword">if</span> (balanceFactor &lt; -<span class="hljs-number">1</span> &amp;&amp; getBalanceFactor(node.right) &lt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> leftRotate(node);<br>        &#125;<br>        <span class="hljs-comment">//LR</span><br>        <span class="hljs-keyword">if</span> (balanceFactor &gt; <span class="hljs-number">1</span> &amp;&amp; getBalanceFactor(node.left) &lt; <span class="hljs-number">0</span>) &#123;<br>            node.left = leftRotate(node.left);<br>            <span class="hljs-keyword">return</span> rightRotate(node);<br>        &#125;<br>        <span class="hljs-comment">//RL</span><br>        <span class="hljs-keyword">if</span> (balanceFactor &lt; -<span class="hljs-number">1</span> &amp;&amp; getBalanceFactor(node.right) &gt; <span class="hljs-number">0</span>) &#123;<br>            node.right = rightRotate(node.right);<br>            <span class="hljs-keyword">return</span> leftRotate(node);<br>        &#125;<br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br><br>    <span class="hljs-comment">//右旋转</span><br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">rightRotate</span><span class="hljs-params">(Node y)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> y.left;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> x.right;<br>        x.right = y;<br>        y.left = temp;<br>        <span class="hljs-comment">//更新height值</span><br>        y.height = Math.max(getHeight(y.left), getHeight(y.right)) + <span class="hljs-number">1</span>;<br>        x.height = Math.max(getHeight(x.left), getHeight(x.right)) + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br><br>    <span class="hljs-comment">//左旋转</span><br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">leftRotate</span><span class="hljs-params">(Node y)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> y.right;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> x.left;<br>        x.left = y;<br>        y.right = temp;<br>        <span class="hljs-comment">//更新height的 值</span><br>        y.height = Math.max(getHeight(y.left), getHeight(y.right)) + <span class="hljs-number">1</span>;<br>        x.height = Math.max(getHeight(x.left), getHeight(x.right)) + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">getNode</span><span class="hljs-params">(Node node, K key)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (key.compareTo(node.key) == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> node;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key.compareTo(node.key) &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> getNode(node.left, key);<br>        &#125; <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> getNode(node.right, key);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">remove</span><span class="hljs-params">(K key)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> getNode(root, key);<br>        <span class="hljs-keyword">if</span> (node != <span class="hljs-literal">null</span>) &#123;<br>            root = remove(root, key);<br>            <span class="hljs-keyword">return</span> node.value;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//删除掉以node为根的二分搜索树中键为key的节点，递归算法</span><br>    <span class="hljs-comment">//返回删除节点后新的二分搜索树的根</span><br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">remove</span><span class="hljs-params">(Node node, K key)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        Node retNode;<br>        <span class="hljs-keyword">if</span> (key.compareTo(node.key) &lt; <span class="hljs-number">0</span>) &#123;<br>            node.left = remove(node.left, key);<br>            retNode = node;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key.compareTo(node.key) &gt; <span class="hljs-number">0</span>) &#123;<br>            node.right = remove(node.right, key);<br>            retNode = node;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//待删除的左子树为空</span><br>            <span class="hljs-keyword">if</span> (node.left == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">Node</span> <span class="hljs-variable">rightNode</span> <span class="hljs-operator">=</span> node.right;<br>                node.right = <span class="hljs-literal">null</span>;<br>                size--;<br>                retNode = rightNode;<br>            &#125;<br>            <span class="hljs-comment">//待删除的右子树为空</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (node.right == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">Node</span> <span class="hljs-variable">leftNode</span> <span class="hljs-operator">=</span> node.left;<br>                node.left = <span class="hljs-literal">null</span>;<br>                size--;<br>                retNode = leftNode;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//待删除左右子树都不为空</span><br>                <span class="hljs-type">Node</span> <span class="hljs-variable">successor</span> <span class="hljs-operator">=</span> minimum(node.right);<br>                successor.right = remove(node.right, successor.key);<br>                successor.left = node.left;<br>                node.left = node.right = <span class="hljs-literal">null</span>;<br>                retNode = successor;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (retNode == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-comment">//看是否需要维护平衡</span><br>            <span class="hljs-comment">//计算平衡因子</span><br>            <span class="hljs-comment">//更新height</span><br>            retNode.height = <span class="hljs-number">1</span> + Math.max(getHeight(retNode.right), getHeight(retNode.left));<br>            <span class="hljs-comment">//计算平衡因子</span><br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">balanceFactor</span> <span class="hljs-operator">=</span> getBalanceFactor(retNode);<br>            <span class="hljs-keyword">if</span> (Math.abs(balanceFactor) &gt; <span class="hljs-number">1</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;unbalanced:&quot;</span> + balanceFactor);<br>            &#125;<br><br>            <span class="hljs-comment">//维护平衡性</span><br>            <span class="hljs-comment">//LL</span><br>            <span class="hljs-keyword">if</span> (balanceFactor &gt; <span class="hljs-number">1</span> &amp;&amp; getBalanceFactor(retNode.left) &gt;= <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">//右旋转</span><br>                <span class="hljs-keyword">return</span> rightRotate(retNode);<br>            &#125;<br>            <span class="hljs-comment">//RR</span><br>            <span class="hljs-keyword">if</span> (balanceFactor &lt; -<span class="hljs-number">1</span> &amp;&amp; getBalanceFactor(retNode.right) &lt;= <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> leftRotate(retNode);<br>            &#125;<br>            <span class="hljs-comment">//LR</span><br>            <span class="hljs-keyword">if</span> (balanceFactor &gt; <span class="hljs-number">1</span> &amp;&amp; getBalanceFactor(retNode.left) &lt; <span class="hljs-number">0</span>) &#123;<br>                retNode.left = leftRotate(retNode.left);<br>                <span class="hljs-keyword">return</span> rightRotate(retNode);<br>            &#125;<br>            <span class="hljs-comment">//RL</span><br>            <span class="hljs-keyword">if</span> (balanceFactor &lt; -<span class="hljs-number">1</span> &amp;&amp; getBalanceFactor(retNode.right) &gt; <span class="hljs-number">0</span>) &#123;<br>                retNode.right = rightRotate(retNode.right);<br>                <span class="hljs-keyword">return</span> leftRotate(retNode);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> retNode;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">minimum</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node.left == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> node;<br>        &#125;<br>        <span class="hljs-keyword">return</span> minimum(node.left);<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(K key)</span> &#123;<br>        <span class="hljs-keyword">return</span> getNode(root, key) != <span class="hljs-literal">null</span>;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">get</span><span class="hljs-params">(K key)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> getNode(root, key);<br>        <span class="hljs-keyword">return</span> node == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : node.value;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(K key, V newValue)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> getNode(root, key);<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(key + <span class="hljs-string">&quot;doesn&#x27;t exist!&quot;</span>);<br>        &#125;<br>        node.value = newValue;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="2-3树"><a href="#2-3树" class="headerlink" title="2-3树"></a>2-3树</h1><blockquote><p>引导</p></blockquote><p>学习红黑树之前我们先来了解2-3树。顾名思义一个节点位置有一个或者两个元素。2-3树的基本性质如下：</p><p>①满足二分搜索树的基本性质</p><p>②节点可以存放一个元素或者两个元素</p><p>③每个节点有两个孩子或者三个孩子</p><p>④两个孩子叫做2节点 三个孩子叫做三节点</p><p>⑤2-3树是一棵绝对平衡的树</p><p>⑥红黑树和2-3树等价&amp;&amp;<strong>所有的红色节点都是向左倾斜（自定义）</strong></p><p>下面我们给出一个2-3树的图像：</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/1231.png" alt=""></p><p>由于红黑树的添加删除操作较为复杂这里值写出2-3树的添加操作如下图（和红黑树完全相同）：</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/ggg.png" alt=""></p><p>每次加入元素后都能保持数的绝对平衡。</p><h2 id="红黑树的实现"><a href="#红黑树的实现" class="headerlink" title="红黑树的实现"></a>红黑树的实现</h2><h3 id="实现准备"><a href="#实现准备" class="headerlink" title="实现准备"></a>实现准备</h3><ol><li>首先定义红黑色常量值</li><li>初始值均为红色</li><li>构建一个判断是否为红色节点的函数</li><li>构建左旋转<code>leftRotate()</code>右旋转<code>rightRotate()</code>和颜色翻转函数<code>flipColors()</code>函数</li><li>跟据以上准备实现红黑树</li></ol><h3 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h3><blockquote><p>结论</p></blockquote><p><strong>1.每个节点要么是红色要么是黑色</strong><br><strong>2.根节点是黑色的</strong><br><strong>3.每一个叶子节点（最后的空节点）是黑色的</strong><br><strong>4.如果一个节点是红色的 那么他的孩子节点都是黑色的，黑色节点的右孩子一定是黑色的</strong><br><strong>5.从任意一个节点到叶子节点，经过的黑色节点是一样的</strong></p><p><strong>红黑树的性能分析：最大高度2*logn 时间复杂度O(logn)</strong></p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/lllkk.png" alt=""></p><hr><p>总体和AVL树一样不过多了一个颜色的判断；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">BLACK</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">RED</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><span class="hljs-comment">//在Node节点中加入一个color共有属性 布尔类型的值</span><br><span class="hljs-comment">//并在Node的构造函数中使颜色初始值为RED</span><br></code></pre></td></tr></table></figure><blockquote><p>完成实现准备的代码</p><p>颜色翻转代码：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//颜色翻转</span><br> <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">flipColors</span><span class="hljs-params">(Node node)</span> &#123;<br>     node.color = RED;<br>     node.left.color = BLACK;<br>     node.right.color = BLACK;<br> &#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>添加新的元素代码：</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">//像红黑树中添加新的元素<br> public void add(K key, V value) &#123;<br>     root = add(root, key, value);<br>     root.color = BLACK;<br> &#125;<br></code></pre></td></tr></table></figure><p><strong>判断是否为红色：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isRed</span><span class="hljs-params">(Node node)</span> &#123;<br>     <span class="hljs-comment">//主要规避null叶子节点  </span><br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) <br>          <span class="hljs-keyword">return</span> BLACK;<br>      <span class="hljs-keyword">return</span> node.color;<br>  &#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>如果红黑树的添加节点后该节点右子树为红色并且其左子树不为红色则需要进行左反转：</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Node <span class="hljs-title function_">leftRotate</span><span class="hljs-params">(Node node)</span> &#123;<br>    <span class="hljs-comment">//左旋转</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> node.right;<br>    node.right = x.left;<br>    x.left = node;<br>    <span class="hljs-comment">//当翻转完成后 需要对颜色进行调换</span><br>    x.color = node.color;<br>    node.color = RED;<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>如果红黑树的添加节点后该节点左子树为红色并且其左子树的左孩子为红色则需要进行右反转：</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Node <span class="hljs-title function_">rightRotate</span><span class="hljs-params">(Node node)</span> &#123;<br>    <span class="hljs-comment">//右旋转</span><br>      <span class="hljs-type">Node</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> node.left;<br>      node.left = x.right;<br>      x.right = node;<br>    <span class="hljs-comment">//颜色调换</span><br>      x.color = node.color;<br>      node.color = RED;<br>      <span class="hljs-keyword">return</span> x;<br>  &#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>当添加元素的左孩子和右孩子均为红色的时候需要进行颜色的翻转</strong>最终实现的add函数为</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//向以node为根的红黑树中插入新的元素</span><br><span class="hljs-keyword">private</span> Node <span class="hljs-title function_">add</span><span class="hljs-params">(Node node, K key, V value)</span> &#123;<br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>        size++;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(key, value);  <span class="hljs-comment">//默认插入一个红色的节点</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (key.compareTo(node.key) &lt; <span class="hljs-number">0</span>) &#123;<br>        node.left = add(node.left, key, value);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key.compareTo(node.key) &gt; <span class="hljs-number">0</span>) &#123;<br>        node.right = add(node.right, key, value);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        node.value = value;<br>    &#125;<br>    <span class="hljs-comment">//红黑树的维护过程</span><br>    <span class="hljs-keyword">if</span> (isRed(node.right) &amp;&amp; !isRed(node.left)) &#123;<br>        node = leftRotate(node);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (isRed(node.left) &amp;&amp; isRed(node.left.left))<br>        node = rightRotate(node);<br>    <span class="hljs-keyword">if</span> (isRed(node.left) &amp;&amp; isRed(node.right))<br>        flipColors(node);<br><br>    <span class="hljs-keyword">return</span> node;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="红黑树的总结"><a href="#红黑树的总结" class="headerlink" title="红黑树的总结"></a>红黑树的总结</h3><p>1.对于完全随机的数据，普通的二分搜索树很好用 缺点：极端情况下退化成链表（高度不平衡）</p><p>2.对于查询较多的情况下 AVL很好用</p><p>3.红黑树牺牲了平衡性（2logn的高度）</p><p>4.统计性能更优（常用于增删改查的所有操作）</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AVL和红黑树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并查集</title>
      <link href="/2022/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
      <url>/2022/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><h2 id="1-概论"><a href="#1-概论" class="headerlink" title="1.概论"></a>1.概论</h2><blockquote><p><strong>定义</strong></p></blockquote><p>并查集是一种树形的数据结构，用于处理一些不相交集合的合并以及查询的问题，他的本质是通过一个一维数组来维护一个森林，开始时森林中的每一个节点都是孤立的，各成一个树，进行若干次的合并操作，每次合并将两个树合并为一个更大的树。</p><p>​       <strong>主要解决问题：链接问题和路径问题</strong>。</p><p>​    <strong>并查集在一些有N个元素的集合应用问题中，我们通常是在开始时让每个元素构成一个单元素的集合，然后按一定顺序将属于同一组的元素所在的集合<code>合并</code>，其间要反复<code>查找</code>一个元素在哪个集合中。</strong></p><blockquote><p>操作</p></blockquote><ol><li>将两个集合合并</li><li>询问两个数是否在一个集合中</li></ol><blockquote><p>基本原理</p></blockquote><p>每个集合用一棵树来表示。树根的编号就是整个集合的编号，每个节点存储他的父节点，也就是孩子指向父亲。</p><h2 id="由简单到深入"><a href="#由简单到深入" class="headerlink" title="由简单到深入"></a>由简单到深入</h2><p>公共接口:    设计两个接口 主要对其下标进行比较 <code>isConnected</code> 判断是否联合，<code>unionElements</code> 联合两个节点。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">int getSize();<br>boolean isConnected(int p,int q);<br>void unionElements(int p,int q);<br></code></pre></td></tr></table></figure><p>id               0        1        2         3         4        5        6        7        8        9</p><p>parent      0        1        0         1          0        1        0        1        0        1</p><blockquote><p>①由上述格式可知道判断两个元素是否连接可以比较他们的下标值是否相同。完成<code>find()</code> 函数。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span>&#123;<br>    <span class="hljs-keyword">if</span>(p&lt;<span class="hljs-number">0</span>&amp;&amp;p&gt;=id.length)&#123;<br>         <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;p is out of bound!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> id[p];        <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>②接着实现<code>isConnected()</code> 函数 主要判断两个元素是否属于同一个其中p,q是编号</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isConnected</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> q)</span> &#123;<br>       <span class="hljs-keyword">return</span> find(p)==find(q);<br>   &#125;<br></code></pre></td></tr></table></figure><blockquote><p>③实现两个编号下元素的融合<code>unionElements()</code> </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">pubilc <span class="hljs-keyword">void</span> <span class="hljs-title function_">unionElements</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> q)</span>&#123;<br>    <span class="hljs-type">int</span> pID=find(p);<br>    <span class="hljs-type">int</span> qID=find(q);<br>    <span class="hljs-keyword">if</span>(pID==qID)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;id.length;i++)&#123;<br>        <span class="hljs-keyword">if</span>(id[i]==pID)<br>            id[i]=qID;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里我们那上个id 和parent 的例子当编号1和4融合后的结果为</p><p>id               0        1        2         3         4        5        6        7        8        9</p><p>parent      0        0        0         0          0        0        0        0        0        0</p><p>因为上面的一工可以分为两波，当把他们不同的两个连接起来相当于整个元素全部连接了起来</p><h3 id="首先定义一个公共的接口类-以下不同的提高均需要用到"><a href="#首先定义一个公共的接口类-以下不同的提高均需要用到" class="headerlink" title="首先定义一个公共的接口类 以下不同的提高均需要用到"></a>首先定义一个公共的接口类 以下不同的提高均需要用到</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UF</span> &#123;<br>    <span class="hljs-comment">//设计两个接口 主要对其下标进行比较</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span>;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isConnected</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> q)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">unionElements</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> q)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="程序源代码"><a href="#程序源代码" class="headerlink" title="程序源代码"></a>程序源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnionFind1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UF</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] id;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UnionFind1</span><span class="hljs-params">(<span class="hljs-type">int</span> size)</span> &#123;<br>        id = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[size];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; id.length; i++) &#123;<br>            id[i] = i;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span> &#123;<br>        <span class="hljs-keyword">if</span> (p &lt; <span class="hljs-number">0</span> &amp;&amp; p &gt;= id.length) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;p is out of bound!&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> id[p];<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id.length;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isConnected</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> q)</span> &#123;<br>        <span class="hljs-keyword">return</span> find(p) == find(q);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unionElements</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> q)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">pID</span> <span class="hljs-operator">=</span> find(p);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">qID</span> <span class="hljs-operator">=</span> find(q);<br>        <span class="hljs-keyword">if</span> (pID == qID) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; id.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (id[i] == pID)<br>                id[i] = qID;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Quick-Union"><a href="#Quick-Union" class="headerlink" title="Quick Union"></a>Quick Union</h2><p>  <strong>将每一个元素，看做是一个节点。</strong> 该过程适用于有序序列从0开始</p><p>id               0        1        2         3         4        5        6        7        8        9</p><p>parent      0        1        2         3         4        5        6        7        8        9</p><p><strong>对于以上来说根据下图可以看出联合过程每次联合元素都找到他的祖先 ,让祖先进行连接</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/QQ01233319.png" alt=""></p><p>图片解析：对于<code>union(4,3)</code> 这里规定将4连接到3；起初他们都是孤立的节点指向自己本身即 p=parent(p);连接4，3时首先找到4，3的根节点都为其本身，其次让4的根节点指向3即 4的祖先指向3 先存储4，3的祖先为pRoot，qRoot然后连接 parent[pRoot]=qRoot;然后就实现了连接 </p><blockquote><p>所以我们可以对<code>find()</code>函数进行修改每次需要找到他的祖先,初始化的时候让id==parent</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span>&#123;<br>     <span class="hljs-keyword">if</span>(p&lt;<span class="hljs-number">0</span>&amp;&amp;p&gt;=id.length)&#123;<br>         <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;p is out of bound!&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//此处开始寻找其祖先</span><br>    <span class="hljs-keyword">while</span>(p!=parent[p])&#123;<br>        p=parent[p];<br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>对其联合两组元素情况代码最终让patent指向根节点</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unionElements</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> q)</span> &#123;<br>    <span class="hljs-comment">//得到p的根节点   </span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">pRoot</span> <span class="hljs-operator">=</span> find(p);<br>    <span class="hljs-comment">//得到q的根节点</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">qRoot</span> <span class="hljs-operator">=</span> find(q);<br>     <span class="hljs-keyword">if</span> (pRoot == qRoot) &#123;<br>           <span class="hljs-keyword">return</span>;<br>       &#125;<br>    <span class="hljs-comment">//最终让pRoot指向qRoot实现了连接</span><br>       parent[pRoot] = qRoot;<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="程序源代码-1"><a href="#程序源代码-1" class="headerlink" title="程序源代码"></a>程序源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnionFind2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UF</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] parent;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UnionFind2</span><span class="hljs-params">(<span class="hljs-type">int</span> size)</span> &#123;<br>        parent = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[size];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>            parent[i] = i;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> parent.length;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span> &#123;<br>        <span class="hljs-keyword">if</span> (p &lt; <span class="hljs-number">0</span> &amp;&amp; p &gt;= parent.length)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;p is out of bound&quot;</span>);<br>        <span class="hljs-keyword">while</span> (p != parent[p]) &#123;<br>            p = parent[p];<br>        &#125;<br>        <span class="hljs-keyword">return</span> p;<br>    &#125;<br><br>    <span class="hljs-comment">//判断p和q是否在同一个集合</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isConnected</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> q)</span> &#123;<br>        <span class="hljs-keyword">return</span> find(p) == find(q);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unionElements</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> q)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">pRoot</span> <span class="hljs-operator">=</span> find(p);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">qRoot</span> <span class="hljs-operator">=</span> find(q);<br>        <span class="hljs-keyword">if</span> (pRoot == qRoot) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        parent[pRoot] = qRoot;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="基于size的优化"><a href="#基于size的优化" class="headerlink" title="基于size的优化"></a>基于size的优化</h2><p>​    在第二版本的并查集中<code>find()</code> 是一个不断索引的过程 不是顺次的访问，而是在不同的地址跳转所以访问较慢，其复杂度为O(h)，<code>isConnected()</code>复杂度高。</p><p>​     为了使形成的树不会因为不断连接而形成一条链表，所以我们让元素少的根节点指向元素多的根节点，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/asd123.png" alt=""></p><p>按照正常情况连接成一条链表增加了树的高度提升了时间复杂度使效率变慢。但是考虑到size()情况后可以让元素少的指向元素多的，这样就避免了单链表的形成。</p><blockquote><p>具体修改代码如下：</p></blockquote><p>①首先添加私有成员变量<code>private int []sz</code> 便是以i为根的集合中元素的个数</p><p>②修改构造函数中对于初始化的数组每个节点添加<code>sz[i]=1</code>;</p><p>③<code>find()</code>函数和第版一致</p><p>④<code>unionElements()</code>函数进行修改操作如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unionElements</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> q)</span>&#123;<br>    <span class="hljs-type">int</span> pRoot=find(p);<br>    <span class="hljs-type">int</span> qRoot=fin(q);<br>    <span class="hljs-keyword">if</span>(pRoot==qRoot)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">//以下判断size的大小进行不同的连接方式可以实现树的深度降低;</span><br>    <span class="hljs-keyword">if</span>(sz[pRoot]&lt;sz[qRoot])&#123;<br>        parent(pRoot)=qRoot;<br>        sz[qRoot]+=sz(pRoot);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        parent[qRoot]=pRoot;<br>        sz[pRoot]+=sz[qRoot];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="程序源代码-2"><a href="#程序源代码-2" class="headerlink" title="程序源代码"></a>程序源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">//基于size的优化</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnionFind3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UF</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] parent;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] sz;  <span class="hljs-comment">//sz[i]表示以i为根的集合中元素的个数</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UnionFind3</span><span class="hljs-params">(<span class="hljs-type">int</span> size)</span> &#123;<br>        parent = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[size];<br>        sz = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[size];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>            parent[i] = i;<br>            sz[i] = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> parent.length;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span> &#123;<br>        <span class="hljs-keyword">if</span> (p &lt; <span class="hljs-number">0</span> &amp;&amp; p &gt;= parent.length)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;p is out of bound&quot;</span>);<br>        <span class="hljs-keyword">while</span> (p != parent[p]) &#123;<br>            p = parent[p];<br>        &#125;<br>        <span class="hljs-keyword">return</span> p;<br>    &#125;<br><br>    <span class="hljs-comment">//判断p和q是否在同一个集合</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isConnected</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> q)</span> &#123;<br>        <span class="hljs-keyword">return</span> find(p) == find(q);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unionElements</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> q)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">pRoot</span> <span class="hljs-operator">=</span> find(p);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">qRoot</span> <span class="hljs-operator">=</span> find(q);<br>        <span class="hljs-keyword">if</span> (pRoot == qRoot) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (sz[pRoot] &lt; sz[qRoot]) &#123;<br>            parent[pRoot] = qRoot;<br>            sz[qRoot] += sz[pRoot];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            parent[qRoot] = pRoot;<br>            sz[pRoot] += sz[qRoot];<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="基于rank的优化"><a href="#基于rank的优化" class="headerlink" title="基于rank的优化"></a>基于rank的优化</h2><p>目的：为了使每次两个不同的集合连接后数的高度尽量不增加此处我们进行rank优化代码与基于size优化代码类似 只不过将<code>private int []sz</code> 改为<code>private int []rank</code> 并且在构造函数中赋予初始高度为1；</p><p>下面主要修改<code>unionElements()</code>函数</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/zzzz11.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unionElements</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> q)</span>&#123;<br>    <span class="hljs-type">int</span> pRoot=find(p);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">qRoot</span> <span class="hljs-operator">=</span> find(q);<br>    <span class="hljs-keyword">if</span> (pRoot == qRoot) &#123;<br>       <span class="hljs-keyword">return</span>;<br>     &#125;<br>    <span class="hljs-comment">//根据两个元素所在树的rank不同判断合并的方向</span><br>    <span class="hljs-comment">//将rank低的集合合并到rank高的集合上,代码实现逻辑如下</span><br>    <span class="hljs-keyword">if</span>(rank[pRoot]&lt;rank[qRoot])&#123;<br>        parent[pRoot]=qRoot;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(rank[qRoot]&lt;rank[pRoot])&#123;<br>        parent[qRoot]=pRoot;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">//当两个的rank相同时则合并后整体高度+1</span><br>        parent[qRoot]=pRoot;<br>        rank[pRoot]+=<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="基于rank的优化和路径压缩"><a href="#基于rank的优化和路径压缩" class="headerlink" title="基于rank的优化和路径压缩"></a>基于rank的优化和路径压缩</h2><p>目的：解决单链表的问题，这个解决方法发生在find过程中，在find过程中实现路径压缩在向上遍历的时候执行<code>parent[p]=parent[parent[p]]</code>  整体代码和基于rank的代码相同 原理图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/yyyy11.png" alt=""></p><p>图片解析：首先当<code>find(4)</code>的时候让其parent指向父亲的父亲也就是2。其次构成树Ⅱ然后走向节点2让其parent指向父亲的父亲构成树Ⅲ，当p!=parent[p]时终止条件此时的优化已经完成。</p><p><code>find()</code>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span> &#123;<br>        <span class="hljs-keyword">if</span> (p &lt; <span class="hljs-number">0</span> &amp;&amp; p &gt;= parent.length)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;p is out of bound&quot;</span>);<br>        <span class="hljs-keyword">while</span> (p != parent[p]) &#123;<br>            parent[p] = parent[parent[p]];<br>            p = parent[p];<br>        &#125;<br>        <span class="hljs-keyword">return</span> p;<br>    &#125;<br><br><span class="hljs-comment">//也可以递归的实现find的路径压缩</span><br>   <span class="hljs-comment">//find的递归实现</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span> &#123;<br>        <span class="hljs-keyword">if</span> (p &lt; <span class="hljs-number">0</span> &amp;&amp; p &gt;= parent.length)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;p is out of bound&quot;</span>);<br>        <span class="hljs-keyword">if</span> (p != parent[p]) &#123;<br>            <span class="hljs-comment">//路径压缩</span><br>            parent[p] = find(parent[p]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> parent[p];<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="程序源代码-3"><a href="#程序源代码-3" class="headerlink" title="程序源代码"></a>程序源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnionFind6</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UF</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] parent;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] rank;  <span class="hljs-comment">//sz[i]表示以i为根的集合中元素的个数</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UnionFind6</span><span class="hljs-params">(<span class="hljs-type">int</span> size)</span> &#123;<br>        parent = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[size];<br>        rank = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[size];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>            parent[i] = i;<br>            rank[i] = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> parent.length;<br>    &#125;<br><br>    <span class="hljs-comment">//find的递归实现</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span> &#123;<br>        <span class="hljs-keyword">if</span> (p &lt; <span class="hljs-number">0</span> &amp;&amp; p &gt;= parent.length)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;p is out of bound&quot;</span>);<br>        <span class="hljs-keyword">if</span> (p != parent[p]) &#123;<br>            <span class="hljs-comment">//路径压缩</span><br>            parent[p] = find(parent[p]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> parent[p];<br>    &#125;<br>    <span class="hljs-comment">//判断p和q是否在同一个集合</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isConnected</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> q)</span> &#123;<br>        <span class="hljs-keyword">return</span> find(p) == find(q);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unionElements</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> q)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">pRoot</span> <span class="hljs-operator">=</span> find(p);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">qRoot</span> <span class="hljs-operator">=</span> find(q);<br>        <span class="hljs-keyword">if</span> (pRoot == qRoot) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//根据两个元素所在树的rank不同判断合并的方向</span><br>        <span class="hljs-comment">//将rank低的集合合并到rank高的集合上</span><br>        <span class="hljs-keyword">if</span> (rank[pRoot] &lt; rank[qRoot]) &#123;<br>            parent[pRoot] = qRoot;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rank[qRoot] &lt; rank[pRoot]) &#123;<br>            parent[qRoot] = pRoot;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            parent[qRoot] = pRoot;<br>            rank[pRoot] += <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理</title>
      <link href="/2022/08/31/%E5%A4%A7%E4%B8%89%E4%B8%8A%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/"/>
      <url>/2022/08/31/%E5%A4%A7%E4%B8%89%E4%B8%8A%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机系统概述"><a href="#计算机系统概述" class="headerlink" title="计算机系统概述"></a>计算机系统概述</h1><p>（一）计算机的发展历程</p><p>（二）计算机的系统层次结构</p><ol><li>计算机系统的基本组成</li><li>计算机硬件的基本组成</li><li>计算机软件和硬件的关系</li><li>计算机的工作过程</li></ol><p>（三）计算机的性能指标</p><p>吞吐量、响应时间、CPU时钟周期、主频、CPI、CPU执行时间、MIPS、MFLOPS、GFLOPS、TFLOPS、PFLOPS</p><h2 id="核心考点"><a href="#核心考点" class="headerlink" title="核心考点"></a>核心考点</h2><p>1.冯·诺依曼计算机的基本特点与指令执行过程</p><p>2.计算机的各种性能指标</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/adadad.png" alt=""></p><h2 id="1-1计算机的分类"><a href="#1-1计算机的分类" class="headerlink" title="1.1计算机的分类"></a>1.1计算机的分类</h2><blockquote><p>电子模拟计算机</p></blockquote><p>  模拟计算机根据相似原理，用一种连续变化的 <strong>模拟量</strong> 作为被运算对象。模拟计算机以<strong>电子线路</strong>构成基本部件，主要由运算部件、控制部件、输入输出设备等组成，核心部件是<strong>运算放大器</strong>。</p><blockquote><p>电子数字计算机</p></blockquote><p>​    数字计算机根据<strong>算盘原理</strong>发展而来，用离散数字表示数量的大小。数字计算机的主要特点是<strong>按位运算</strong>，并且通过<strong>程序控制</strong>方式不连续地跳动计算。</p><p><strong>ENIAC 宣告人类进入电子计算机时代。</strong> 他是世界上第一台实际运行的存储程序式电子计算机。</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/aa143712.png" alt=""></p><blockquote><p>数字计算机的分类</p></blockquote><p>根据计算机的效率、速度价格和运行经济性适应性分为两类：专用计算机和通用计算机</p><blockquote><p>通用计算机的分类</p></blockquote><p>超级计算机、大型机、服务器、PC机、单片机</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/uyuu144108.png" alt=""></p><h2 id="1-2-计算机发展简史"><a href="#1-2-计算机发展简史" class="headerlink" title="1.2 计算机发展简史"></a>1.2 计算机发展简史</h2><blockquote><p>计算机的性能指标</p></blockquote><p><strong>吞吐量</strong>：表征一台计算机在某一时间间隔内能够处理的信息量，单位是字节/秒（B/S）</p><p><strong>响应时间</strong>：表征从输入有效到系统产生响应之间的时间度量，用时间单位来度量 微妙（10^-6^S）、纳秒(10^-9^S)</p><p><strong>利用率</strong>：表示在给定的时间间隔内，系统被实际使用的时间所占的比率，一般用百分比表示。</p><p><strong>处理机字长</strong>：指处理机运算器中一次能够完成二进制数运算的位数。当前处理机的字长有8位、16位、32位、64位。</p><p><strong>字长越长，表示计算的精度越高。计算机的性能指标</strong></p><p><strong>总线宽度</strong>：CPU运算器与存储器之间进行互连的内部总线二进制位数。</p><p><strong>存储器容量</strong>：存储器中所有存储单元的总数目，通常用KB、MB、GB、TB来表示。其K=210，M=220，G=230，T=240，B=8位（1个字节  ）。存储器容量越大，记忆的二进制数越多。</p><p><strong>存储器带宽</strong>：存储器的速度指标，单位时间内从存储器读出的二进制数信息量，一般用字节数/秒表示。</p><p><strong>主频/时钟周期</strong>：CPU的工作节拍受主时钟控制，主时钟不断产生固定频率的时钟，主时钟的频率（f）叫CPU的主频。度量单位是MHz（兆赫兹）、GHz（吉赫兹）</p><p>主频的倒数称为CPU的时钟周期（T）即T=1/f，度量单位是微秒、纳秒。</p><p>CPU的执行时间：表示CPU执行一段程序所占用的CPU时间，用下列式子计算：</p><p>​     <strong>CPU执行时间 =CPU时钟周期数×CPU时钟周期长</strong></p><p>CPI表示每条指令占据的周期数，即执行一条指令所需的平均时钟周期数。用下式计算：</p><script type="math/tex; mode=display">CPI=\frac{执行某段程序所需的CPU时钟周期数}{该程序包含的指令条数}</script><p>MIPS  表示每条百万条指令数目，用下式计算：</p><script type="math/tex; mode=display">MIPS=\frac{指令条数}{程序执行时间×10^6}=\frac{时钟频率}{CPI×10^6}</script><p>程序执行时间Te为：</p><script type="math/tex; mode=display">程序执行时间为Te=\frac{指令条数}{MIP×10^6}</script><p>MFLOPS 表示每秒百万次浮点操作次数，用下式计算：</p><script type="math/tex; mode=display">MFLOPS=\frac{程序中的浮点数}{程序执行时间×10^6}</script><p>MIPS是单位时间内执行的百万条顶点指令数，MIPS值越高说明极其速度越快</p><p>MFLOPS是基于操作而非指令的，只能用来衡量机器浮点操作的性能，而不能体现机器的整体性能。</p><p>TFLOPS表示每秒万亿次浮点操作次数，该技术指标一般在超级计算机中使用。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>【例1.1】对于一个给定的程序，<strong><script type="math/tex">I_N</script></strong>表示执行程序中的指令总数，<strong><script type="math/tex">t_{CPU}</script></strong>表示执行该程序所需的<strong>CPU</strong>时间，<strong>T</strong>为时钟周期，<strong>f</strong>为时钟频率（T的倒数），<strong><script type="math/tex">N_C</script></strong>为<strong>CPU</strong>时钟周期数。设<strong>CPI</strong>表示每条指令的平均时钟周期数，<strong>MIPS</strong>表示每秒钟执行的百万条指令，请写出如下四种参数的表达式：</p><script type="math/tex; mode=display">(1) t_{CPU}     (2)CPI      (3)MIPS     (4)N_C</script><blockquote><p>解：有题可知</p></blockquote><script type="math/tex; mode=display">(1)t_{CPU}=N_{C}×T=N_C÷f=I_N×CPI×T=\sum_{i=1}^{n}(CPI~i~×\frac{I_i}{I_N})</script><script type="math/tex; mode=display">(2) CPI=\frac{N_C}{I_N}=\sum_{i=1}^{n}(CPI_i×\frac{I_i}{I_N}) --- CPI_i表示i种指令所需平均时钟周期数</script><script type="math/tex; mode=display">(3)MIPS=\frac{I_N}{t_{CPU}}×10^{-6}=\frac{f}{CPI×10^6}----n为指令种类</script><script type="math/tex; mode=display">\frac{1}{MIPS}×10^{-6}=\frac{t_{CPU}}{I_N}=\frac{CPI}{f}=CPI×T-----表示每条指令的平均执行时间</script><script type="math/tex; mode=display">（4）N_C=\sum_{i=1}^{n}(CPI_i×I_i) -----I_i表示i种指令在程序中执行的次数</script><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/屏幕截图 2022-08-31 161257.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/20220831161503.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/20220831161746.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/20220831161954.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/20220831162025.png" alt=""></p><blockquote><p>CPU的时钟频率越高，机器的速度就越快，对吗?</p></blockquote><p>​     在其他因素不变的情况下，CPU的时钟频率越高，机器的速度肯定越快。但是，  程序执行的速度除了与CPU的速度有关外，还与存储器和IO模块的存取速度、总线的传输速度、Cache的设计策略等有很大关系。因此，机器的速度不是只由CPU的时钟频率决定的.</p><blockquote><p>执行时间(响应时间)与CPI是什么关系?</p></blockquote><p>​    通常，一条特定指令的CPI是一个确定的值，而某个程序的CPI是一个平均值。一个程序的执行时间取决于该程序所包含的指令数、CPI和时钟周期。在指令数和时钟周期一定的情况下，CPI越大，执行时间越长.</p><h2 id="数字计算机基本组成"><a href="#数字计算机基本组成" class="headerlink" title="数字计算机基本组成"></a>数字计算机基本组成</h2><p>控制器：人的大脑的操作控制功能</p><p>运算器：人的大脑的计算功能</p><p>存储器：人的大脑的记忆功能</p><p>输入设备：交互接口，笔</p><p>输出设备：交互接口，纸</p><blockquote><p>冯诺依曼计算机</p></blockquote><p>​    （1）计算机由运算器、存储器、控制器、输入设备和输出设备五大部件组成。</p><p>​    （2）指令和数据以同等的地位保存于存储器内，并可按照地址访问存储器。</p><p>​    （3）指令和数据均用二进制代码表示。</p><p>​    （4）指令由 操作码和地址码组成，操作码用来表示操作的性质（是加法还是减法，或者其他操作），地址码用来表示操作数在存储器中的位置。</p><p>​    （5）指令在存储器内按顺序存放。通常指令是按顺序执行的，在特定条件下，可根据运算结果或设定的条件改变执行顺序</p><p>​    （6）机器以运算器为中心，  输入/输出设备与存储器之间的数据传送通过运算器完成</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/20220831163834.png" alt=""></p><blockquote><p>（1）存储器</p></blockquote><p>​    存储器分为主存储器（简称主存，  也称内存储器）和辅助存储器（简称辅存，也称外存储器)。CPU能够<strong>直接访问</strong>的存储器是主存储器。<strong>主存储器</strong>是存放程序和数据的部件。</p><p>​    <strong>辅助存储器</strong>用于帮助主存储器记忆更多的信息，辅助存储器中的信息必须调入主存后，才能被CPU访问</p><blockquote><p>（2）控制器</p></blockquote><p>​    指令和程序：指令的形式（操作和地址码、存储程序的概念、指令中程序和数据的存放、指令系统。</p><p>​           操作码———————-地址码</p><p>​    <strong>操作码</strong>指出指令所进行的操作，如加、减、乘、除、取数、  存数等。</p><p>​    <strong>地址码</strong>表示参加运算的数据应从存储器的哪个单元中取来，或运算的结果应该存到哪个单元中去。</p><p>​    <strong>指令</strong>的操作码和地址码用二进制代码来表示。</p><blockquote><p>指令和数据存储</p></blockquote><p>​    存储器既可存放数据也可存放指令，将程序(指令序列)存放到存储器中称为存储程序，而控制器  依据存储的程序来控制-协调完成计算任务叫做程序控制。</p><p><strong>控制器的任务</strong>： 按照顺序一条一条的执行指令（取指令，指令译码、执行指令）。取址周期和执行周期。也可以区分开那些是指令字，那些是数据字。取指周期中从内存读出的信息流是指令流，它流向控制器；而在执行器周期中从内存读出的信息流是数据流，它由内存流向运算器。</p><h1 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h1><blockquote><p>1.比较电子数字计算机和电子模拟计算机的特点。</p></blockquote><p>电子数字计算机：数据表式为数字0和1 ，计算方式为 数字计数 控制方式为：程序控制 精度高，数据存储量大，逻辑判断能力强。</p><p>电子模拟计算机：数据表示方式为电压，计算方式为电压组合和测量值，控制方式为：盘上连线，精度低、数据存储量小、无逻辑判断能力。</p><blockquote><p>2.冯诺依曼计算机的主要设计思想是什么？它包括那些主要组成部分？</p></blockquote><p>主要设计思想：</p><p>①采用二级制表示数据和指令，指令由操作码和地址码组成。</p><p>②存储程序，程序控制：将程序和数据存放在存储器中，并可按照地址访问存储器完成计算。</p><p>③指令在存储器内按顺序存放。通常指令是按顺序执行的，在特定条件下，可根据运算结果或设定的条件改变执行顺序</p><p>④机器以运算器为中心，  输入/输出设备与存储器之间的数据传送通过运算器完成</p><p>主要组成部分：存储器、运算器、控制器、输入设备、输出设备</p><blockquote><p>3.什么是存储容量？什么是单元地址？什么是数据字？什么是指令字？</p></blockquote><p><strong>存储容量</strong>：存储器所有存储单元的总数称为存储器的存储容量，通常用单位KB、MB来表示存储容量越大，表示计算机记忆存储的信息越多</p><p><strong>单元地址</strong>：： 单元地址简称地址， 在存储器中每个存储单元都有唯一的地址编号， 称为单元地<br>址。</p><p><strong>数据字</strong>：某字代表要处理的数据</p><p><strong>指令字</strong>：某字为一条指令</p><blockquote><p>6.什么是指令？什么是程序？</p></blockquote><p>每一个基本操作就叫做条指令，而解算某一问题的一串指令序列叫做该问题的计算程序简称为程序</p><blockquote><p>7.指令和数据均存放在内存中，计算机如何区分他们是指令还是数据？</p></blockquote><p>在取指周期中从存储器读出的信息即指令信息， 而在执行周期中从存储器中读出的信息即为数据信息</p><blockquote><p>8.什么是内存？什么是外存？什么是CPU？什么是适配器？简述其功能。</p></blockquote><p> 一般由半导体存储器构成， 装在底版上， 可直接和 CPU 交换信息的存储器称为内存储器， 简称内存。</p><p>外存： 为了扩大存储容量， 又不使成本有很大的提高， 在计算机中还配备了存储容量更大的<br>磁盘存储器和光盘存储器， 称为外存储器， 简称外存。 外存可存储大量的信息， 计算机需要使用时， 再调入内存。</p><p>CPU： 包括运算器和控制器。 基本功能为： 指令控制、 操作控制、时间控制、 数据加工。</p><p>适配器： 连接主机和外设的部件， 起一个转换器的作用， 以使主机和外设协调工作。</p><blockquote><p>10.说明软件的发展的演变过程</p></blockquote><p> 汇编语言的发展  手编程序—&gt;汇编语言程序——&gt;高级程序</p><p>系统软件的发展：操作系统———-&gt;数据库管理系统</p><blockquote><p>12.为什么软件能够转换为硬件，硬件能够转换为软件？实现这种转换的媒介是什么？</p></blockquote><p>​    随着大规模集成电路技术的发展和软件硬化的趋势,要明确划分计算机系统软、硬件界限已经显得比较困难了,因为任何操作可以由软件来实现,也可以由软件来完成,对于某一机器功能采用硬件方案还是软件方案,取决于价格、速度、可靠性、存储容量、变更周期等因素。</p><blockquote><p>13.CPU的性能指标有哪些？其概念是什么？</p></blockquote><p>cpu的性能指标有主频、外频、倍频系数和制程技术</p><p>主频：CPU的时钟频率，一个时钟周期完成的指令数是固定的，主频越高，CPU的速度也就越快</p><p>外频：外频是CPU的基准频率，CPU的外频决定着整块主板的运行速度。</p><p>倍频系数：倍频系数是指CPU主频与外频之间的相对比例关系。在相同的外频下，倍频越高CPU的频率也越高。</p><p>制程技术：制程越小发热量越小，这样就可以集成更多的晶体管，CPU效率也就更高</p><blockquote><p>计算题1</p></blockquote><p>设有主频24MHz 的CPU，平均每条指令的执行时间为2个机器周期，每个机器周期由2个时钟周期组成试求:</p><p>1）机器的工作速度。</p><p>2）假如每个指令周期中有一个是访存周期，需插入2个时钟周期的等待时间，求机器的工作速度。</p><blockquote><p>计算题二</p></blockquote><p>用一个时钟频率为40MHz的处理器执行标准测试程序，它所包含的混合指令数和响应所需的时钟周期见表1-10。试求出有效的CPI、MIPS速率和程序的执行时间（假设有N条指令)。</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/20220831190857.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树学习</title>
      <link href="/2022/08/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
      <url>/2022/08/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h1><p>​     用途：线段树主要用来搜寻一个区间里的最大或者最小值亦或者一个区间内的数据之和，线段树是一种<a href="https://baike.baidu.com/item/二叉搜索树/7077855?fromModule=lemma_inlink">二叉搜索树</a>，与<a href="https://baike.baidu.com/item/区间树/5772433?fromModule=lemma_inlink">区间树</a>相似，它将一个区间划分成一些单元区间，每个单元区间对应线段树中的一个叶结点，使用线段树可以快速的查找某一个节点在若干条线段中出现的次数，时间复杂度为O(logN)。而未优化的空间复杂度未2N，实际应用时一般还要开4N的数组已免越界，因此有时候需要离散化让空间压缩。</p><h2 id="1-线段树的原理"><a href="#1-线段树的原理" class="headerlink" title="1.线段树的原理"></a>1.线段树的原理</h2><ol><li><code>E[]tree</code>  线段树   <code>E[] data</code>线段树的私有数组 存储传进来的数组  <code>Merger&lt;E&gt; merger</code> 一个函数接口 用于对线段树找到的一个区间内的值进行比较。</li><li><code>public SegmentTree(E[]arr,Merger&lt;E&gt;merger)</code> 对传入的数组进行初始化到<code>data</code>数组中,对接口也进行初始化 然后在调用<code>buildSegmentTree()</code> 函数。</li><li><code>buildSegmentTree(int treeIndex,int l,int r)</code>该函数是建造线段树</li><li><code>E get(int index)</code> 得到下标为index的值</li><li><code>getSize()</code> 得到传入数组的大小</li><li><code>leftChild(index) rightChild</code> 得到下标为index的左右孩子的下标</li><li><code>query(int queryL,int queryR)</code> 公共接口调用重构函数<code>query(treeIndex,l,R,quaryL,quaryR)</code> 函数</li><li><code>query(int treeIndex, int l, int r, int queryL, int queryR)</code> 该函数实现查找一个区间内元素并进行Merger操作；</li><li><code>set(int index,E e)</code> 该函数寻找下标为index的值并对其进行修改操作递归调用其私有函数<code>set(int treeIndex, int l, int r, int index, E e)</code> </li><li><code>set(int treeIndex, int l, int r, int index, E e)</code> 当修改元素成功后 对一个区间内的元素进行Merger操作实现动态操作</li></ol><ul><li><p>线段树的原理：线段树除了最后一层之外，是一颗满<a href="https://so.csdn.net/so/search?q=二叉树&amp;spm=1001.2101.3001.7020">二叉树</a>，假设区间中存在n个数据，则倒数第二层节点数大于为n，从第一层到倒数第三层的节点数大约为n-1，最后一层节点数很少，但是为了使用数组存储整棵树，最后一层大约需要开2n的空间，因此一共需要开辟4n的空间存储线段树。</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/195253.png" alt=""></p></li></ul><p><strong>为了使该线段树方便构造A[0]下面应该也有两个null的左右子树同理A[1]~A[7]都有</strong></p><p><u>在这里我们让左子树的数目少于右子树 即当区间分割时向下取整</u> </p><p>理论原理：假如我们搜寻区间下标[2-5]则从根节点出发 因为 mid :7/2=3(向下取整) 2<3 &&5>3 所以该区间在根节点的左右子树上  然后我们来到左子树 以左子树[0,3]作为根节点 mid: 3/2=1 因为2&gt;1故改区间为[2,3]  同理 可以求出右子树上的区间范围为[4,5];最后将两个区间进行合并求merger操作；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//(1)SegmentTree 构造函数</span><br> <span class="hljs-keyword">public</span> <span class="hljs-title function_">SegmentTree</span><span class="hljs-params">(E[] arr, Merger&lt;E&gt; merger)</span> &#123;<br>          <span class="hljs-comment">//对改merger操作进行初始化</span><br>        <span class="hljs-built_in">this</span>.merger = merger;     <br>        <span class="hljs-comment">//!!将data类型 格式转化为Objiect 并赋予与arr.length 一样的空间</span><br>        data = (E[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[arr.length];  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            data[i] = arr[i];  <span class="hljs-comment">//arr将数组中的值进行拷贝到data</span><br>        &#125;<br>     <span class="hljs-comment">//首先对线段树的内存空间进行初始化 并对其进行类型的转换然后才能接收到data[]内的值</span><br>        tree = (E[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">4</span> * arr.length]; <br>        <span class="hljs-comment">//建造线段树 (节点0，最小下标，和最大下标)</span><br>       <span class="hljs-comment">//调用建造线段树的函数</span><br>        buildSegmentTree(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, data.length - <span class="hljs-number">1</span>); <br>    &#125;<br>   <span class="hljs-comment">//当一切都进行初始化完毕然后就调用私有函数buildSegmentTree</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildSegmentTree</span><span class="hljs-params">(<span class="hljs-type">int</span> treeIndex, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> &#123;<br>        <span class="hljs-comment">// 该函数是个递归函数 先考虑结束情况当r==l是程序结束 也就是只剩下一个叶子节点 </span><br>        <span class="hljs-keyword">if</span> (r == l) &#123;<br>            tree[treeIndex] = data[r];  <span class="hljs-comment">//将叶子节点挂在tree树上</span><br>            <span class="hljs-keyword">return</span>;      <br>        &#125;<br>      <span class="hljs-comment">//线段树的建造流程 </span><br>       <span class="hljs-comment">//首先进行中间下标的求解 这样写是为了防止越界</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> l + (r - l) / <span class="hljs-number">2</span>;    <br>      <span class="hljs-comment">//得到左右孩子的下标用于作为根节点进行递归调用 </span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">leftTreeIndex</span> <span class="hljs-operator">=</span> leftChild(treeIndex);  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">rightTreeIndex</span> <span class="hljs-operator">=</span> rightChild(treeIndex); <br>    <span class="hljs-comment">//开始递归的调用该函数首先以左孩子下标为跟节点建造 区间（L,mid）同理右孩子为(mid+1,r)</span><br>        buildSegmentTree(leftTreeIndex, l, mid);<br>        buildSegmentTree(rightTreeIndex, mid + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-comment">//当调用到底层的时候也就是 叶子节点 他们存的值为 自己左右孩子进行外部接口的merger操作后存入该节点 同理递归的往上调用</span><br>        tree[treeIndex] = merger.merge(tree[leftTreeIndex], tree[rightTreeIndex]);<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>当线段树构造完成以后完成一些以上函数所调用的函数</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> E <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;   <br>       <span class="hljs-comment">//获取下标为index的值 需要判断数组是否越界了</span><br>       <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt;= data.length)<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Index is illegal&quot;</span>);<br>         <span class="hljs-comment">//然后在data数组中直接返回</span><br>       <span class="hljs-keyword">return</span> data[index];  <br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">return</span> data.length;<br>   &#125;<br>   <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">leftChild</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>       <span class="hljs-comment">//根据二叉树的性质可以得出左孩子下标和有孩子下标</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * index + <span class="hljs-number">1</span>;  <br>   &#125;<br>   <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">rightChild</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * index + <span class="hljs-number">2</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>当以上两步都完成的时候，可以进行查询区间的操作</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//该函数因为需要递归调用 所以要传入根节点 左右下标和 查询的左右区间下标  </span><br><span class="hljs-keyword">private</span> E <span class="hljs-title function_">query</span><span class="hljs-params">(<span class="hljs-type">int</span> treeIndex, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> queryL, <span class="hljs-type">int</span> queryR)</span> &#123;<br>    <span class="hljs-comment">//首先对递归到第的情况进行判断 就是当l和r与查询的queryL,queryR的下标相同时直接返回根节点的值   </span><br>    <span class="hljs-keyword">if</span> (l == queryL &amp;&amp; r == queryR) &#123;  <br>            <span class="hljs-keyword">return</span> tree[treeIndex];<br>        &#125;<br>    <span class="hljs-comment">//正常流程先 求取中间值的下标</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> l + (r - l) / <span class="hljs-number">2</span>;<br>    <span class="hljs-comment">//得到左右孩子的下标</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">leftTreeIndex</span> <span class="hljs-operator">=</span> leftChild(treeIndex);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rightTreeIndex</span> <span class="hljs-operator">=</span> rightChild(treeIndex);<br>    <span class="hljs-comment">//判断该区间是否在 线段树的右子树如果是的化就以右孩子为根节点搜寻[mid+1,r]内的值</span><br>        <span class="hljs-keyword">if</span> (queryL &gt;= mid + <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> query(rightTreeIndex, mid + <span class="hljs-number">1</span>, r, queryL, queryR);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (queryR &lt;= mid) &#123; <br>            <span class="hljs-comment">//判断是否在左子树上 如果是则递归调用query直至找到</span><br>            <span class="hljs-keyword">return</span> query(leftTreeIndex, l, mid, queryL, queryR);<br>        &#125;<br>    <span class="hljs-comment">//当即不再左子树又不在右子树上的时候就是mid在【queryL,queryR】的中间</span><br>    <span class="hljs-comment">//则需要顶一个E 类型的变量分别接收最后返回的【l,mid】和[mid+1,r]的值</span><br>    <span class="hljs-comment">//然后对两个区间的结果进行merger操作并返回</span><br>        <span class="hljs-type">E</span> <span class="hljs-variable">leftResult</span> <span class="hljs-operator">=</span> query(leftTreeIndex, l, mid, queryL, mid);<br>        <span class="hljs-type">E</span> <span class="hljs-variable">rightResult</span> <span class="hljs-operator">=</span> query(rightTreeIndex, mid + <span class="hljs-number">1</span>, r, mid + <span class="hljs-number">1</span>, queryR);<br>        <span class="hljs-keyword">return</span> merger.merge(leftResult, rightResult);<br>    &#125;<br><br></code></pre></td></tr></table></figure><h2 id="2-线段树的动态查询"><a href="#2-线段树的动态查询" class="headerlink" title="2.线段树的动态查询"></a>2.线段树的动态查询</h2><blockquote><p>拓展</p></blockquote><p>以上是对于一个固定区间固定数值的操作然而现实中也需要，当修改一个数据后能够更新整个线段树然后在查找一个区间进行相关的操作具体函数如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//首先将位于index下标的值进行修改</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(<span class="hljs-type">int</span> index, E e)</span> &#123;<br>    <span class="hljs-comment">//每次进行下标搜查需要考虑是否越界和下标是否合法</span><br>        <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt;= data.length)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Index is illegal&quot;</span>);<br>        data[index] = e;     <span class="hljs-comment">//修改</span><br>        <span class="hljs-comment">//调用set的重构函数对区间【0,data.lengt-1】内的一个下标进行修改为e</span><br>      set(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, data.length - <span class="hljs-number">1</span>, index, e); <br>    &#125;<br> <span class="hljs-comment">//重构函数定义为私有变量防止外部调用参数意义（根节点,左范围，右范围,索引值，要修改的值）</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(<span class="hljs-type">int</span> treeIndex, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> index, E e)</span> &#123;<br>        <span class="hljs-comment">//递归终止的条件就是当l==r也就是找到那个元素了</span><br>        <span class="hljs-keyword">if</span> (l == r) &#123;  <br>            tree[treeIndex] = e;  <span class="hljs-comment">//修改</span><br>            <span class="hljs-keyword">return</span>;  <br>        &#125;<br>        <span class="hljs-comment">//正常流程 首先得到中间的下标</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> l + (r - l) / <span class="hljs-number">2</span>;<br>        <span class="hljs-comment">//其次得到左右孩子的下标 后面递归使用</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">leftTreeIndex</span> <span class="hljs-operator">=</span> leftChild(treeIndex);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rightTreeIndex</span> <span class="hljs-operator">=</span> rightChild(treeIndex);<br>        <span class="hljs-comment">//接着 `index &gt;= mid + 1`:如果要搜查的值在右子树则对右子树递归调用以 rightTreeIndex为根节点 </span><br>        <span class="hljs-keyword">if</span> (index &gt;= mid + <span class="hljs-number">1</span>) &#123;<br>            set(rightTreeIndex, mid + <span class="hljs-number">1</span>, r, index, e);<br>        &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">//反之则在左子树同右子树相同不过根节点换成了左孩子的下标值</span><br>            set(leftTreeIndex, l, mid, index, e);<br>        &#125;<br>        <span class="hljs-comment">//当找到后不是整个线段树的节点值都改变在index以后的值节点保持不变而在index以前的节点值要改变</span><br>        <span class="hljs-comment">//所以这里直接调用调用merger函数即可以自动实现。</span><br>        tree[treeIndex] = merger.merge(tree[leftTreeIndex], tree[rightTreeIndex]);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="3-LeeCode练习题讲解"><a href="#3-LeeCode练习题讲解" class="headerlink" title="3.LeeCode练习题讲解"></a>3.LeeCode练习题讲解</h2><h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3><p>力扣题303<a href="[303. 区域和检索 - 数组不可变 - 力扣（LeetCode）](https://leetcode.cn/problems/range-sum-query-immutable/">区域和检索-数组不可变</a>)   该题是要实现一个NumArray类实现一个区间内元素的总和所以解题步骤：</p><ol><li>首先定义一个私有变量sum数组存储从0-n 个区间的总和 例如sum[6]表示 sum[0]+…+sum[5] 故有此情形可以知道sum的空间开辟大小为nums.length+1 ,而且sum[0]=0;</li><li>对数据成员对象的初始化将 nums内的元素相加和拷贝到sum数组中</li><li>实现sumRange类 返回结过 例如：如果要求下标【4，8】区间内元素的总和则需要sum[9]-sum[4] 就可以。</li></ol><blockquote><p>代码如下所示</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NumArray</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> []sum;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NumArray</span><span class="hljs-params">(<span class="hljs-type">int</span> []nums)</span>&#123;<br>        sum=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[nums.length+<span class="hljs-number">1</span>];<br>        sum[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//对sum[1]~sum[n]逐个进行赋值 从i=1开始 sum[1]=sum[0]+nums[0];sum[2]=sum[1]+nums[1]...</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; sum.length; i++) &#123;<br>            sum[i]=sum[i-<span class="hljs-number">1</span>]+nums[i-<span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//返回最终结果</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sumRange</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j)</span>&#123;<br>        <span class="hljs-keyword">return</span> sum[j+<span class="hljs-number">1</span>]-sum[i];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Trie前缀树"><a href="#Trie前缀树" class="headerlink" title="Trie前缀树"></a><code>Trie</code>前缀树</h1><blockquote><p>概念介绍</p></blockquote><p>前缀树又称为字典树，是一种有序的树，它用于保存关联的数组，其中的键通常是字符串，也就是这个节点对应的字符串，而根节点对应字符串，一般情况下，不是所有的节点都有对应的值，只有叶子节点和部分的内部节点所对应的键才有的相关的值。</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/hehehe.png" alt=""></p><blockquote><p>前缀树的3个基本性质</p></blockquote><ol><li>根节点不包含字符，除根节点外每一个节点都只包含一个字符。</li><li>从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串</li><li>每个节点的所有子节点包含的字符都不相同。</li></ol><blockquote><p>tire树的应用</p></blockquote><p>常用于搜索的提示，例如输入一个网址出现可能的结果，还用于微信聊天记录的搜寻。时间复杂度O(longN)</p><blockquote><p>tire树的实现</p></blockquote><ul><li>首先定义一个节点类<code>class Node</code> 其中函数如下</li><li><code>public boolean isWorld</code> 表示到该节点是否为一个单词</li><li><code>public TreeMap&lt;Character,Node&gt;next</code> 表示下一个节点所存储的结构</li><li><code>Node(boolean isWorld)</code> 对节点的初始化和next的初始化</li><li>此处开始定义<code>class Trie</code> 内的函数 <code>Node root</code> 定义一个节点 <code>int size</code> 该tire树的大小。</li><li><code>add(String word)</code> 添加一个单词word</li><li><code>contains（String word）</code> 查询单词word是否在Tire中</li><li><code>isPrefix(String prefix)</code> 判断该单词是否是前缀</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>（1）首先定义一个节点内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> isWorld;<br>        <span class="hljs-comment">//Character是个假设 可以适用于不同的情况 能够分为一个一个的单元</span><br>        <span class="hljs-keyword">public</span> TreeMap&lt;Character, Node&gt; next;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">boolean</span> isWorld)</span> &#123;<br>            <span class="hljs-built_in">this</span>.isWorld = isWorld;<br>            next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;();<br>        &#125;<br><span class="hljs-comment">//当该节点不是个单词的时候直接赋值为false </span><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-built_in">this</span>(<span class="hljs-literal">false</span>);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>（2）在Trie类中定义相关的函数和私有变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">private</span> Node root;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br><span class="hljs-comment">//初始化 Tire 并对成员变量初始化赋值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Trie</span><span class="hljs-params">()</span> &#123;<br>        root = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>();<br>        size = <span class="hljs-number">0</span>;<br>    &#125;<br><span class="hljs-comment">//得到该Trie树中单词的数目</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size;<br>    &#125;<br></code></pre></td></tr></table></figure><p>（3）实现add函数 向Tire中添加单词word</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String word)</span> &#123;<br>    <span class="hljs-comment">//首相从根节点开始 顶一个cur指针指向根节点</span><br>     <span class="hljs-type">Node</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> root;<br>     <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; word.length(); i++) &#123; <span class="hljs-comment">//其对对传入的单词进行遍历</span><br>         <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> word.charAt(i);  <span class="hljs-comment">//将第i个字母赋值给c</span><br>         <span class="hljs-keyword">if</span> (cur.next.get(c) == <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">//判断cur的下一个节点是否为空如果是的话，则新建一个节点直接将该字母放在cur.next的下一个节点</span><br>             cur.next.put(c, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>());<br>         &#125;<br>         <span class="hljs-comment">//如果不为空的话让cur指针指向该不为空的节点便于下次循环操作</span><br>         cur = cur.next.get(c);<br>     &#125;<br>    <span class="hljs-comment">//当所有的节点都add上了后 此时判断该节点下的isWorld是否为true,不是的话改为true并且size++</span><br>     <span class="hljs-keyword">if</span> (!cur.isWorld) &#123;<br>         cur.isWorld = <span class="hljs-literal">true</span>;<br>         size++;<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>(3) contains 函数的实现类似于add函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查询单词 word是否在Trie中</span><br> <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(String word)</span>&#123;<br>     Node cur=root;  <span class="hljs-comment">//定义指针指向根节点</span><br>     <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; word.length(); i++) &#123; <span class="hljs-comment">//遍历word单词</span><br>         <span class="hljs-type">char</span> c=word.charAt(i);<br>         <span class="hljs-keyword">if</span>(cur.next.get(c)==<span class="hljs-literal">null</span>)&#123; <span class="hljs-comment">//如果cur.next为空的话则直接判断不存在</span><br>             <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>         &#125;<br>         cur= cur.next.get(c);  <span class="hljs-comment">//不为空的话 开始对下一个字母进行校验</span><br>     &#125;<br>     <span class="hljs-keyword">return</span> cur.isWorld;  <span class="hljs-comment">//当上面的while循环完成 则直接返回cur.isWrold证明该单词存在</span><br> &#125;<br></code></pre></td></tr></table></figure><p>（4）isPrefix函数判断该前缀是否存在tire树内于以上两种方法相似</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPrefix</span><span class="hljs-params">(String prefix)</span>&#123;<br>    Node cur=root;   <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;prefix.length();i++)&#123;<br>        <span class="hljs-type">char</span> c=prefix.charAt(i);<br>        <span class="hljs-keyword">if</span>(cur.next.get(c)==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        cur=cur.next.get(c);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="LeeCode题目讲解"><a href="#LeeCode题目讲解" class="headerlink" title="LeeCode题目讲解"></a>LeeCode题目讲解</h2><p>1.<a href="[208. 实现 Trie (前缀树">实现Trie前缀树</a> - 力扣（LeetCode）](<a href="https://leetcode.cn/problems/implement-trie-prefix-tree/">https://leetcode.cn/problems/implement-trie-prefix-tree/</a>)) 跟以上过程完全相似</p><p>（1）存在四个函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Trie</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Trie</span><span class="hljs-params">()</span> &#123;  <span class="hljs-comment">//初始化</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(String word)</span> &#123;  <span class="hljs-comment">//增加</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">search</span><span class="hljs-params">(String word)</span> &#123;  <span class="hljs-comment">//查找</span><br>    &#125;    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">startsWith</span><span class="hljs-params">(String prefix)</span> &#123;  <span class="hljs-comment">//前缀</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>代码实现</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Trie</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> isWorld;<br>        <span class="hljs-comment">//Character是个假设 可以适用于不同的情况 能够分为一个一个的单元</span><br>        <span class="hljs-keyword">public</span> TreeMap&lt;Character, Node&gt; next;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">boolean</span> isWorld)</span> &#123;<br>            <span class="hljs-built_in">this</span>.isWorld = isWorld;<br>            next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;();<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-built_in">this</span>(<span class="hljs-literal">false</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">private</span> Node root;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Trie</span><span class="hljs-params">()</span> &#123;<br>        root = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(String word)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> root;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; word.length(); i++) &#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> word.charAt(i);<br>            <span class="hljs-keyword">if</span> (cur.next.get(c) == <span class="hljs-literal">null</span>) &#123;<br>                cur.next.put(c, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>());<br>            &#125;<br>            cur = cur.next.get(c);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!cur.isWorld) &#123;<br>            cur.isWorld = <span class="hljs-literal">true</span>;<br><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">search</span><span class="hljs-params">(String word)</span> &#123;<br>        Node cur=root;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; word.length(); i++) &#123;<br>            <span class="hljs-type">char</span> c=word.charAt(i);<br>            <span class="hljs-keyword">if</span>(cur.next.get(c)==<span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            cur= cur.next.get(c);<br>        &#125;<br>        <span class="hljs-keyword">return</span> cur.isWorld;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">startsWith</span><span class="hljs-params">(String prefix)</span> &#123;<br>        Node cur=root;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; prefix.length(); i++) &#123;<br>            <span class="hljs-type">char</span> c=prefix.charAt(i);<br>            <span class="hljs-keyword">if</span>(cur.next.get(c)==<span class="hljs-literal">null</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            cur=cur.next.get(c);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.[<a href="https://leetcode.cn/problems/design-add-and-search-words-data-structure/">211. 添加与搜索单词 </a>] 题目简介设计一个数据结构，指出添加新的单词和查找字符串是否与任何先前添加的字符串匹配。</p><ul><li>还有内部节点Node类 其中的定义与上文相同这里不需要定义私有变量size。</li><li><code>WordDictionary</code> 对该字典类的初始化</li><li><code>addWorld</code> 与上文的add函数相同</li><li>重点实现<code>search(String word)</code> 函数</li></ul><blockquote><p>相同代码预览</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>      <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> isWorld;<br>      <span class="hljs-comment">//Character是个假设 可以适用于不同的情况 能够分为一个一个的单元</span><br>      <span class="hljs-keyword">public</span> TreeMap&lt;Character, Node&gt; next;<br>      <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">boolean</span> isWorld)</span> &#123;<br>          <span class="hljs-built_in">this</span>.isWorld = isWorld;<br>          next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;();<br>      &#125;<br>      <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">()</span> &#123;<br>          <span class="hljs-built_in">this</span>(<span class="hljs-literal">false</span>);<br>      &#125;<br>  &#125;<br>  <span class="hljs-keyword">private</span> Node root;<br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">WordDictionary</span><span class="hljs-params">()</span> &#123;<br>      root = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>();<br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addWord</span><span class="hljs-params">(String word)</span> &#123;<br>      <span class="hljs-type">Node</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> root;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; word.length(); i++) &#123;<br>          <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> word.charAt(i);<br>          <span class="hljs-keyword">if</span> (cur.next.get(c) == <span class="hljs-literal">null</span>) &#123;<br>              cur.next.put(c, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>());<br>          &#125;<br>          cur = cur.next.get(c);<br>      &#125;<br>      cur.isWorld = <span class="hljs-literal">true</span>;<br>  &#125;<br></code></pre></td></tr></table></figure><p><strong>(2)重点实现的search函数和match函数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">search</span><span class="hljs-params">(String word)</span> &#123;<br>     <span class="hljs-keyword">return</span> match(root, word, <span class="hljs-number">0</span>);  <span class="hljs-comment">//调用match函数从根节点开始 word单词 0为下标</span><br> &#125;<br></code></pre></td></tr></table></figure><p><strong>接着实现match函数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//从根节点开始 搜查单词为word 下标为index=0开始</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">match</span><span class="hljs-params">(Node node, String word, <span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span> (index == word.length()) &#123;  <span class="hljs-comment">//首先判断递归到底的情况就是index=单词的长度</span><br>            <span class="hljs-keyword">return</span> node.isWorld;  <span class="hljs-comment">//返回true 证明找到了</span><br>        &#125;<br>    <span class="hljs-comment">//先取出word的第一个字母进行匹配</span><br>        <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> word.charAt(index);  <br>        <span class="hljs-keyword">if</span> (c != <span class="hljs-string">&#x27;.&#x27;</span>) &#123;  <span class="hljs-comment">//因为体感说&#x27;.&#x27;表示一个任意的字母 当不为.的时候</span><br>            <span class="hljs-keyword">if</span> (node.next.get(c) == <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">//先判断c的下一个单词是否存在 不存在直接返回false</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-comment">//如果存在的话就递归调用以当前node.next.get(C)为节点 index+1 为下标的匹配函数</span><br>            <span class="hljs-keyword">return</span> match(node.next.get(c), word, index + <span class="hljs-number">1</span>); <br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//当然当下一个单词为&#x27;.&#x27;的时候可以直接遍历nextChar数组的 ‘keySet（）’--它表示的是取出word的下一个字母 </span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> nextChar :<br>                    node.next.keySet()) &#123;<br>                <span class="hljs-comment">// 此处以下一个字母为根节点 查找word 然后下标继续为index+1</span><br>                <span class="hljs-keyword">if</span> (match(node.next.get(nextChar), word, index + <span class="hljs-number">1</span>))<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微机接口</title>
      <link href="/2022/08/29/%E5%A4%A7%E4%B8%89%E4%B8%8A%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E5%BE%AE%E6%9C%BA%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/"/>
      <url>/2022/08/29/%E5%A4%A7%E4%B8%89%E4%B8%8A%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E5%BE%AE%E6%9C%BA%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="微机接口技术"><a href="#微机接口技术" class="headerlink" title="微机接口技术"></a>微机接口技术</h2><h4 id="课程学习内容及目的"><a href="#课程学习内容及目的" class="headerlink" title="课程学习内容及目的"></a>课程学习内容及目的</h4><p>  <strong>成绩=期末×0.7+平时×0.3</strong></p><p>1.汇编语言就是机器语言，熟知底层编程，了解计算机工作原理</p><p>2.微机接口技术就是把处理器、存储器等组成的基本系统与外部设备连接起来，从而实现计算机或者（CPU）与外部设备通信的一门技术，学习微机接口技术对微机在工业控制，数据采集和系统控制等领域的应用具有非常重要的作用；</p><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="1-1-微型计算机系统的组成"><a href="#1-1-微型计算机系统的组成" class="headerlink" title="1.1 微型计算机系统的组成"></a>1.1 微型计算机系统的组成</h3><pre><code>   应用软件- -&gt;  操作系统 --&gt; 硬件驱动层（软件）- -&gt;  指令层(ISA) --&gt; 硬件层(主板)     `计算机系统层次结构`</code></pre><p>硬件包括 处理芯片和外围硬件</p><p>软件：操作系统 编译器 各种应用软件</p><p>1.硬件层：其功能实在程序控制下的自动完成计算机的物理操作</p><p>2.硬件驱动层：（抽象层）：这些驱动层的软件直接控制着底层硬件的运行。这种组织结构，是的用户对硬件功能的调用不必了解其原理；</p><p>3.操作系统：计算机的所有软硬件资源的控制着，决定着计算机各种资源的使用和分配。</p><p>4.应用软件：通过操作系统提供的服务，BIOS提供的服务即使对计算机底层硬件的直接控制，完成对计算机各个方面应用的具体要求。</p><p>5.指令集：指示计算机硬件执行某种运算、处理功能的命令称为指令，CPU固有的指令系统</p><h4 id="1-1-2-卫星计算机软件"><a href="#1-1-2-卫星计算机软件" class="headerlink" title="1.1.2 卫星计算机软件"></a>1.1.2 卫星计算机软件</h4><h4 id="1-1-3-微型计算机的基本工作方法"><a href="#1-1-3-微型计算机的基本工作方法" class="headerlink" title="1.1.3 微型计算机的基本工作方法"></a>1.1.3 微型计算机的基本工作方法</h4><p>1.指令</p><p>指令在微处理器内是以二进制代码形式出现和施展控制的，每一条指令都有一个唯一的指令代码；</p><p>2.程序</p><p>​    当人们要用计算机我弄成某项工作时，就要把指令排列起来 这就是程序。</p><p>3.存储程序和控制程序</p><p>微处理器就顺序的、周而复始的从内存中取出指令，八至零码变成控制序列信号（指令译码）完成指令规定的操作（称为指令执行）完成全部指令称为（执行程序）    ——-执行程序必须调入内存运行。</p><h4 id="1-1-4-微机系统的启动和操作系统的装载"><a href="#1-1-4-微机系统的启动和操作系统的装载" class="headerlink" title="1.1.4 微机系统的启动和操作系统的装载"></a>1.1.4 微机系统的启动和操作系统的装载</h4><p>1.BIOS（主板自带的软件）是一个ROM</p><p>2.存储器地址  </p><h3 id="1-2-IA-32-微处理器体系结构"><a href="#1-2-IA-32-微处理器体系结构" class="headerlink" title="1.2 IA-32 微处理器体系结构"></a>1.2 IA-32 微处理器体系结构</h3><p>1.EU  指令</p><p>2.BIU 接口</p><p> CS SS DS ES IP  内部暂存器——&gt;通过地址的加法器 ——&gt;总线控制逻辑 ——&gt;指令对立寄存器</p>]]></content>
      
      
      <categories>
          
          <category> 微机课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微机理论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记模板</title>
      <link href="/2022/08/27/%E4%BB%A3%E7%A0%81%E5%BF%AB%E6%BC%94%E7%A4%BA/%E6%BC%94%E7%A4%BA/"/>
      <url>/2022/08/27/%E4%BB%A3%E7%A0%81%E5%BF%AB%E6%BC%94%E7%A4%BA/%E6%BC%94%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="Page-模板"><a href="#Page-模板" class="headerlink" title="Page 模板"></a>Page 模板</h1><p> title: 【必须】 页面标题<br> date: 【必需】页面创建日期<br> updated: 【可选】页面更新日期<br> type: 【必需】标签、分类和友情链接三个页面需要配置<br> comments: 【可选】显示页面评论模块(默认 true)<br> description: 【可选】页面描述<br> keywords: 【可选】页面关键字<br> top_img: 【可选】页面顶部图片<br> highlight_shrink: 【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)</p><h3 id="直接复制"><a href="#直接复制" class="headerlink" title="直接复制"></a>直接复制</h3><p> title:<br> date:<br> type:<br> comments:<br> description:<br> keywords:<br> updated:<br> top_img:<br> highlight_shrink:</p><h1 id="文章设置"><a href="#文章设置" class="headerlink" title="文章设置"></a>文章设置</h1><p> title: 【必需】文章标题<br> date: 【必需】文章创建日期<br> updated: 【可选】文章更新日期<br> tags: 【可选】文章标签<br> categories: 【可选】文章分类<br> keywords: 【可选】文章关键字<br> description: 【可选】文章描述<br> top_img: 【可选】文章顶部图片<br> cover:【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)<br> copyright: 【可选】显示文章版权模块(默认为设置中post_copyright的enable配置<br> copyright_author: 【可选】文章版权模块的文章作者<br> copyright_author_href: 【可选】文章版权模块的文章作者链接<br> copyright_url: 【可选】文章版权模块的文章连结链接<br> copyright_info: 【可选】文章版权模块的版权声明文字 </p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
