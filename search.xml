<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript</title>
      <link href="/2022/09/26/JavaWeb%E5%AD%A6%E4%B9%A0/JavaScript/"/>
      <url>/2022/09/26/JavaWeb%E5%AD%A6%E4%B9%A0/JavaScript/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p><strong>今日目标</strong></p><blockquote><ul><li>掌握 JavaScript 的基础语法</li><li>掌握 JavaScript 的常用对象（Array、String）</li><li>能根据需求灵活运用定时器及通过 js 代码进行页面跳转</li><li>能通过DOM 对象对标签进行常规操作</li><li>掌握常用的事件</li><li>能独立完成表单校验案例</li></ul></blockquote><h2 id="1，JavaScript简介"><a href="#1，JavaScript简介" class="headerlink" title="1，JavaScript简介"></a>1，JavaScript简介</h2><p>==JavaScript 是一门跨平台、面向对象的脚本语言==，而Java语言也是跨平台的、面向对象的语言，只不过Java是编译语言，是需要编译成字节码文件才能运行的；JavaScript是脚本语言，不需要编译，由浏览器直接解析并执行。</p><p>JavaScript 是用来控制网页行为的，它能使网页可交互；那么它可以做什么呢？如改变页面内容、修改指定元素的属性值、对表单进行校验等，下面是这些功能的效果展示：</p><ul><li><p><strong>改变页面内容</strong></p><p><img src="assets/image-20210814173417834.png" alt="image-20210814173417834" style="zoom:80%;" /></p><p>当我点击上面左图的 <code>点击我</code> 按钮，按钮上面的文本就改为上面右图内容，这就是js 改变页面内容的功能。</p></li><li><p><strong>修改指定元素的属性值</strong></p><p><img src="assets/image-20210814173719505.png" alt="image-20210814173719505" style="zoom:70%;" /></p><p>当我们点击上图的 <code>开灯</code> 按钮，效果就是上面右图效果；当我点击 <code>关灯</code> 按钮，效果就是上面左图效果。其他这个功能中有两张灯泡的图片（使用img标签进行展示），通过修改 img 标签的 src 属性值改变展示的图片来实现。</p></li><li><p><strong>对表单进行校验</strong></p><p><img src="assets/image-20210814174242688.png" alt="image-20210814174242688" style="zoom:70%;" /></p><p>在上面左图的输入框输入用户名，如果输入的用户名是不满足规则的就展示右图(上) 的效果；如果输入的用户名是满足规则的就展示右图(下) 的效果。</p></li></ul><p>JavaScript 和 Java 是完全不同的语言，不论是概念还是设计，只是名字比较像而已。但是==基础语法类似==，所以我们有java的学习经验，再学习JavaScript 语言就相对比较容易些。</p><p>JavaScript（简称：JS） 在 1995 年由 Brendan Eich 发明，并于 1997 年成为一部 ECMA 标准。ECMA 规定了一套标准 就叫 <code>ECMAScript</code> ，所有的客户端校验语言必须遵守这个标准，当然 JavaScript 也遵守了这个标准。ECMAScript 6 (简称ES6) 是最新的 JavaScript 版本（发布于 2015 年)，我们的课程就是基于最新的 <code>ES6</code> 进行讲解。</p><h2 id="2，JavaScript引入方式"><a href="#2，JavaScript引入方式" class="headerlink" title="2，JavaScript引入方式"></a>2，JavaScript引入方式</h2><p>JavaScript 引入方式就是 HTML 和 JavaScript 的结合方式。JavaScript引入方式有两种：</p><ul><li>内部脚本：将 JS代码定义在HTML页面中</li><li>外部脚本：将 JS代码定义在外部 JS文件中，然后引入到 HTML页面中</li></ul><h3 id="2-1-内部脚本"><a href="#2-1-内部脚本" class="headerlink" title="2.1  内部脚本"></a>2.1  内部脚本</h3><p>在 HTML 中，JavaScript 代码必须位于 <code>&lt;script&gt;</code> 与 <code>&lt;/script&gt;</code> 标签之间</p><p><strong>代码如下：</strong></p><p><code>alert(数据)</code> 是 JavaScript 的一个方法，作用是将参数数据以浏览器弹框的形式输出出来。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hello js1&quot;</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>效果如下：</strong></p><p><img src="assets/image-20210814181419691.png" alt="image-20210814181419691" style="zoom:70%;" /></p><p>从结果可以看到 js 代码已经执行了。</p><blockquote><p>==提示：==</p><ul><li><p>在 HTML 文档中可以在任意地方，放置任意数量的<script>标签。如下图</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hello js1&quot;</span>);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hello js1&quot;</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hello js1&quot;</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>一般把脚本置于 <body> 元素的底部，可改善显示速度</p><p>因为浏览器在加载页面的时候会从上往下进行加载并解析。 我们应该让用户看到页面内容，然后再展示动态的效果。</p></li></ul></blockquote><h3 id="2-2-外部脚本"><a href="#2-2-外部脚本" class="headerlink" title="2.2  外部脚本"></a>2.2  外部脚本</h3><p><strong>第一步：定义外部 js 文件。如定义名为 demo.js的文件</strong></p><p>项目结构如下：</p><p><img src="assets/image-20210814182345236.png" alt="image-20210814182345236" style="zoom:80%;" /></p><p>demo.js 文件内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hello js&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>第二步：在页面中引入外部的js文件</strong></p><p>在页面使用 <code>script</code> 标签中使用 <code>src</code> 属性指定 js 文件的 URL 路径。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/demo.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>==注意：==</p><ul><li><p>外部脚本不能包含 <code>&lt;script&gt;</code> 标签</p><p>在js文件中直接写 js 代码即可，不要在 js文件 中写 <code>script</code> 标签</p></li><li><p><code>&lt;script&gt;</code> 标签不能自闭合</p><p>在页面中引入外部js文件时，不能写成 <code>&lt;script src=&quot;../js/demo.js&quot; /&gt;</code>。</p></li></ul></blockquote><h2 id="3，JavaScript基础语法"><a href="#3，JavaScript基础语法" class="headerlink" title="3，JavaScript基础语法"></a>3，JavaScript基础语法</h2><h3 id="3-1-书写语法"><a href="#3-1-书写语法" class="headerlink" title="3.1  书写语法"></a>3.1  书写语法</h3><ul><li><p>区分大小写：与 Java 一样，变量名、函数名以及其他一切东西都是区分大小写的</p></li><li><p>每行结尾的分号可有可无</p><p>如果一行上写多个语句时，必须加分号用来区分多个语句。</p></li><li><p>注释</p><ul><li>单行注释：// 注释内容</li><li>多行注释：/<em> 注释内容 </em>/</li></ul><blockquote><p>注意：JavaScript 没有文档注释</p></blockquote></li><li><p>大括号表示代码块</p><p>下面语句大家肯定能看懂，和 java 一样 大括号表示代码块。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (count == <span class="hljs-number">3</span>) &#123; <br>   <span class="hljs-title function_">alert</span>(count); <br>&#125; <br></code></pre></td></tr></table></figure></li></ul><h3 id="3-2-输出语句"><a href="#3-2-输出语句" class="headerlink" title="3.2  输出语句"></a>3.2  输出语句</h3><p>js 可以通过以下方式进行内容的输出，只不过不同的语句输出到的位置不同</p><ul><li><p><strong>使用 window.alert() 写入警告框</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hello js&quot;</span>);<span class="hljs-comment">//写入警告框</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面代码通过浏览器打开，我们可以看到如下图弹框效果</p><p><img src="assets/image-20210814181419691.png" alt="image-20210814181419691" style="zoom:70%;" /></p></li><li><p><strong>使用 document.write() 写入 HTML 输出</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;hello js 2~&quot;</span>);<span class="hljs-comment">//写入html页面</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面代码通过浏览器打开，我们可以在页面上看到 <code>document.write(内容)</code> 输出的内容</p><p><img src="assets/image-20210814190302845.png" alt="image-20210814190302845" style="zoom:80%;" /></p></li><li><p><strong>使用 console.log() 写入浏览器控制台</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hello js 3&quot;</span>);<span class="hljs-comment">//写入浏览器的控制台</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面代码通过浏览器打开，我们可以在不能页面上看到  <code>console.log(内容)</code> 输出的内容，它是输出在控制台了，而怎么在控制台查看输出的内容呢？在浏览器界面按 <code>F12</code> 就可以看到下图的控制台</p><p><img src="assets/image-20210814190906202.png" alt="image-20210814190906202"></p></li></ul><h3 id="3-3-变量"><a href="#3-3-变量" class="headerlink" title="3.3  变量"></a>3.3  变量</h3><p>JavaScript 中用 var 关键字（variable 的缩写）来声明变量。格式 <code>var 变量名 = 数据值;</code>。而在JavaScript 是一门弱类型语言，变量==可以存放不同类型的值==；如下在定义变量时赋值为数字数据，还可以将变量的值改为字符串类型的数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> test = <span class="hljs-number">20</span>;<br>test = <span class="hljs-string">&quot;张三&quot;</span>;<br></code></pre></td></tr></table></figure><p>js 中的变量名命名也有如下规则，和java语言基本都相同</p><ul><li>组成字符可以是任何字母、数字、下划线（_）或美元符号（$）</li><li>数字不能开头</li><li>建议使用驼峰命名</li></ul><p>JavaScript 中 <code>var</code> 关键字有点特殊，有以下地方和其他语言不一样</p><ul><li><p>作用域：全局变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-keyword">var</span> age = <span class="hljs-number">20</span>;<br>&#125;<br><span class="hljs-title function_">alert</span>(age);  <span class="hljs-comment">// 在代码块中定义的age 变量，在代码块外边还可以使用</span><br></code></pre></td></tr></table></figure></li><li><p>变量可以重复定义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-keyword">var</span> age = <span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">var</span> age = <span class="hljs-number">30</span>;<span class="hljs-comment">//JavaScript 会用 30 将之前 age 变量的 20 替换掉</span><br>&#125;<br><span class="hljs-title function_">alert</span>(age); <span class="hljs-comment">//打印的结果是 30</span><br></code></pre></td></tr></table></figure></li></ul><p>针对如上的问题，==ECMAScript 6 新增了 <code>let</code>关键字来定义变量。==它的用法类似于 <code>var</code>，但是所声明的变量，只在 <code>let</code> 关键字所在的代码块内有效，且不允许重复声明。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-keyword">let</span> age = <span class="hljs-number">20</span>;<br>&#125;<br><span class="hljs-title function_">alert</span>(age); <br></code></pre></td></tr></table></figure><p>运行上面代码，浏览器并没有弹框输出结果，说明这段代码是有问题的。通过 <code>F12</code> 打开开发者模式可以看到如下错误信息</p><p><img src="assets/image-20210815170848426.png" alt="image-20210815170848426" style="zoom:80%;" /></p><p>而如果在代码块中定义两个同名的变量，IDEA 开发工具就直接报错了</p><blockquote><p><img src="assets/image-20210815170952829.png" alt="image-20210815170952829" style="zoom:80%;" /></p></blockquote><p>==ECMAScript 6 新增了 const关键字，用来声明一个只读的常量。一旦声明，常量的值就不能改变。== 通过下面的代码看一下常用的特点就可以了</p><blockquote><p><img src="assets/image-20210815171128095.png" alt="image-20210815171128095" style="zoom:80%;" /></p></blockquote><p>我们可以看到给 PI 这个常量重新赋值时报错了。</p><h3 id="3-4-数据类型"><a href="#3-4-数据类型" class="headerlink" title="3.4  数据类型"></a>3.4  数据类型</h3><p>JavaScript 中提供了两类数据类型：原始类型 和 引用类型。</p><blockquote><p>使用 typeof 运算符可以获取数据类型</p><p><code>alert(typeof age);</code> 以弹框的形式将 age 变量的数据类型输出</p></blockquote><p>原始数据类型：</p><ul><li><p><strong>number</strong>：数字（整数、小数、NaN(Not a Number)）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> age = <span class="hljs-number">20</span>;<br><span class="hljs-keyword">var</span> price = <span class="hljs-number">99.8</span>;<br><br><span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> age); <span class="hljs-comment">// 结果是 ： number</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> price);<span class="hljs-comment">// 结果是 ： number</span><br></code></pre></td></tr></table></figure><blockquote><p>==注意：== NaN是一个特殊的number类型的值，后面用到再说</p></blockquote></li><li><p><strong>string</strong>：字符、字符串，单双引皆可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> ch = <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;张三&#x27;</span>; <br><span class="hljs-keyword">var</span> addr = <span class="hljs-string">&quot;北京&quot;</span>;<br><br><span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> ch); <span class="hljs-comment">//结果是  string</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> name); <span class="hljs-comment">//结果是  string</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> addr); <span class="hljs-comment">//结果是  string</span><br></code></pre></td></tr></table></figure><blockquote><p>==注意：==在 js 中 双引号和单引号都表示字符串类型的数据</p></blockquote></li><li><p><strong>boolean</strong>：布尔。true，false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> flag = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">var</span> flag2 = <span class="hljs-literal">false</span>;<br><br><span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> flag); <span class="hljs-comment">//结果是 boolean</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> flag2); <span class="hljs-comment">//结果是 boolean</span><br></code></pre></td></tr></table></figure></li><li><p><strong>null</strong>：对象为空</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = <span class="hljs-literal">null</span>;<br><br><span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> obj);<span class="hljs-comment">//结果是 object</span><br></code></pre></td></tr></table></figure><p>为什么打印上面的 obj 变量的数据类型，结果是object；这个官方给出了解释，下面是从官方文档截的图</p><p><img src="assets/image-20210815173003408.png" alt="image-20210815173003408" style="zoom:80%;" /></p></li><li><p><strong>undefined</strong>：当声明的变量未初始化时，该变量的默认值是 undefined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a ;<br><span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> a); <span class="hljs-comment">//结果是 undefined</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="3-5-运算符"><a href="#3-5-运算符" class="headerlink" title="3.5  运算符"></a>3.5  运算符</h3><p>JavaScript 提供了如下的运算符。大部分和 Java语言 都是一样的，不同的是 JS 关系运算符中的 <code>==</code> 和 <code>===</code>，一会我们只演示这两个的区别，其他运算符将不做演示</p><ul><li><p>一元运算符：++，—</p></li><li><p>算术运算符：+，-，*，/，%</p></li><li><p>赋值运算符：=，+=，-=…</p></li><li><p>关系运算符：&gt;，&lt;，&gt;=，&lt;=，!=，\==，===…</p></li><li><p>逻辑运算符：&amp;&amp;，||，!</p></li><li><p>三元运算符：条件表达式 ? true_value : false_value </p></li></ul><h4 id="3-5-1-和-区别"><a href="#3-5-1-和-区别" class="headerlink" title="3.5.1  \==和===区别"></a>3.5.1  \==和===区别</h4><p><strong>概述:</strong></p><ul><li><p>==：</p><ol><li><p>判断类型是否一样，如果不一样，则进行类型转换</p></li><li><p>再去比较其值</p></li></ol></li><li><p>===：js 中的全等于</p><ol><li>判断类型是否一样，如果不一样，直接返回false</li><li>再去比较其值</li></ol></li></ul><p><strong>代码：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> age1 = <span class="hljs-number">20</span>;<br><span class="hljs-keyword">var</span> age2 = <span class="hljs-string">&quot;20&quot;</span>;<br><br><span class="hljs-title function_">alert</span>(age1 == age2);<span class="hljs-comment">// true</span><br><span class="hljs-title function_">alert</span>(age1 === age2);<span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h4 id="3-5-2-类型转换"><a href="#3-5-2-类型转换" class="headerlink" title="3.5.2  类型转换"></a>3.5.2  类型转换</h4><p>上述讲解 <code>==</code> 运算符时，发现会进行类型转换，所以接下来我们来详细的讲解一下 JavaScript 中的类型转换。</p><ul><li><p>其他类型转为number</p><ul><li><p>string 转换为 number 类型：按照字符串的字面值，转为数字。如果字面值不是数字，则转为NaN</p><p>将 string 转换为 number 有两种方式：</p><ul><li><p>使用 <code>+</code> 正号运算符：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = +<span class="hljs-string">&quot;20&quot;</span>;<br><span class="hljs-title function_">alert</span>(str + <span class="hljs-number">1</span>) <span class="hljs-comment">//21</span><br></code></pre></td></tr></table></figure></li><li><p>使用 <code>parseInt()</code> 函数(方法)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;20&quot;</span>;<br><span class="hljs-title function_">alert</span>(<span class="hljs-built_in">parseInt</span>(str) + <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure></li></ul><blockquote><p>==建议使用 <code>parseInt()</code> 函数进行转换。==</p></blockquote></li><li><p>boolean 转换为 number 类型：true 转为1，false转为0</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> flag = +<span class="hljs-literal">false</span>;<br><span class="hljs-title function_">alert</span>(flag); <span class="hljs-comment">// 0</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>其他类型转为boolean</p><ul><li>number 类型转换为 boolean 类型：0和NaN转为false，其他的数字转为true</li><li>string 类型转换为 boolean 类型：空字符串转为false，其他的字符串转为true</li><li>null类型转换为 boolean 类型是 false</li><li>undefined 转换为 boolean 类型是 false</li></ul><p><strong>代码如下：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// var flag = 3;</span><br><span class="hljs-comment">// var flag = &quot;&quot;;</span><br><span class="hljs-keyword">var</span> flag = <span class="hljs-literal">undefined</span>;<br><br><span class="hljs-keyword">if</span>(flag)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;转为true&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;转为false&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><strong>使用场景：</strong></p><p>在 Java 中使用字符串前，一般都会先判断字符串不是null，并且不是空字符才会做其他的一些操作，JavaScript也有类型的操作，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abc&quot;</span>;<br><br><span class="hljs-comment">//健壮性判断</span><br><span class="hljs-keyword">if</span>(str != <span class="hljs-literal">null</span> &amp;&amp; str.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;转为true&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;转为false&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>但是由于 JavaScript 会自动进行类型转换，所以上述的判断可以进行简化，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abc&quot;</span>;<br><br><span class="hljs-comment">//健壮性判断</span><br><span class="hljs-keyword">if</span>(str)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;转为true&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;转为false&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-6-流程控制语句"><a href="#3-6-流程控制语句" class="headerlink" title="3.6  流程控制语句"></a>3.6  流程控制语句</h3><p>JavaScript 中提供了和 Java 一样的流程控制语句，如下</p><ul><li>if </li><li>switch</li><li>for</li><li>while</li><li>dowhile</li></ul><h4 id="3-6-1-if-语句"><a href="#3-6-1-if-语句" class="headerlink" title="3.6.1  if 语句"></a>3.6.1  if 语句</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> count = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">if</span> (count == <span class="hljs-number">3</span>) &#123;<br>    <span class="hljs-title function_">alert</span>(count);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-6-2-switch-语句"><a href="#3-6-2-switch-语句" class="headerlink" title="3.6.2  switch 语句"></a>3.6.2  switch 语句</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> num = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">switch</span> (num) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;星期一&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;星期二&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;星期三&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;星期四&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;星期五&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;星期六&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;星期日&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-attr">default</span>:<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;输入的星期有误&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-6-3-for-循环语句"><a href="#3-6-3-for-循环语句" class="headerlink" title="3.6.3  for 循环语句"></a>3.6.3  for 循环语句</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123; <span class="hljs-comment">//建议for循环小括号中定义的变量使用let</span><br>    sum += i;<br>&#125;<br><span class="hljs-title function_">alert</span>(sum);<br></code></pre></td></tr></table></figure><h4 id="3-6-4-while-循环语句"><a href="#3-6-4-while-循环语句" class="headerlink" title="3.6.4  while 循环语句"></a>3.6.4  while 循环语句</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (i &lt;= <span class="hljs-number">100</span>) &#123;<br>    sum += i;<br>    i++;<br>&#125;<br><span class="hljs-title function_">alert</span>(sum);<br></code></pre></td></tr></table></figure><h4 id="3-6-5-dowhile-循环语句"><a href="#3-6-5-dowhile-循环语句" class="headerlink" title="3.6.5  dowhile 循环语句"></a>3.6.5  dowhile 循环语句</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">do</span> &#123;<br>    sum += i;<br>    i++;<br>&#125;<br><span class="hljs-keyword">while</span> (i &lt;= <span class="hljs-number">100</span>);<br><span class="hljs-title function_">alert</span>(sum);<br></code></pre></td></tr></table></figure><h3 id="3-7-函数"><a href="#3-7-函数" class="headerlink" title="3.7  函数"></a>3.7  函数</h3><p>函数（就是Java中的方法）是被设计为执行特定任务的代码块；JavaScript 函数通过 function 关键词进行定义。</p><h4 id="3-7-1-定义格式"><a href="#3-7-1-定义格式" class="headerlink" title="3.7.1  定义格式"></a>3.7.1  定义格式</h4><p>函数定义格式有两种：</p><ul><li><p>方式1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> 函数名(参数<span class="hljs-number">1</span>,参数<span class="hljs-number">2.</span>.)&#123;<br>    要执行的代码<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>方式2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> 函数名 = <span class="hljs-keyword">function</span> (<span class="hljs-params">参数列表</span>)&#123;<br>    要执行的代码<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><blockquote><p>==注意：==</p><ul><li><p>形式参数不需要类型。因为JavaScript是弱类型语言</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b</span>)&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述函数的参数 a 和 b 不需要定义数据类型，因为在每个参数前加上 var 也没有任何意义。</p></li><li><p>返回值也不需要定义类型，可以在函数内部直接使用return返回即可</p></li></ul></blockquote><h4 id="3-7-2-函数调用"><a href="#3-7-2-函数调用" class="headerlink" title="3.7.2  函数调用"></a>3.7.2  函数调用</h4><p>函数调用函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">函数名称(实际参数列表);<br></code></pre></td></tr></table></figure><p>eg：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> result = <span class="hljs-title function_">add</span>(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>);<br></code></pre></td></tr></table></figure><blockquote><p>==注意：==</p><ul><li><p>JS中，函数调用可以传递任意个数参数</p></li><li><p>例如  <code>let result = add(1,2,3);</code> </p><p>它是将数据 1 传递给了变量a，将数据 2 传递给了变量 b，而数据 3 没有变量接收。</p></li></ul></blockquote><h2 id="4，JavaScript常用对象"><a href="#4，JavaScript常用对象" class="headerlink" title="4，JavaScript常用对象"></a>4，JavaScript常用对象</h2><p>JavaScript 提供了很多对象供使用者来使用。这些对象总共分类三类</p><ul><li><p>基本对象</p><p><img src="assets/image-20210815183147297.png" alt="image-20210815183147297" style="zoom:80%;" /></p></li><li><p>BOM 对象</p><p><img src="assets/image-20210815183207660.png" alt="image-20210815183207660" style="zoom:80%;" /></p></li><li><p>DOM对象</p><p>DOM 中的对象就比较多了，下图只是截取部分</p><p><img src="assets/image-20210815183225718.png" alt="image-20210815183225718" style="zoom:80%;" /></p></li></ul><p>这小节我们先学习基本对象，而我们先学习 <code>Array</code> 数组对象和 <code>String</code> 字符串对象。</p><h3 id="4-1-Array对象"><a href="#4-1-Array对象" class="headerlink" title="4.1  Array对象"></a>4.1  Array对象</h3><p>JavaScript Array对象用于定义数组</p><h4 id="4-1-1-定义格式"><a href="#4-1-1-定义格式" class="headerlink" title="4.1.1  定义格式"></a>4.1.1  定义格式</h4><p>数组的定义格式有两种：</p><ul><li><p>方式1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> 变量名 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(元素列表); <br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>); <span class="hljs-comment">//1,2,3 是存储在数组中的数据（元素）</span><br></code></pre></td></tr></table></figure></li><li><p>方式2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> 变量名 = [元素列表];<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]; <span class="hljs-comment">//1,2,3 是存储在数组中的数据（元素）</span><br></code></pre></td></tr></table></figure><p>==注意：Java中的数组静态初始化使用的是{}定义，而 JavaScript 中使用的是 [] 定义==</p></li></ul><h4 id="4-1-2-元素访问"><a href="#4-1-2-元素访问" class="headerlink" title="4.1.2  元素访问"></a>4.1.2  元素访问</h4><p>访问数组中的元素和 Java 语言的一样，格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">arr[索引] = 值;<br></code></pre></td></tr></table></figure><p><strong>代码演示：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-comment">// 方式一</span><br><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br><span class="hljs-comment">// alert(arr);</span><br><br><span class="hljs-comment">// 方式二</span><br><span class="hljs-keyword">var</span> arr2 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-comment">//alert(arr2);</span><br><br><span class="hljs-comment">// 访问</span><br>arr2[<span class="hljs-number">0</span>] = <span class="hljs-number">10</span>;<br><span class="hljs-title function_">alert</span>(arr2)<br></code></pre></td></tr></table></figure><h4 id="4-1-3-特点"><a href="#4-1-3-特点" class="headerlink" title="4.1.3  特点"></a>4.1.3  特点</h4><p>JavaScript 中的数组相当于 Java 中集合。数组的长度是可以变化的，而 JavaScript 是弱类型，所以可以存储任意的类型的数据。</p><p>例如如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 变长</span><br><span class="hljs-keyword">var</span> arr3 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br>arr3[<span class="hljs-number">10</span>] = <span class="hljs-number">10</span>;<br><span class="hljs-title function_">alert</span>(arr3[<span class="hljs-number">10</span>]); <span class="hljs-comment">// 10</span><br><span class="hljs-title function_">alert</span>(arr3[<span class="hljs-number">9</span>]);  <span class="hljs-comment">//undefined</span><br></code></pre></td></tr></table></figure><p>上面代码在定义数组中给了三个元素，又给索引是 10 的位置添加了数据 10，那么 <code>索引3</code> 到 <code>索引9</code> 位置的元素是什么呢？我们之前就介绍了，在 JavaScript 中没有赋值的话，默认就是 <code>undefined</code>。</p><p>如果给 <code>arr3</code> 数组添加字符串的数据，也是可以添加成功的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">arr3[<span class="hljs-number">5</span>] = <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-title function_">alert</span>(arr3[<span class="hljs-number">5</span>]); <span class="hljs-comment">// hello</span><br></code></pre></td></tr></table></figure><h4 id="4-1-4-属性"><a href="#4-1-4-属性" class="headerlink" title="4.1.4  属性"></a>4.1.4  属性</h4><p>Array 对象提供了很多属性，如下图是官方文档截取的</p><p><img src="assets/image-20210815190319166.png" alt="image-20210815190319166" style="zoom:80%;" /></p><p>而我们只讲解 <code>length</code> 属性，该数组可以动态的获取数组的长度。而有这个属性，我们就可以遍历数组了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-title function_">alert</span>(arr[i]);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-1-5-方法"><a href="#4-1-5-方法" class="headerlink" title="4.1.5  方法"></a>4.1.5  方法</h4><p>Array 对象同样也提供了很多方法，如下图是官方文档截取的</p><p><img src="assets/image-20210815190601340.png" alt="image-20210815190601340" style="zoom:80%;" /></p><p>而我们在课堂中只演示 <code>push</code> 函数和 <code>splice</code> 函数。</p><ul><li><p>push 函数：给数组添加元素，也就是在数组的末尾添加元素</p><p>参数表示要添加的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// push:添加方法</span><br><span class="hljs-keyword">var</span> arr5 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br>arr5.<span class="hljs-title function_">push</span>(<span class="hljs-number">10</span>);<br><span class="hljs-title function_">alert</span>(arr5);  <span class="hljs-comment">//数组的元素是 &#123;1,2,3,10&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>splice 函数：删除元素</p><p>参数1：索引。表示从哪个索引位置删除</p><p>参数2：个数。表示删除几个元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// splice:删除元素</span><br><span class="hljs-keyword">var</span> arr5 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br>arr5.<span class="hljs-title function_">splice</span>(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>); <span class="hljs-comment">//从 0 索引位置开始删除，删除一个元素 </span><br><span class="hljs-title function_">alert</span>(arr5); <span class="hljs-comment">// &#123;2,3&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="4-2-String对象"><a href="#4-2-String对象" class="headerlink" title="4.2  String对象"></a>4.2  String对象</h3><p>String对象的创建方式有两种</p><ul><li><p>方式1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> 变量名 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(s); <br></code></pre></td></tr></table></figure></li><li><p>方式2：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> 变量名 = <span class="hljs-string">&quot;数组&quot;</span>; <br></code></pre></td></tr></table></figure></li></ul><p><strong>属性：</strong></p><p>String对象提供了很多属性，下面给大家列举了一个属性 <code>length</code> ，该属性是用于动态的获取字符串的长度</p><p><img src="assets/image-20210815192504884.png" alt="image-20210815192504884" style="zoom:60%;" /></p><p><strong>函数：</strong></p><p>String对象提供了很多函数（方法），下面给大家列举了两个方法。</p><p><img src="assets/image-20210815192544172.png" alt="image-20210815192544172" style="zoom:70%;" /></p><p>String对象还有一个函数 <code>trim()</code> ，该方法在文档中没有体现，但是所有的浏览器都支持；它是用来去掉字符串两端的空格。</p><p>代码演示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str4 = <span class="hljs-string">&#x27;  abc   &#x27;</span>;<br><span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span> + str4 + <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>上面代码会输出内容 <code>1  abc  1</code>，很明显可以看到 abc 字符串左右两边是有空格的。接下来使用 <code>trim()</code> 函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str4 = <span class="hljs-string">&#x27;  abc   &#x27;</span>;<br><span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span> + str4.<span class="hljs-title function_">trim</span>() + <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>输出的内容是 <code>1abc1</code> 。这就是 <code>trim()</code> 函数的作用。</p><p><code>trim()</code> 函数在以后开发中还是比较常用的，例如下图所示是登陆界面</p><p><img src="assets/image-20210815193420418.png" alt="image-20210815193420418" style="zoom:80%;"/> </p><p>用户在输入用户名和密码时，可能会习惯的输入一些空格，这样在我们后端程序中判断用户名和密码是否正确，结果肯定是失败。所以我们一般都会对用户输入的字符串数据进行去除前后空格的操作。</p><h3 id="4-3-自定义对象"><a href="#4-3-自定义对象" class="headerlink" title="4.3  自定义对象"></a>4.3  自定义对象</h3><p>在 JavaScript 中自定义对象特别简单，下面就是自定义对象的格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> 对象名称 = &#123;<br>    属性名称<span class="hljs-number">1</span>:属性值<span class="hljs-number">1</span>,<br>    属性名称<span class="hljs-number">2</span>:属性值<span class="hljs-number">2</span>,<br>    ...,<br>    函数名称:<span class="hljs-keyword">function</span> (<span class="hljs-params">形参列表</span>)&#123;&#125;,<br>...<br>&#125;;<br></code></pre></td></tr></table></figure><p>调用属性的格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">对象名.属性名<br></code></pre></td></tr></table></figure><p>调用函数的格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">对象名.函数名()<br></code></pre></td></tr></table></figure><p>接下来通过代码演示一下，让大家体验一下 JavaScript 中自定义对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> person = &#123;<br>        name : <span class="hljs-string">&quot;zhangsan&quot;</span>,<br>        age : <span class="hljs-number">23</span>,<br>        <span class="hljs-attr">eat</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;干饭~&quot;</span>);<br>        &#125;<br>    &#125;;<br><br><br><span class="hljs-title function_">alert</span>(person.<span class="hljs-property">name</span>);  <span class="hljs-comment">//zhangsan</span><br><span class="hljs-title function_">alert</span>(person.<span class="hljs-property">age</span>); <span class="hljs-comment">//23</span><br><br>person.<span class="hljs-title function_">eat</span>();  <span class="hljs-comment">//干饭~</span><br></code></pre></td></tr></table></figure><h2 id="5，BOM"><a href="#5，BOM" class="headerlink" title="5，BOM"></a>5，BOM</h2><p>BOM：Browser Object Model 浏览器对象模型。也就是 JavaScript 将浏览器的各个组成部分封装为对象。</p><p>我们要操作浏览器的各个组成部分就可以通过操作 BOM 中的对象来实现。比如：我现在想将浏览器地址栏的地址改为 <code>https://www.itheima.com</code> 就可以通过使用 BOM 中定义的 <code>Location</code> 对象的 <code>href</code> 属性，代码： <code>location.href = &quot;https://itheima.com&quot;;</code> </p><p> BOM 中包含了如下对象：</p><ul><li>Window：浏览器窗口对象</li><li>Navigator：浏览器对象</li><li>Screen：屏幕对象</li><li>History：历史记录对象</li><li>Location：地址栏对象</li></ul><p>下图是 BOM 中的各个对象和浏览器的各个组成部分的对应关系</p><p><img src="assets/image-20210815194911914.png" alt="image-20210815194911914" style="zoom:70%;" /></p><p>BOM 中的 <code>Navigator</code> 对象和 <code>Screen</code> 对象基本不会使用，所以我们的课堂只对 <code>Window</code>、<code>History</code>、<code>Location</code> 对象进行讲解。</p><h3 id="5-1-Window对象"><a href="#5-1-Window对象" class="headerlink" title="5.1  Window对象"></a>5.1  Window对象</h3><p>window 对象是 JavaScript 对浏览器的窗口进行封装的对象。</p><h4 id="5-1-1-获取window对象"><a href="#5-1-1-获取window对象" class="headerlink" title="5.1.1  获取window对象"></a>5.1.1  获取window对象</h4><p>该对象不需要创建直接使用 <code>window</code>，其中 <code>window.</code> 可以省略。比如我们之前使用的 <code>alert()</code> 函数，其实就是 <code>window</code> 对象的函数，在调用是可以写成如下两种</p><ul><li><p>显式使用 <code>window</code> 对象调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>隐式调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">alert(&quot;abc&quot;)<br></code></pre></td></tr></table></figure></li></ul><h4 id="5-1-2-window对象属性"><a href="#5-1-2-window对象属性" class="headerlink" title="5.1.2  window对象属性"></a>5.1.2  window对象属性</h4><p><code>window</code> 对象提供了用于获取其他 BOM 组成对象的属性</p><p><img src="assets/image-20210815200625592.png" alt="image-20210815200625592" style="zoom:80%;" /></p><p>也就是说，我们想使用 <code>Location</code> 对象的话，就可以使用 <code>window</code> 对象获取；写成 <code>window.location</code>，而 <code>window.</code> 可以省略，简化写成 <code>location</code> 来获取 <code>Location</code> 对象。</p><h4 id="5-1-3-window对象函数"><a href="#5-1-3-window对象函数" class="headerlink" title="5.1.3  window对象函数"></a>5.1.3  window对象函数</h4><p><code>window</code> 对象提供了很多函数供我们使用，而很多都不常用；下面给大家列举了一些比较常用的函数</p><p><img src="assets/image-20210815201323329.png" alt="image-20210815201323329" style="zoom:80%;" /></p><blockquote><p><code>setTimeout(function,毫秒值)</code> : 在一定的时间间隔后执行一个function，只执行一次<br><code>setInterval(function,毫秒值)</code> :在一定的时间间隔后执行一个function，循环执行</p></blockquote><p><strong>confirm代码演示：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// confirm()，点击确定按钮，返回true，点击取消按钮，返回false</span><br><span class="hljs-keyword">var</span> flag = <span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;确认删除？&quot;</span>);<br><br><span class="hljs-title function_">alert</span>(flag);<br></code></pre></td></tr></table></figure><p>下图是 <code>confirm()</code> 函数的效果。当我们点击 <code>确定</code> 按钮，<code>flag</code> 变量值记录的就是 <code>true</code> ；当我们点击 <code>取消</code> 按钮，<code>flag</code> 变量值记录的就是 <code>false</code>。</p><p><img src="assets/image-20210815201600493.png" alt="image-20210815201600493" style="zoom:80%;" /></p><p>而以后我们在页面删除数据时候如下图每一条数据后都有 <code>删除</code> 按钮，有可能是用户的一些误操作，所以对于删除操作需要用户进行再次确认，此时就需要用到 <code>confirm()</code> 函数。</p><p><img src="assets/image-20210815202406490.png" alt="image-20210815202406490" style="zoom:70%;" /></p><p><strong>定时器代码演示：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hehe&quot;</span>);<br>&#125;,<span class="hljs-number">3000</span>);<br></code></pre></td></tr></table></figure><p>当我们打开浏览器，3秒后才会弹框输出 <code>hehe</code>，并且只会弹出一次。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hehe&quot;</span>);<br>&#125;,<span class="hljs-number">2000</span>);<br></code></pre></td></tr></table></figure><p>当我们打开浏览器，每隔2秒都会弹框输出 <code>hehe</code>。</p><h4 id="5-1-4-案例"><a href="#5-1-4-案例" class="headerlink" title="5.1.4  案例"></a>5.1.4  案例</h4><p><strong>需求：每隔1秒，灯泡切换一次状态</strong></p><p><img src="assets/image-20210815203345262.png" alt="image-20210815203345262" style="zoom:70%;" /></p><p>需求说明：</p><p>有如下页面效果，实现定时进行开灯、关灯功能</p><p><img src="assets/image-20210815203623739.png" alt="image-20210815203623739" style="zoom:80%;" /></p><p>初始页面环境</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JavaScript演示<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;on()&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;开灯&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myImage&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../imgs/off.gif&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align:center;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;off()&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;关灯&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">on</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;myImage&#x27;</span>).<span class="hljs-property">src</span>=<span class="hljs-string">&#x27;../imgs/on.gif&#x27;</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">off</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;myImage&#x27;</span>).<span class="hljs-property">src</span>=<span class="hljs-string">&#x27;../imgs/off.gif&#x27;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>代码实现：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JavaScript演示<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;on()&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;开灯&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myImage&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../imgs/off.gif&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align:center;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;off()&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;关灯&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">on</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;myImage&#x27;</span>).<span class="hljs-property">src</span>=<span class="hljs-string">&#x27;../imgs/on.gif&#x27;</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">off</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;myImage&#x27;</span>).<span class="hljs-property">src</span>=<span class="hljs-string">&#x27;../imgs/off.gif&#x27;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-comment">//定义一个变量，用来记录灯的状态，偶数是开灯状态，奇数是关灯状态</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> x = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">    <span class="hljs-comment">//使用循环定时器</span></span><br><span class="language-javascript">    <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span>(x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//表示是偶数，开灯状态，调用 on() 函数</span></span><br><span class="language-javascript">            <span class="hljs-title function_">on</span>();</span><br><span class="language-javascript">        &#125;<span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">//表示是奇数，关灯状态，调用 off() 函数</span></span><br><span class="language-javascript">            <span class="hljs-title function_">off</span>();</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        x ++;<span class="hljs-comment">//改变变量的值</span></span><br><span class="language-javascript">    &#125;,<span class="hljs-number">1000</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-2-History对象"><a href="#5-2-History对象" class="headerlink" title="5.2  History对象"></a>5.2  History对象</h3><p>History 对象是 JavaScript 对历史记录进行封装的对象。</p><ul><li><p>History 对象的获取</p><p>使用 window.history获取，其中window. 可以省略</p></li><li><p>History 对象的函数</p><p><img src="assets/image-20210815224826535.png" alt="image-20210815224826535" style="zoom:70%;" /></p><p>这两个函数我们平时在访问其他的一些网站时经常使用对应的效果，如下图</p><p><img src="assets/image-20210815225059114.png" alt="image-20210815225059114" style="zoom:80%;" /></p><p>当我们点击向左的箭头，就跳转到前一个访问的页面，这就是 <code>back()</code> 函数的作用；当我们点击向右的箭头，就跳转到下一个访问的页面，这就是 <code>forward()</code> 函数的作用。</p></li></ul><h3 id="5-3-Location对象"><a href="#5-3-Location对象" class="headerlink" title="5.3  Location对象"></a>5.3  Location对象</h3><p><img src="assets/image-20210815225243560.png" alt="image-20210815225243560" style="zoom:80%;" /></p><p>Location 对象是 JavaScript 对地址栏封装的对象。可以通过操作该对象，跳转到任意页面。</p><h4 id="5-3-1-获取Location对象"><a href="#5-3-1-获取Location对象" class="headerlink" title="5.3.1  获取Location对象"></a>5.3.1  获取Location对象</h4><p>使用 window.location获取，其中window. 可以省略</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.方法();<br>location.方法();<br></code></pre></td></tr></table></figure><h4 id="5-3-2-Location对象属性"><a href="#5-3-2-Location对象属性" class="headerlink" title="5.3.2  Location对象属性"></a>5.3.2  Location对象属性</h4><p>Location对象提供了很对属性。以后常用的只有一个属性 <code>href</code></p><p><img src="assets/image-20210815225707580.png" alt="image-20210815225707580" style="zoom:80%;" /></p><p><strong>代码演示：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;要跳转了&quot;</span>);<br>location.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;https://www.baidu.com&quot;</span>;<br></code></pre></td></tr></table></figure><p>在浏览器首先会弹框显示 <code>要跳转了</code>，当我们点击了 <code>确定</code> 就会跳转到 百度 的首页。</p><h4 id="5-3-3-案例"><a href="#5-3-3-案例" class="headerlink" title="5.3.3  案例"></a>5.3.3  案例</h4><p><strong>需求：3秒跳转到百度首页</strong></p><p><strong>分析：</strong></p><ol><li>3秒跳转，由此可以确定需要使用到定时器，而只跳转一次，所以使用 <code>setTimeOut()</code></li><li>要进行页面跳转，所以需要用到 <code>location</code> 对象的 <code>href</code> 属性实现</li></ol><p><strong>代码实现：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;3秒跳转到首页...&quot;</span>); <br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>    location.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;https://www.baidu.com&quot;</span><br>&#125;,<span class="hljs-number">3000</span>);<br></code></pre></td></tr></table></figure><h2 id="6，DOM"><a href="#6，DOM" class="headerlink" title="6，DOM"></a>6，DOM</h2><h3 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1  概述"></a>6.1  概述</h3><p>DOM：Document Object Model 文档对象模型。也就是 JavaScript 将 HTML 文档的各个组成部分封装为对象。</p><p>DOM 其实我们并不陌生，之前在学习 XML 就接触过，只不过 XML 文档中的标签需要我们写代码解析，而 HTML 文档是浏览器解析。封装的对象分为</p><ul><li>Document：整个文档对象</li><li>Element：元素对象</li><li>Attribute：属性对象</li><li>Text：文本对象</li><li>Comment：注释对象</li></ul><p>如下图，左边是 HTML 文档内容，右边是 DOM 树</p><p><img src="assets/image-20210815231028430.png" alt="image-20210815231028430"></p><p><strong>作用：</strong></p><p>JavaScript 通过 DOM， 就能够对 HTML进行操作了</p><ul><li>改变 HTML 元素的内容</li><li>改变 HTML 元素的样式（CSS）</li><li>对 HTML DOM 事件作出反应</li><li>添加和删除 HTML 元素</li></ul><p><strong>DOM相关概念：</strong></p><p>DOM 是 W3C（万维网联盟）定义了访问 HTML 和 XML 文档的标准。该标准被分为 3 个不同的部分：</p><ol><li><p>核心 DOM：针对任何结构化文档的标准模型。 XML 和 HTML 通用的标准</p><ul><li><p>Document：整个文档对象</p></li><li><p>Element：元素对象</p></li><li><p>Attribute：属性对象</p></li><li><p>Text：文本对象</p></li><li><p>Comment：注释对象</p></li></ul></li><li><p>XML DOM： 针对 XML 文档的标准模型</p></li><li><p>HTML DOM： 针对 HTML 文档的标准模型</p><p>该标准是在核心 DOM 基础上，对 HTML 中的每个标签都封装成了不同的对象</p><ul><li>例如：<code>&lt;img&gt;</code> 标签在浏览器加载到内存中时会被封装成 <code>Image</code> 对象，同时该对象也是 <code>Element</code> 对象。</li><li>例如：<code>&lt;input type=&#39;button&#39;&gt;</code> 标签在浏览器加载到内存中时会被封装成 <code>Button</code> 对象，同时该对象也是 <code>Element</code> 对象。</li></ul></li></ol><h3 id="6-2-获取-Element对象"><a href="#6-2-获取-Element对象" class="headerlink" title="6.2  获取 Element对象"></a>6.2  获取 Element对象</h3><p>HTML 中的 Element 对象可以通过 <code>Document</code> 对象获取，而 <code>Document</code> 对象是通过 <code>window</code> 对象获取。</p><p><code>Document</code> 对象中提供了以下获取 <code>Element</code> 元素对象的函数</p><ul><li><code>getElementById()</code>：根据id属性值获取，返回单个Element对象</li><li><code>getElementsByTagName()</code>：根据标签名称获取，返回Element对象数组</li><li><code>getElementsByName()</code>：根据name属性值获取，返回Element对象数组</li><li><code>getElementsByClassName()</code>：根据class属性值获取，返回Element对象数组</li></ul><p><strong>代码演示：</strong></p><p>下面有提前准备好的页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;light&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../imgs/off.gif&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cls&quot;</span>&gt;</span>传智教育<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cls&quot;</span>&gt;</span>黑马程序员<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>&gt;</span> 电影<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>&gt;</span> 旅游<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>&gt;</span> 游戏<br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//在此处书写js代码</span></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li><p>根据 <code>id</code> 属性值获取上面的 <code>img</code> 元素对象，返回单个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> img = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;light&quot;</span>);<br><span class="hljs-title function_">alert</span>(img);<br></code></pre></td></tr></table></figure><p>结果如下：</p><p><img src="assets/image-20210815233232924.png" alt="image-20210815233232924" style="zoom:80%;" /></p><p>从弹框输出的内容，也可以看出是一个图片元素对象。</p></li><li><p>根据标签名称获取所有的 <code>div</code> 元素对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> divs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;div&quot;</span>);<span class="hljs-comment">// 返回一个数组，数组中存储的是 div 元素对象</span><br><span class="hljs-comment">// alert(divs.length);  //输出 数组的长度</span><br><span class="hljs-comment">//遍历数组</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; divs.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-title function_">alert</span>(divs[i]);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>获取所有的满足 <code>name = &#39;hobby&#39;</code> 条件的元素对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//3. getElementsByName：根据name属性值获取，返回Element对象数组</span><br><span class="hljs-keyword">var</span> hobbys = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByName</span>(<span class="hljs-string">&quot;hobby&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; hobbys.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-title function_">alert</span>(hobbys[i]);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>获取所有的满足 <code>class=&#39;cls&#39;</code> 条件的元素对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//4. getElementsByClassName：根据class属性值获取，返回Element对象数组</span><br><span class="hljs-keyword">var</span> clss = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; clss.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-title function_">alert</span>(clss[i]);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="6-3-HTML-Element对象使用"><a href="#6-3-HTML-Element对象使用" class="headerlink" title="6.3  HTML Element对象使用"></a>6.3  HTML Element对象使用</h3><p>HTML 中的 <code>Element</code> 元素对象有很多，不可能全部记住，以后是根据具体的需求查阅文档使用。</p><p>下面我们通过具体的案例给大家演示文档的查询和对象的使用；下面提前给大家准备好的页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;light&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../imgs/off.gif&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cls&quot;</span>&gt;</span>传智教育<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cls&quot;</span>&gt;</span>黑马程序员<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>&gt;</span> 电影<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>&gt;</span> 旅游<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>&gt;</span> 游戏<br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//在此处写js低吗</span></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>需求：</strong></p><ol><li><p>点亮灯泡</p><p>此案例由于需要改变 <code>img</code> 标签 的图片，所以我们查询文档，下图是查看文档的流程：</p><p><img src="assets/查看文档.png" alt="image-20210815233232924" style="zoom:100%;" /></p><p>代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1，根据 id=&#x27;light&#x27; 获取 img 元素对象</span><br><span class="hljs-keyword">var</span> img = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;light&quot;</span>);<br><span class="hljs-comment">//2，修改 img 对象的 src 属性来改变图片</span><br>img.<span class="hljs-property">src</span> = <span class="hljs-string">&quot;../imgs/on.gif&quot;</span>;<br></code></pre></td></tr></table></figure></li><li><p>将所有的 <code>div</code> 标签的标签体内容替换为 <code>呵呵</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1，获取所有的 div 元素对象</span><br><span class="hljs-keyword">var</span> divs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;div&quot;</span>);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">        style:设置元素css样式</span><br><span class="hljs-comment">        innerHTML：设置元素内容</span><br><span class="hljs-comment">    */</span><br><span class="hljs-comment">//2，遍历数组，获取到每一个 div 元素对象，并修改元素内容</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; divs.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-comment">//divs[i].style.color = &#x27;red&#x27;;</span><br>    divs[i].<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;呵呵&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使所有的复选框呈现被选中的状态</p><p>此案例我们需要看 复选框 元素对象有什么属性或者函数是来操作 复选框的选中状态。下图是文档的查看</p><p><img src="assets/image-20210816000520457.png" alt="image-20210816000520457"></p><p>代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1，获取所有的 复选框 元素对象</span><br><span class="hljs-keyword">var</span> hobbys = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByName</span>(<span class="hljs-string">&quot;hobby&quot;</span>);<br><span class="hljs-comment">//2，遍历数组，通过将 复选框 元素对象的 checked 属性值设置为 true 来改变复选框的选中状态</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; hobbys.<span class="hljs-property">length</span>; i++) &#123;<br>    hobbys[i].<span class="hljs-property">checked</span> = <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="7，事件监听"><a href="#7，事件监听" class="headerlink" title="7，事件监听"></a>7，事件监听</h2><p>要想知道什么是事件监听，首先先聊聊什么是事件？</p><p>HTML 事件是发生在 HTML 元素上的“事情”。比如：页面上的 <code>按钮被点击</code>、<code>鼠标移动到元素之上</code>、<code>按下键盘按键</code> 等都是事件。</p><p>事件监听是JavaScript 可以在事件被侦测到时==执行一段逻辑代码。==例如下图当我们点击 <code>开灯</code> 按钮，就需要通过 js 代码实现替换图片</p><p><img src="assets/image-20210816194143246.png" alt="image-20210816194143246" style="zoom:80%;" /></p><p>再比如下图输入框，当我们输入了用户名 <code>光标离开</code> 输入框，就需要通过 js 代码对输入的内容进行校验，没通过校验就在输入框后提示 <code>用户名格式有误!</code></p><p><img src="assets/image-20210816194333252.png" alt="image-20210816194333252" style="zoom:90%;" /></p><h3 id="7-1-事件绑定"><a href="#7-1-事件绑定" class="headerlink" title="7.1  事件绑定"></a>7.1  事件绑定</h3><p>JavaScript 提供了两种事件绑定方式：</p><ul><li><p>方式一：通过 HTML标签中的事件属性进行绑定</p><p>如下面代码，有一个按钮元素，我们是在该标签上定义 <code>事件属性</code>，在事件属性中绑定函数。<code>onclick</code> 就是 <code>单击事件</code> 的事件属性。<code>onclick=&#39;on（）&#39;</code> 表示该点击事件绑定了一个名为 <code>on()</code> 的函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&#x27;on()’&gt;</span></span><br></code></pre></td></tr></table></figure><p>下面是点击事件绑定的 <code>on()</code> 函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">on</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;我被点了&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>方式二：通过 DOM 元素属性绑定</p><p>如下面代码是按钮标签，在该标签上我们并没有使用 <code>事件属性</code>，绑定事件的操作需要在 js 代码中实现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>下面 js 代码是获取了 <code>id=&#39;btn&#39;</code> 的元素对象，然后将 <code>onclick</code> 作为该对象的属性，并且绑定匿名函数。该函数是在事件触发后自动执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn&quot;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;我被点了&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><strong>代码演示：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--方式1：在下面input标签上添加 onclick 属性，并绑定 on() 函数--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点我&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;on()&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;再点我&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">on</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;我被点了&quot;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      <span class="hljs-comment">//方式2：获取 id=&quot;btn&quot; 元素对象，通过调用 onclick 属性 绑定点击事件</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn&quot;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;我被点了&quot;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="7-2-常见事件"><a href="#7-2-常见事件" class="headerlink" title="7.2  常见事件"></a>7.2  常见事件</h3><p>上面案例中使用到了 <code>onclick</code> 事件属性，那都有哪些事件属性供我们使用呢？下面就给大家列举一些比较常用的事件属性</p><div class="table-container"><table><thead><tr><th>事件属性名</th><th>说明</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标单击事件</td></tr><tr><td>onblur</td><td>元素失去焦点</td></tr><tr><td>onfocus</td><td>元素获得焦点</td></tr><tr><td>onload</td><td>某个页面或图像被完成加载</td></tr><tr><td>onsubmit</td><td>当表单提交时触发该事件</td></tr><tr><td>onmouseover</td><td>鼠标被移到某元素之上</td></tr><tr><td>onmouseout</td><td>鼠标从某元素移开</td></tr></tbody></table></div><ul><li><p><code>onfocus</code> 获得焦点事件。</p><p>如下图，当点击了输入框后，输入框就获得了焦点。而下图示例是当获取焦点后会更改输入框的背景颜色。</p><p><img src="assets/image-20210816214900928.png" alt="image-20210816214900928" style="zoom:80%;" /></p></li><li><p><code>onblur</code> 失去焦点事件。</p><p>如下图，当点击了输入框后，输入框就获得了焦点；再点击页面其他位置，那输入框就失去焦点了。下图示例是将输入的文本转换为大写。</p><p><img src="assets/image-20210816215235969.png" alt="image-20210816215235969" style="zoom:80%;" /></p></li><li><p><code>onmouseout</code> 鼠标移出事件。</p></li><li><p><code>onmouseover</code>  鼠标移入事件。</p><p>如下图，当鼠标移入到 苹果 图片上时，苹果图片变大；当鼠标移出 苹果图片时，苹果图片变小。</p><p><img src="assets/image-20210816220149093.png" alt="image-20210816220149093" style="zoom:70%;" /></p></li><li><p><code>onsubmit</code> 表单提交事件</p><p>如下是带有表单的页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;register&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;#&quot;</span> &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>        <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如上代码的表单，当我们点击 <code>提交</code> 按钮后，表单就会提交，此处默认使用的是 <code>GET</code> 提交方式，会将提交的数据拼接到 URL 后。现需要通过 js 代码实现阻止表单提交的功能，js 代码实现如下：</p><ol><li>获取 <code>form</code> 表单元素对象。</li><li>给 <code>form</code> 表单元素对象绑定 <code>onsubmit</code> 事件，并绑定匿名函数。</li><li>该匿名函数如果返回的是true，提交表单；如果返回的是false，阻止表单提交。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;register&quot;</span>).<span class="hljs-property">onsubmit</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">//onsubmit 返回true，则表单会被提交，返回false，则表单不提交</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="8，表单验证案例"><a href="#8，表单验证案例" class="headerlink" title="8，表单验证案例"></a>8，表单验证案例</h2><h3 id="8-1-需求"><a href="#8-1-需求" class="headerlink" title="8.1  需求"></a>8.1  需求</h3><p><img src="assets/image-20210816225925955.png" alt="image-20210816225925955" style="zoom:60%;" /></p><p>有如下注册页面，对表单进行校验，如果输入的用户名、密码、手机号符合规则，则允许提交；如果不符合规则，则不允许提交。</p><p>完成以下需求：</p><ol><li><p>当输入框失去焦点时，验证输入内容是否符合要求</p></li><li><p>当点击注册按钮时，判断所有输入框的内容是否都符合要求，如果不合符则阻止表单提交</p></li></ol><h3 id="8-2-环境准备"><a href="#8-2-环境准备" class="headerlink" title="8.2  环境准备"></a>8.2  环境准备</h3><p>下面是初始页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>欢迎注册<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../css/register.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-div&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;reg-content&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎注册<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>已有帐号？<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;reg-form&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inputs&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username_err&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;err_msg&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: none&quot;</span>&gt;</span>用户名不太受欢迎<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inputs&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;password_err&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;err_msg&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: none&quot;</span>&gt;</span>密码格式有误<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>手机号<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inputs&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;tel&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tel&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tel_err&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;err_msg&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: none&quot;</span>&gt;</span>手机号格式有误<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;buttons&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;注 册&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;reg_btn&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">br</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;clear&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="8-3-验证输入框"><a href="#8-3-验证输入框" class="headerlink" title="8.3  验证输入框"></a>8.3  验证输入框</h3><p>此小节完成如下功能：</p><ul><li>校验用户名。当用户名输入框失去焦点时，判断输入的内容是否符合 <code>长度是 6-12 位</code> 规则，不符合使 <code>id=&#39;username_err&#39;</code> 的span标签显示出来，给出用户提示。</li><li>校验密码。当密码输入框失去焦点时，判断输入的内容是否符合 <code>长度是 6-12 位</code> 规则，不符合使 <code>id=&#39;password_err&#39;</code> 的span标签显示出来，给出用户提示。</li><li>校验手机号。当手机号输入框失去焦点时，判断输入的内容是否符合 <code>长度是 11 位</code> 规则，不符合使 <code>id=&#39;tel_err&#39;</code> 的span标签显示出来，给出用户提示。</li></ul><p>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1. 验证用户名是否符合规则</span><br><span class="hljs-comment">//1.1 获取用户名的输入框</span><br><span class="hljs-keyword">var</span> usernameInput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;username&quot;</span>);<br><br><span class="hljs-comment">//1.2 绑定onblur事件 失去焦点</span><br>usernameInput.<span class="hljs-property">onblur</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//1.3 获取用户输入的用户名</span><br>    <span class="hljs-keyword">var</span> username = usernameInput.<span class="hljs-property">value</span>.<span class="hljs-title function_">trim</span>();<br><br>    <span class="hljs-comment">//1.4 判断用户名是否符合规则：长度 6~12</span><br>    <span class="hljs-keyword">if</span> (username.<span class="hljs-property">length</span> &gt;= <span class="hljs-number">6</span> &amp;&amp; username.<span class="hljs-property">length</span> &lt;= <span class="hljs-number">12</span>) &#123;<br>        <span class="hljs-comment">//符合规则</span><br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;username_err&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//不合符规则</span><br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;username_err&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//1. 验证密码是否符合规则</span><br><span class="hljs-comment">//1.1 获取密码的输入框</span><br><span class="hljs-keyword">var</span> passwordInput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;password&quot;</span>);<br><br><span class="hljs-comment">//1.2 绑定onblur事件 失去焦点</span><br>passwordInput.<span class="hljs-property">onblur</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//1.3 获取用户输入的密码</span><br>    <span class="hljs-keyword">var</span> password = passwordInput.<span class="hljs-property">value</span>.<span class="hljs-title function_">trim</span>();<br><br>    <span class="hljs-comment">//1.4 判断密码是否符合规则：长度 6~12</span><br>    <span class="hljs-keyword">if</span> (password.<span class="hljs-property">length</span> &gt;= <span class="hljs-number">6</span> &amp;&amp; password.<span class="hljs-property">length</span> &lt;= <span class="hljs-number">12</span>) &#123;<br>        <span class="hljs-comment">//符合规则</span><br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;password_err&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//不合符规则</span><br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;password_err&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//1. 验证手机号是否符合规则</span><br><span class="hljs-comment">//1.1 获取手机号的输入框</span><br><span class="hljs-keyword">var</span> telInput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;tel&quot;</span>);<br><br><span class="hljs-comment">//1.2 绑定onblur事件 失去焦点</span><br>telInput.<span class="hljs-property">onblur</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//1.3 获取用户输入的手机号</span><br>    <span class="hljs-keyword">var</span> tel = telInput.<span class="hljs-property">value</span>.<span class="hljs-title function_">trim</span>();<br><br>    <span class="hljs-comment">//1.4 判断手机号是否符合规则：长度 11</span><br>    <span class="hljs-keyword">if</span> (tel.<span class="hljs-property">length</span> == <span class="hljs-number">11</span>) &#123;<br>        <span class="hljs-comment">//符合规则</span><br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;tel_err&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//不合符规则</span><br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;tel_err&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-3-验证表单"><a href="#8-3-验证表单" class="headerlink" title="8.3  验证表单"></a>8.3  验证表单</h3><p>当用户点击 <code>注册</code> 按钮时，需要同时对输入的 <code>用户名</code>、<code>密码</code>、<code>手机号</code> ，如果都符合规则，则提交表单；如果有一个不符合规则，则不允许提交表单。实现该功能需要获取表单元素对象，并绑定 <code>onsubmit</code> 事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1. 获取表单对象</span><br><span class="hljs-keyword">var</span> regForm = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;reg-form&quot;</span>);<br><br><span class="hljs-comment">//2. 绑定onsubmit 事件</span><br>regForm.<span class="hljs-property">onsubmit</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><code>onsubmit</code> 事件绑定的函数需要对输入的 <code>用户名</code>、<code>密码</code>、<code>手机号</code> 进行校验，这些校验我们之前都已经实现过了，这里我们还需要再校验一次吗？不需要，只需要对之前校验的代码进行改造，把每个校验的代码专门抽象到有名字的函数中，方便调用；并且每个函数都要返回结果来去决定是提交表单还是阻止表单提交，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1. 验证用户名是否符合规则</span><br><span class="hljs-comment">//1.1 获取用户名的输入框</span><br><span class="hljs-keyword">var</span> usernameInput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;username&quot;</span>);<br><br><span class="hljs-comment">//1.2 绑定onblur事件 失去焦点</span><br>usernameInput.<span class="hljs-property">onblur</span> = checkUsername;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkUsername</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//1.3 获取用户输入的用户名</span><br>    <span class="hljs-keyword">var</span> username = usernameInput.<span class="hljs-property">value</span>.<span class="hljs-title function_">trim</span>();<br><br>    <span class="hljs-comment">//1.4 判断用户名是否符合规则：长度 6~12</span><br>    <span class="hljs-keyword">var</span> flag = username.<span class="hljs-property">length</span> &gt;= <span class="hljs-number">6</span> &amp;&amp; username.<span class="hljs-property">length</span> &lt;= <span class="hljs-number">12</span>;<br>    <span class="hljs-keyword">if</span> (flag) &#123;<br>        <span class="hljs-comment">//符合规则</span><br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;username_err&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//不合符规则</span><br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;username_err&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> flag;<br>&#125;<br><br><span class="hljs-comment">//1. 验证密码是否符合规则</span><br><span class="hljs-comment">//1.1 获取密码的输入框</span><br><span class="hljs-keyword">var</span> passwordInput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;password&quot;</span>);<br><br><span class="hljs-comment">//1.2 绑定onblur事件 失去焦点</span><br>passwordInput.<span class="hljs-property">onblur</span> = checkPassword;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkPassword</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//1.3 获取用户输入的密码</span><br>    <span class="hljs-keyword">var</span> password = passwordInput.<span class="hljs-property">value</span>.<span class="hljs-title function_">trim</span>();<br><br>    <span class="hljs-comment">//1.4 判断密码是否符合规则：长度 6~12</span><br>    <span class="hljs-keyword">var</span> flag = password.<span class="hljs-property">length</span> &gt;= <span class="hljs-number">6</span> &amp;&amp; password.<span class="hljs-property">length</span> &lt;= <span class="hljs-number">12</span>;<br>    <span class="hljs-keyword">if</span> (flag) &#123;<br>        <span class="hljs-comment">//符合规则</span><br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;password_err&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//不合符规则</span><br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;password_err&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> flag;<br>&#125;<br><br><span class="hljs-comment">//1. 验证手机号是否符合规则</span><br><span class="hljs-comment">//1.1 获取手机号的输入框</span><br><span class="hljs-keyword">var</span> telInput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;tel&quot;</span>);<br><br><span class="hljs-comment">//1.2 绑定onblur事件 失去焦点</span><br>telInput.<span class="hljs-property">onblur</span> = checkTel;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkTel</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//1.3 获取用户输入的手机号</span><br>    <span class="hljs-keyword">var</span> tel = telInput.<span class="hljs-property">value</span>.<span class="hljs-title function_">trim</span>();<br><br>    <span class="hljs-comment">//1.4 判断手机号是否符合规则：长度 11</span><br>    <span class="hljs-keyword">var</span> flag = tel.<span class="hljs-property">length</span> == <span class="hljs-number">11</span>;<br>    <span class="hljs-keyword">if</span> (flag) &#123;<br>        <span class="hljs-comment">//符合规则</span><br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;tel_err&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//不合符规则</span><br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;tel_err&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> flag;<br>&#125;<br></code></pre></td></tr></table></figure><p>而 <code>onsubmit</code> 绑定的函数需要调用 <code>checkUsername()</code> 函数、<code>checkPassword()</code> 函数、<code>checkTel()</code> 函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1. 获取表单对象</span><br><span class="hljs-keyword">var</span> regForm = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;reg-form&quot;</span>);<br><br><span class="hljs-comment">//2. 绑定onsubmit 事件</span><br>regForm.<span class="hljs-property">onsubmit</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//挨个判断每一个表单项是否都符合要求，如果有一个不合符，则返回false</span><br><br>    <span class="hljs-keyword">var</span> flag = <span class="hljs-title function_">checkUsername</span>() &amp;&amp; <span class="hljs-title function_">checkPassword</span>() &amp;&amp; <span class="hljs-title function_">checkTel</span>();<br><br>    <span class="hljs-keyword">return</span> flag;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9，RegExp对象"><a href="#9，RegExp对象" class="headerlink" title="9，RegExp对象"></a>9，RegExp对象</h2><p>RegExp 是正则对象。正则对象是判断指定字符串是否符合规则。</p><p>如下图是百度贴吧中的帖子</p><p><img src="assets/image-20210816235112754.png" alt="image-20210816235112754" style="zoom:70%;" /></p><p>我们可以通过爬虫技术去爬取该页面源代码，然后获取页面中所有的邮箱，后期我们可以给这些邮箱地址发送推广的邮件。那么问题来了，如何才能知道页面内容中哪些事邮箱地址呢？这里就可以使用正则表达式来匹配邮箱。</p><p>在 js 中对正则表达式封装的对象就是正则对象。</p><h3 id="9-1-正则对象使用"><a href="#9-1-正则对象使用" class="headerlink" title="9.1  正则对象使用"></a>9.1  正则对象使用</h3><h4 id="9-1-1-创建对象"><a href="#9-1-1-创建对象" class="headerlink" title="9.1.1  创建对象"></a>9.1.1  创建对象</h4><p>正则对象有两种创建方式：</p><ul><li><p>直接量方式：注意不要加引号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/正则表达式/</span>;<br></code></pre></td></tr></table></figure></li><li><p>创建 RegExp 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&quot;正则表达式&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul><h4 id="9-1-2-函数"><a href="#9-1-2-函数" class="headerlink" title="9.1.2  函数"></a>9.1.2  函数</h4><p><code>test(str)</code> ：判断指定字符串是否符合规则，返回 true或 false</p><h3 id="9-2-正则表达式"><a href="#9-2-正则表达式" class="headerlink" title="9.2  正则表达式"></a>9.2  正则表达式</h3><p>从上面创建正则对象的格式中可以看出不管哪种方式都需要正则表达式，那么什么是正则表达式呢？</p><p>正则表达式定义了字符串组成的规则。也就是判断指定的字符串是否符合指定的规则，如果符合返回true，如果不符合返回false。</p><p>正则表达式是和语言无关的。很多语言都支持正则表达式，Java语言也支持，只不过正则表达式在不同的语言中的使用方式不同，js 中需要使用正则对象来使用正则表达式。</p><p>正则表达式常用的规则如下：</p><ul><li><p>^：表示开始</p></li><li><p>$：表示结束</p></li><li><p>[ ]：代表某个范围内的单个字符，比如： [0-9] 单个数字字符</p></li><li><p>.：代表任意单个字符，除了换行和行结束符</p></li><li><p>\w：代表单词字符：字母、数字、下划线(<em>)，相当于 [A-Za-z0-9</em>]</p></li><li><p>\d：代表数字字符： 相当于 [0-9]</p></li></ul><p>量词：</p><ul><li><p>+：至少一个</p></li><li><p>*：零个或多个</p></li><li><p>？：零个或一个</p></li><li><p>{x}：x个</p></li><li><p>{m,}：至少m个</p></li><li><p>{m,n}：至少m个，最多n个</p></li></ul><p><strong>代码演示：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 规则：单词字符，6~12</span><br><span class="hljs-comment">//1,创建正则对象，对正则表达式进行封装</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^\w&#123;6,12&#125;$/</span>;<br><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abcccc&quot;</span>;<br><span class="hljs-comment">//2,判断 str 字符串是否符合 reg 封装的正则表达式的规则</span><br><span class="hljs-keyword">var</span> flag = reg.<span class="hljs-title function_">test</span>(str);<br><span class="hljs-title function_">alert</span>(flag);<br></code></pre></td></tr></table></figure><h3 id="9-3-改进表单校验案例"><a href="#9-3-改进表单校验案例" class="headerlink" title="9.3  改进表单校验案例"></a>9.3  改进表单校验案例</h3><p>表单校验案例中的规则是我们进行一系列的判断来实现的，现在学习了正则对象后，就可以使用正则对象来改进这个案例。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>欢迎注册<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../css/register.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-div&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;reg-content&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎注册<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>已有帐号？<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;reg-form&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inputs&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username_err&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;err_msg&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: none&quot;</span>&gt;</span>用户名不太受欢迎<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inputs&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;password_err&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;err_msg&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: none&quot;</span>&gt;</span>密码格式有误<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>手机号<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inputs&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;tel&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tel&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tel_err&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;err_msg&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: none&quot;</span>&gt;</span>手机号格式有误<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;buttons&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;注 册&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;reg_btn&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;clear&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//1. 验证用户名是否符合规则</span></span><br><span class="language-javascript">    <span class="hljs-comment">//1.1 获取用户名的输入框</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> usernameInput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;username&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//1.2 绑定onblur事件 失去焦点</span></span><br><span class="language-javascript">    usernameInput.<span class="hljs-property">onblur</span> = checkUsername;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">checkUsername</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//1.3 获取用户输入的用户名</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> username = usernameInput.<span class="hljs-property">value</span>.<span class="hljs-title function_">trim</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//1.4 判断用户名是否符合规则：长度 6~12,单词字符组成</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^\w&#123;6,12&#125;$/</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> flag = reg.<span class="hljs-title function_">test</span>(username);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//var flag = username.length &gt;= 6 &amp;&amp; username.length &lt;= 12;</span></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (flag) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//符合规则</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;username_err&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;</span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//不合符规则</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;username_err&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> flag;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//1. 验证密码是否符合规则</span></span><br><span class="language-javascript">    <span class="hljs-comment">//1.1 获取密码的输入框</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> passwordInput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;password&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//1.2 绑定onblur事件 失去焦点</span></span><br><span class="language-javascript">    passwordInput.<span class="hljs-property">onblur</span> = checkPassword;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">checkPassword</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//1.3 获取用户输入的密码</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> password = passwordInput.<span class="hljs-property">value</span>.<span class="hljs-title function_">trim</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//1.4 判断密码是否符合规则：长度 6~12</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^\w&#123;6,12&#125;$/</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> flag = reg.<span class="hljs-title function_">test</span>(password);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//var flag = password.length &gt;= 6 &amp;&amp; password.length &lt;= 12;</span></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (flag) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//符合规则</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;password_err&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;</span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//不合符规则</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;password_err&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> flag;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//1. 验证手机号是否符合规则</span></span><br><span class="language-javascript">    <span class="hljs-comment">//1.1 获取手机号的输入框</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> telInput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;tel&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//1.2 绑定onblur事件 失去焦点</span></span><br><span class="language-javascript">    telInput.<span class="hljs-property">onblur</span> = checkTel;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">checkTel</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//1.3 获取用户输入的手机号</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> tel = telInput.<span class="hljs-property">value</span>.<span class="hljs-title function_">trim</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//1.4 判断手机号是否符合规则：长度 11，数字组成，第一位是1</span></span><br><span class="language-javascript">        <span class="hljs-comment">//var flag = tel.length == 11;</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^[1]\d&#123;10&#125;$/</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> flag = reg.<span class="hljs-title function_">test</span>(tel);</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (flag) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//符合规则</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;tel_err&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;</span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//不合符规则</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;tel_err&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-javascript">        </span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> flag;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//1. 获取表单对象</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> regForm = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;reg-form&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//2. 绑定onsubmit 事件</span></span><br><span class="language-javascript">    regForm.<span class="hljs-property">onsubmit</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//挨个判断每一个表单项是否都符合要求，如果有一个不合符，则返回false</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> flag = <span class="hljs-title function_">checkUsername</span>() &amp;&amp; <span class="hljs-title function_">checkPassword</span>() &amp;&amp; <span class="hljs-title function_">checkTel</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> flag;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>插入排序</title>
      <link href="/2022/09/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
      <url>/2022/09/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><p>Leecode第147题：</p><blockquote><p>题目描述</p></blockquote><p>给定单个链表的头 head ，使用 插入排序 对链表进行排序，并返回 排序后链表的头 。</p><p>插入排序 算法的步骤:</p><p>插入排序是迭代的，每次只移动一个元素，直到所有元素可以形成一个有序的输出列表。<br>每次迭代中，插入排序只从输入数据中移除一个待排序的元素，找到它在序列中适当的位置，并将其插入。<br>重复直到所有输入数据插入完为止。<br>下面是插入排序算法的一个图形示例。部分排序的列表(黑色)最初只包含列表中的第一个元素。每次迭代时，从输入数据中删除一个元素(红色)，并就地插入已排序的列表中。</p><p>对链表进行插入排序。<br>链接：<a href="https://leetcode.cn/problems/insertion-sort-list">https://leetcode.cn/problems/insertion-sort-list</a><br><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/ccc.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入: head = [4,2,1,3]<br>输出: [1,2,3,4]<br></code></pre></td></tr></table></figure><p>题解代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">insertionSortList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>     <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>();<br>     cur = head.next;<br>     <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>();<br>     pre = head;<br>     <span class="hljs-keyword">while</span> (cur.next != <span class="hljs-literal">null</span>) &#123;<br>         <span class="hljs-keyword">if</span> (cur.val &lt; pre.val) &#123;<br>             swap(cur, pre);<br>         &#125;<br>         <span class="hljs-keyword">if</span> (pre.next == cur) &#123;<br>             pre = head;<br>             cur = cur.next;<br>         &#125; <span class="hljs-keyword">else</span> &#123;<br>             pre = pre.next;<br>         &#125;<br>     &#125;<br>     <span class="hljs-keyword">return</span> head;<br> &#125;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(ListNode cur, ListNode pre)</span> &#123;<br>     <span class="hljs-type">int</span> temp;<br>     temp = cur.val;<br>     cur.val = pre.val;<br>     pre.val = temp;<br> &#125;<br></code></pre></td></tr></table></figure><p>题解思路：</p><ol><li>首先我们创建两个指针一个指向head的pre和一个指向head.next的cur</li><li>我们来判断终止的条件就是当cur指针指向的最后一个元素比较完成后结束也就是(cur!=null)</li><li>在循环里面我们要知道如果当前的cur.val&lt;pre.val这时我们需要交换两者的数据。</li><li><p>交换完毕后有两种情况：</p><ul><li>当pre.next==cur时证明两者刚刚交换过此时直接让cur指向下一位而pre回到head</li><li>当pre.next!=cur时这时候cur不能指向下一位而是让pre指向下一位进行和cur的值进行比较完成循环。</li></ul></li><li><p>最终直接返回head的指针。</p></li></ol><blockquote><p>Leecode题解时间更快</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">insertionSortList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-comment">//首先判断头节点是否为空</span><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>        <span class="hljs-comment">//其次创建一个虚拟的头节点</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummyHead</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">//让该虚拟头节点指向head</span><br>        dummyHead.next = head;<br>        <span class="hljs-comment">//接着创建两个指着一个指向头一个指向头的下一个节点</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">lastSorted</span> <span class="hljs-operator">=</span> head, curr = head.next;<br>        <span class="hljs-comment">//判断当最快到达链表尾部的元素不为空时进行循环</span><br>        <span class="hljs-keyword">while</span> (curr != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//如果发现靠后的节点小于当前靠前的节点直接让靠后的节点++</span><br>            <span class="hljs-keyword">if</span> (lastSorted.val &lt;= curr.val) &#123;<br>                lastSorted = lastSorted.next;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//否则的话 就创建一个prev节点指向虚拟节点</span><br>                <span class="hljs-type">ListNode</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> dummyHead;<br>                <span class="hljs-comment">//直至prev指向=当前靠前节点</span><br>                <span class="hljs-keyword">while</span> (prev.next.val &lt;= curr.val) &#123;<br>                    prev = prev.next;<br>                &#125;<br>                <span class="hljs-comment">//然后进行节点的交换</span><br>                lastSorted.next = curr.next;<br>                curr.next = prev.next;<br>                prev.next = curr;<br>            &#125;<br>            curr = lastSorted.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummyHead.next;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong><a href="https://www.runoob.com/data-structures/insertion-sort.html">插入排序</a>算法的图解和代码详解；</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InsertionSort</span> &#123;<br>    <span class="hljs-comment">//核心代码---开始</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(Comparable[] arr)</span>&#123;<br><span class="hljs-comment">//首先获取数组的长度</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> arr.length;<br>        <span class="hljs-comment">//其次对数组进行遍历</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-comment">// j从第1开始每次和前面的作比较如果比前面的数据小则直接交换数据反之则退出内循环</span><br>          <span class="hljs-comment">//这个相当于j每次--从后面开始直至比到比他小的数为止也是插入排序的精髓</span><br>            <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i ; j &gt; <span class="hljs-number">0</span> ; j -- )<br>                <span class="hljs-keyword">if</span>( arr[j].compareTo( arr[j-<span class="hljs-number">1</span>] ) &lt; <span class="hljs-number">0</span> )<br>                    swap( arr, j , j-<span class="hljs-number">1</span> );<br>                <span class="hljs-keyword">else</span><br>                    <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//交换两个数组的内容</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(Object[] arr, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> arr[i];<br>        arr[i] = arr[j];<br>        arr[j] = t;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插入排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaWeb学习</title>
      <link href="/2022/09/06/JavaWeb%E5%AD%A6%E4%B9%A0/MyBatis/"/>
      <url>/2022/09/06/JavaWeb%E5%AD%A6%E4%B9%A0/MyBatis/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><h3 id="1-什么使MyBatis"><a href="#1-什么使MyBatis" class="headerlink" title="1.什么使MyBatis"></a>1.什么使MyBatis</h3><ul><li>MyBatis是一款优秀的持久层框架，用于简化JDBC开发</li><li>MyBatis本事APache的一个开源项目iBatis</li></ul><h3 id="2-持久层"><a href="#2-持久层" class="headerlink" title="2.持久层"></a>2.持久层</h3><ul><li>负责将数据保存到数据库的那一层代码</li><li>JavaEE三层架构：表现层、业务层、持久层</li></ul><h3 id="3-框架"><a href="#3-框架" class="headerlink" title="3.框架"></a>3.框架</h3><ul><li>框架就是在一个半成品的软件上，是一套可重用的，通用的、软件基础代码模型</li><li>在框架的基础之上构建软件编写更加高效、规范、通用、可扩展</li></ul><h3 id="4-JDBC的缺点"><a href="#4-JDBC的缺点" class="headerlink" title="4.JDBC的缺点"></a>4.JDBC的缺点</h3><ul><li>硬编码 <ul><li>注册驱动，获取连接</li><li>SQL语句</li></ul></li><li>操作繁琐<ul><li>手动设置参数</li><li>手动封装结果集</li></ul></li></ul><p><strong>MyBatis免除了几乎所有的JDBC代码以及设置参数和获取结果集的工作</strong></p><h1 id="MyBatis快速入门"><a href="#MyBatis快速入门" class="headerlink" title="MyBatis快速入门"></a>MyBatis快速入门</h1><blockquote><p>查询user表中的所有数据</p></blockquote><ol><li>创建user表，添加数据(在数据库中创建)</li><li>创建模块，导入坐标</li><li>编写MyBatis核心配置文件—-&gt;替换连接信息解决硬编码问题</li><li>编写SQL映射文件——&gt;统一管理sql语句，解决硬编码问题</li><li>编码<ol><li>定义PoJo类</li><li>加载核心配置文件获取SqlSessionFactory对象</li></ol></li></ol><blockquote><p>操作步骤</p></blockquote><p>1.新建文件创建Maven项目模块</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/bu1.png" alt=""></p><p>2.在创建好的pom.xml文件中导入坐标：在MyBatis官网上有入门操作</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--mybatis的依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>x.x.x<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>   <span class="hljs-comment">&lt;!--自己选择版本号--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>插入到下图二</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/bu2.png" alt=""></p><p>3、导入数据库的驱动mysql和单元测试的驱动junit</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.28<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4.导入logback-core依赖可以直接复制就行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 添加slf4j日志api --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 添加logback-classic依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 添加logback-core依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>5.在添加完成后需要配置文件在src/main/resources文件目录下建立<code>lockback.xml</code>文件添加以下代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        CONSOLE ：表示当前的日志信息是可以输出到控制台的。</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Console&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>[%level] %blue(%d&#123;HH:mm:ss.SSS&#125;) %cyan([%thread]) %boldGreen(%logger&#123;15&#125;) - %msg %n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.itheima&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;Console&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">      level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF</span><br><span class="hljs-comment">     ， 默认debug</span><br><span class="hljs-comment">      &lt;root&gt;可以包含零个或多个&lt;appender-ref&gt;元素，标识这个输出位置将会被本日志级别控制。</span><br><span class="hljs-comment">      --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;Console&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>6.编写MyBatis核心配置文件（替换数据库连接信息）在官网上看</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/bu5.png" alt=""></p><p>7.找到后返回idea继续在src/main/resources文件下建立<code>mybatis-config.xml</code>文件。并将下列代码copy到该文件下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">  <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">  <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>     <span class="hljs-comment">&lt;!--配置数据库连接信息可以配置多个environments通过default</span><br><span class="hljs-comment">属性来切换不同的environments--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>          <span class="hljs-comment">&lt;!--数据库连接信息--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--加载sql映射文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/mybatis/example/BlogMapper.xml&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>8.拷贝完成后需要其中修改相关数据库连接信息:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--将$&#123;driver&#125;改成jdbc的驱动路径--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span> <br><span class="hljs-comment">&lt;!--将$&#123;url&#125;改成jdbc的驱动路径--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://mybatis?useSSL=false&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--修改自己数据库的用户名和密码--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>9.加载sql的映射文件直接在官网上找相关映射实列代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">  <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">  <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--namespace这个需要修改他是个名称空间,以下代码需要修改--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.mybatis.example.BlogMapper&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectBlog&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>    select * from Blog where id = #&#123;id&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>10.找到后在src/main/resources文件下建立<code>UserMapper.xml</code>文件 这个名字可以修改用户为UserMapper，汽车为CarMapper等等。完成后将9步骤的代码复制到该文件下。</p><p>11.然后在src/main/java下创建相关的User类</p><p>12.修改第9步的相关信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!--修改名称空间为test--&gt;</span><br>  <span class="hljs-comment">&lt;!--查询数据库所有改为selectAll,后面的参数为User类的路径直接写User就可以--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span>  <br>       <span class="hljs-comment">&lt;!--修改相关的sql语句操作,tb_user为自己定义的表的名字--&gt;</span><br>    select * from tb_user;  <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>13.接着修改第七步里面的sql映射文件为<code>UserMapper.xml</code></p><p><code>&lt;mapper resource=&quot;UserMapper.xml&quot;/&gt;</code></p><h2 id="开始编码"><a href="#开始编码" class="headerlink" title="开始编码"></a>开始编码</h2><p>1.打开User类</p><p>创建相关数据库内的相关属性信息如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.pojo;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String PASSWORD;<br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-keyword">private</span> String addr;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, username=&#x27;&quot;</span> + username + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, PASSWORD=&#x27;&quot;</span> + PASSWORD + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, addr=&#x27;&quot;</span> + addr + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPASSWORD</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> PASSWORD;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPASSWORD</span><span class="hljs-params">(String PASSWORD)</span> &#123;<br>        <span class="hljs-built_in">this</span>.PASSWORD = PASSWORD;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getGender</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGender</span><span class="hljs-params">(String gender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAddr</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> addr;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAddr</span><span class="hljs-params">(String addr)</span> &#123;<br>        <span class="hljs-built_in">this</span>.addr = addr;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>2.接着写MyBatis的测试类：直接在src/main/java目录下创建一个文件<code>MyBatisDemo</code>然后进入官网拷贝以下代码并修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;org/mybatis/example/mybatis-config.xml&quot;</span>;<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br><span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br></code></pre></td></tr></table></figure><p>修改resource=”mybatis-config.xml”第二句有异常直接try-catch抛出就行可以，接着需要获取SqlSession对象，用来执行sql最后执行sql语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>     <span class="hljs-comment">//加载MyBatis的核心配置文件获取SqlSessionFactory</span><br>     <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>     <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>     <span class="hljs-keyword">try</span> &#123;<br>         inputStream = Resources.getResourceAsStream(resource);<br>     &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>         e.printStackTrace();<br>     &#125;<br>     <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span>         <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br>     <span class="hljs-comment">//获取SqlSession对象 用它来执行sql</span><br>     <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>     <span class="hljs-comment">//执行sql语句</span><br>    <span class="hljs-comment">//调用selectList括号的内容为上面自己定义的名称作用域test和标识(id)selectAll</span><br>     List&lt;User&gt; users = sqlSession.selectList(<span class="hljs-string">&quot;test.selectAll&quot;</span>);<br>    <span class="hljs-comment">//打印结果</span><br>     System.out.println(users);<br>     sqlSession.close();<br> &#125;<br><br></code></pre></td></tr></table></figure><h1 id="Mapper代理开发"><a href="#Mapper代理开发" class="headerlink" title="Mapper代理开发"></a>Mapper代理开发</h1><h3 id="代理步骤详解"><a href="#代理步骤详解" class="headerlink" title="代理步骤详解"></a>代理步骤详解</h3><ul><li>定义与SQL映射文件同名的Mapper接口，并且将Mapper接口和SQL映射文件放在同一目录下。</li></ul><p>需要在main下建立一个mapper类，而且在resource文件下建立相应的mapper路径 文件名称层次不用<code>.</code>用<code>\</code>来表示并且建立完成后将对应的UserMapper.xml放在该路径下即可。编译后IDEA自动将接口和SQL映射文件放在一起.</p><ul><li>设置SQL映射文件的namespace属性为mapper接口的全限定名:open_file_folder:UserMapper.xml修改代码</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.itheima.mapper.UserMapper&quot;</span>&gt;</span> <br>  <span class="hljs-comment">&lt;!---修改text为com.itheima.mapper.UserMapper--&gt;</span><br><span class="hljs-comment">&lt;!--就是你的UserMapper放在的地方路径--&gt;</span><br></code></pre></td></tr></table></figure><ul><li>在Mapper接口中定义方法，方法名就是SQL映射文件中的sql语句的id，并保持参数类型和返回值类型的一致</li></ul><p>在接口类：UserMapper中添加以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    List&lt;User&gt; <span class="hljs-title function_">selectAll</span><span class="hljs-params">()</span>;   <br>    <span class="hljs-comment">//因为在配置文件UserMapper.xml中有</span><br>    <span class="hljs-comment">// &lt;select id=&quot;selectAll&quot; resultType=&quot;com.itheima.pojo.User&quot;&gt;</span><br>    <span class="hljs-comment">//上面代码有标识id和返回值类型为User所以这里定义的接口为List容器来盛放多个User对象</span><br>&#125;<br></code></pre></td></tr></table></figure><p>完成后需要修改mybatis-config.xml文件中的配置路径，因为刚刚我们把UserMapper.xml文件放在了新的目录下所以这里我们需要改变路径：复制文件的路径修改以下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--加载sql映射文件 更改后修改resource路径--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/itheima/mapper/UserMapper.xml&quot;</span>/&gt;</span>  <br>   <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>编码<ol><li>通过SqlSession的getMapper方法获取Mapper接口的代理对象</li><li>调用对应的方法完成sql的执行</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>     <span class="hljs-comment">//加载MyBatis的核心配置文件获取SqlSessionFactory</span><br>     <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>     <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>     <span class="hljs-keyword">try</span> &#123;<br>         inputStream = Resources.getResourceAsStream(resource);<br>     &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>         e.printStackTrace();<br>     &#125;<br>     <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br>     <span class="hljs-comment">//获取SqlSession对象 用它来执行sql</span><br>     <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>     <span class="hljs-comment">//执行sql语句(在Mapper代理中下面这句代码注释掉)</span><br>    <span class="hljs-comment">// List&lt;User&gt; users = sqlSession.selectList(&quot;test.selectAll&quot;);</span><br>     <span class="hljs-comment">//重点！！！获取对应userMapper代理对象 </span><br>     <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>     List&lt;User&gt;users= userMapper.selectAll();<br>    <span class="hljs-comment">//重点两句代码</span><br>     System.out.println(users);<br>     sqlSession.close();<br> &#125;<br></code></pre></td></tr></table></figure><p><strong>运行流程分析：</strong></p><ol><li>利用<code>SqlSession sqlSession = sqlSessionFactory.openSession();</code>获取sqlSession</li><li>通过sqlSession可以获取UserMapper代理对象就直接找到UserMapper.java接口</li><li>接着在当前目录下有一个同名的映射文件就可以找到UserMapper.xml的sql语句</li><li>通过最后一句<code>List&lt;User&gt;users= userMapper.selectAll();</code>调用UserMapper.java接口的方法然而该函数<code>List&lt;User&gt; selectAll();</code>名称为UserMapper.xml文件中sql的id名字：<code>&lt;select id=&quot;selectAll&quot; resultType=&quot;com.itheima.pojo.User&quot;&gt;</code></li><li>所以接着就执行id对应的sql语句，执行完毕后因为有返回类型User所以就返回给UserMapper接口，在调用文件中我们用一个List<User>来接收该返回值并打印输出。</li></ol><blockquote><p>细节</p></blockquote><p>​    如果Mapper接口名称和SQL映射文件名称相同，并且在同一目录下，则可以使用包扫描的方式简化SQL映射的加载</p><p><strong>相关操作：</strong>在mybatis-config.xml文件中修改sql映射文件代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--加载sql映射文件,在这里可以直接引入同一个包下面的文件--&gt;</span><br>      <span class="hljs-comment">&lt;!-- &lt;mapper resource=&quot;com/itheima/mapper/UserMapper.xml&quot;/&gt; --&gt;</span><br>    <span class="hljs-comment">&lt;!--Mapper代理方式 一行代码全部搞定--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.itheima.mapper&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>核心配置文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;typeAliases&gt;  &lt;!--起别名--&gt;<br>       &lt;<span class="hljs-keyword">package</span> name=<span class="hljs-string">&quot;com.itheima.pojo&quot;</span>/&gt;<br>   &lt;/typeAliases&gt;<br></code></pre></td></tr></table></figure><h3 id="配置文件完成增删改查"><a href="#配置文件完成增删改查" class="headerlink" title="配置文件完成增删改查"></a>配置文件完成增删改查</h3><h4 id="1-查询所有数据"><a href="#1-查询所有数据" class="headerlink" title="1.查询所有数据"></a>1.查询所有数据</h4><p>1.编写接口方法：Mapper接口</p><ul><li>参数无</li><li>结果:List<Brand></li></ul><p>2.编写SQL语句,SQL映射文件</p><p>3.执行方法，测试</p><blockquote><p>编写方法</p></blockquote><p>参数占位符 1.#{} 会将其替换为? 为了防止SQL注入 </p><p>   2.${}   拼SQL 会存在SQL注入问题</p><p>3.使用时机 <strong>*在参数传递的时候；#{}  不使用${}</strong></p><p>可以指定参数类型:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectById&quot;</span>  <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;brandResultMap&quot;</span>&gt;</span> <br>    <span class="hljs-comment">&lt;!--还有一个parameterType=&quot;参数类型&quot; 一般不写--&gt;</span><br>    select *from tb_brand where id=#&#123;id&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>对应的特殊字符</p></blockquote><p>解决小于号不能用：</p><ol><li><p>转义字符 &lt;(&amp;lt)</p></li><li><p>输入CDATA区</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="/2022/09/05/JavaWeb%E5%AD%A6%E4%B9%A0/JDBC/"/>
      <url>/2022/09/05/JavaWeb%E5%AD%A6%E4%B9%A0/JDBC/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><blockquote><p>详解DriveManager</p></blockquote><p>驱动管理类(工具类)：</p><p>1.注册驱动  ——可以省略注册驱动这个步骤 <code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;)</code></p><p>2.获取数据库连接 ——url:连接路径 ——user：用户名—password:密码</p><p>语法：<code>jdbc:mysql://127.0.0.1:3306/db1</code>  解释 {//ip地址（域名）:端口号/数据库名称?参数键值对1&amp;参数键值对2&amp;…}</p><p>获取连接；如果连接的是本机的mysql并且端口号是默认的3306 可以简化书写<code>jdbc:mysql://db1</code></p><p>可以配置useSSL=false 可以去除警告</p><blockquote><p>Connection详解</p></blockquote><p><strong>1.获取执行的SQL对象</strong></p><ul><li>普通执行SQL对象：<code>Statement creatStatement()</code></li><li>预编译SQL的执行SQL对象：防止SQL注入<code>PreparedStatement prepareStatement(sql)</code></li><li>执行存储过程的对象 <code>CallableStatement prepareCall(sql)</code></li></ul><p><strong>2.执行事务</strong></p><ul><li>MySQL事务管理</li></ul><p>开启事务：<code>BEGIN;/START TRANSACTION</code></p><p>提交事务：<code>COMMIT</code></p><p>回滚事务：<code>ROLLBACK</code></p><p>mysql默认自动提交事务</p><ul><li>JDBC 事务管理：Connection接口中定义了3个对应的方法</li></ul><p>开启事务：<code>setAutoCommit(boolean autoCommit):true 为自动提交事务 false为手动提交事务，即开启事务</code></p><p>提交事务：<code>COMMIT()</code></p><p>回滚事务：<code>ROLLBACK()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.jdbc;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCDemo3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//注册驱动</span><br>        <span class="hljs-comment">// Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br>        <span class="hljs-comment">//获取连接</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/db1?useSSL=false&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br>        <span class="hljs-comment">//定义SQL语句</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update account set money =3000 where id =1&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update account set money =3000 where id =2&quot;</span>;<br>        <span class="hljs-comment">//获取执行sql的对象Statement</span><br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> conn.createStatement();<br><br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//**开启事务</span><br>            conn.setAutoCommit(<span class="hljs-literal">false</span>); <span class="hljs-comment">//如果注释掉则会修改数据</span><br>            <span class="hljs-comment">//执行sql</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">count1</span> <span class="hljs-operator">=</span> stmt.executeUpdate(sql1);  <span class="hljs-comment">//受影响的行数</span><br>            <span class="hljs-comment">//处理结果</span><br>            System.out.println(count1);<br>           <span class="hljs-comment">// int i = 3 / 0;  //打开手动制造一个异常</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">count2</span> <span class="hljs-operator">=</span> stmt.executeUpdate(sql2);  <span class="hljs-comment">//受影响的行数</span><br>            <span class="hljs-comment">//处理结果</span><br>            System.out.println(count2);<br>            <span class="hljs-comment">//提交事务</span><br>            conn.commit();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception throwables) &#123;<br>            <span class="hljs-comment">//回滚事务</span><br>            conn.rollback();<br>            throwables.printStackTrace();<br>        &#125;<br><br><br>        <span class="hljs-comment">//释放资源</span><br>        stmt.close();<br>        conn.close();<br>        ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>Statement详解</p></blockquote><p>1.执行SQL语句</p><p><code>int executeUpdate(sql)</code>执行DML、DDL语句</p><p>→返回值(1)DML语句影响的行数  （2）DDL语句执行后，执行成功也可能返回0</p><p><code>ResultSet executeQuery(sql)</code>执行DQL语句 →返回值：ResultSet结果集对象</p><blockquote><p>ResultSet详解</p></blockquote><ul><li>ResultSet(结果集对象)作用：</li></ul><p>​        1.封装了DQL查询语句的结果</p><p><code>ResultSet stmt.executrQuery(sql)</code> 执行DQL语句，返回ResultSet对象</p><ul><li>获取查询结果</li></ul><p><code>boolean next()</code>(1)将光标从当前位置向前移动一行(2)判断当前行是否有效行；</p><p>→返回值:</p><ul><li>true:有效行，当前行有数据</li><li>false：无效行，当前行没有数据</li></ul><p>xxx getXxx(参数) 获取数据</p><p>→xxx：数据类型；如int getlnt(参数)；String getString(参数)</p><p>→参数：</p><ul><li>int :列的编号，从一开始</li><li>String ：列的名称</li></ul><p>使用步骤：</p><ol><li>游标向下移动一行，并判断改行是否有数据:next()</li><li>获取数据：getXxx(参数)</li></ol><blockquote><p>PreparedStatement</p></blockquote><p>作用：</p><ol><li>预编译SQL语句并执行,预防SQL注入问题</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">textResultSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/db1?useSSL=false&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br>    <span class="hljs-comment">//接收用户名和密码</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;zhangsan&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">pwd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from tb_user where username=&#x27;&quot;</span> + name + <span class="hljs-string">&quot;&#x27; and password=&#x27;&quot;</span> + pwd + <span class="hljs-string">&quot;&#x27;&quot;</span>;<br>    <span class="hljs-comment">//获取stmt对象</span><br>    <span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> conn.createStatement();<br>    <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> stmt.executeQuery(sql);<br>    <span class="hljs-comment">//判断登录是否成功</span><br>    <span class="hljs-keyword">if</span> (rs.next()) &#123;<br>        System.out.println(<span class="hljs-string">&quot;登录成功！！&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;登录失败~~&quot;</span>);<br>    &#125;<br>    rs.close();<br>    stmt.close();<br>    conn.close();<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>SQL注入<ul><li>SQL注入是通过操作输入来修改事先定义好的SQL语句，用以达到执行代码对服务器进行攻击的方法。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * SQL注入</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">textLogin_Inject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/db1?useSSL=false&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br>    <span class="hljs-comment">//接收用户名和密码</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;sadasdasd&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">pwd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#x27; or &#x27;1&#x27; = &#x27;1&quot;</span>;  <span class="hljs-comment">//注入语法</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from tb_user where username=&#x27;&quot;</span> + name + <span class="hljs-string">&quot;&#x27; and password=&#x27;&quot;</span> + pwd + <span class="hljs-string">&quot;&#x27;&quot;</span>;<br>    <span class="hljs-comment">//获取stmt对象</span><br>    System.out.println(sql);<br>    <span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> conn.createStatement();<br>    <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> stmt.executeQuery(sql);<br>    <span class="hljs-comment">//判断登录是否成功</span><br>    <span class="hljs-keyword">if</span> (rs.next()) &#123;<br>        System.out.println(<span class="hljs-string">&quot;登录成功！！&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;登录失败~~&quot;</span>);<br>    &#125;<br>    rs.close();<br>    stmt.close();<br>    conn.close();<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>防止SQL注入的方法</li></ul><ol><li>获取<code>PreparedStatement</code>对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//SQL语句中的参数值，使用?占位符来代替</span><br><br>String sql=<span class="hljs-string">&quot;select *from user where username =? and password = ?&quot;</span>;<br><br><span class="hljs-comment">//通过Connection对象获取，并且传入对应的SQL语句</span><br>PrepareStatedment pstmt=conn.prepareStatement(sql);<br></code></pre></td></tr></table></figure><p>2.设置参数值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">PreparedStatement 对象 ：setXxx(参数<span class="hljs-number">1</span>，参数二):给？赋值<br>    →Xxx：数据类型; 如setInt(参数一，参数二)<br>    →参数：<br>        参数<span class="hljs-number">1</span>：?的位置编号从一开始<br>        参数<span class="hljs-number">2</span>: ?的值<br></code></pre></td></tr></table></figure><p>3.执行SQL</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">executeUpdate(); /executeQuery(); ：不需要在传递sql<br></code></pre></td></tr></table></figure><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">textPreparedStatement</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/db1?useSSL=false&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br>    <span class="hljs-comment">//接收用户名和密码</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;zhangsan&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">pwd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#x27; or &#x27;1&#x27; = &#x27;1&quot;</span>;  <span class="hljs-comment">//此时注入无效</span><br>    <span class="hljs-comment">//定义SQL</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select*from tb_user where username=? and password=?&quot;</span>;<br>    <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">pstmt</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br>    <span class="hljs-comment">//设置？的值</span><br>    pstmt.setString(<span class="hljs-number">1</span>, name);<br>    pstmt.setString(<span class="hljs-number">2</span>, pwd);<br>    <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> pstmt.executeQuery();<br><br><br>    <span class="hljs-comment">//判断登录是否成功</span><br>    <span class="hljs-keyword">if</span> (rs.next()) &#123;<br>        System.out.println(<span class="hljs-string">&quot;登录成功！！&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;登录失败~~&quot;</span>);<br>    &#125;<br>    rs.close();<br>    pstmt.close();<br>    conn.close();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><blockquote><p>数据库连接池简介</p></blockquote><ul><li>数据库连接池是个容器，负责分配管理数据库连接</li><li>它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个</li><li>释放空闲的实践超过最大空闲时间的数据库连接来避免因为没有释放数据库连接而引起的数据库遗漏</li><li>好处</li></ul><ol><li>资源重用</li><li>提升数据库的响应速度</li><li>避免数据库连接遗漏</li></ol><blockquote><p>数据库连接池的实现</p></blockquote><ul><li><p>标准接口：DataSource</p><ul><li>官方（SUN）提供的数据库连接池标准接口，由第三方组织实现此接口</li><li>功能：获取连接<code>Connection getConnection()</code></li></ul></li><li><p>常见的数据库连接池</p><ul><li>DBCP</li><li>C3P0</li><li>Druid</li></ul></li><li><p>Druid(德鲁伊)</p><ul><li>Druid连接池是阿里巴巴开源的数据库连接池项目</li><li>功能强大，性能优秀，是java语言最好的数据库连接池之一</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AVL和红黑树</title>
      <link href="/2022/09/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/AVL%E6%A0%91/"/>
      <url>/2022/09/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/AVL%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="AVL树"><a href="#AVL树" class="headerlink" title="AVL树"></a>AVL树</h1><blockquote><p>AVL树的概念</p></blockquote><p>基于二叉搜索树上的优化，它解决了如果数据有序或者接近有序的二叉搜索树将退化为单链表查找元素相当于在顺序表中搜索元素，效率低下。故AVL树当向二叉搜索树中插入新的节点，能够保持每个节点的左右子树高度之差的绝对值不超过1，从而减少平均搜索的长度，</p><blockquote><p>特点</p></blockquote><p>①叶子节点的最大高度相差不会超过1 平衡二叉树</p><p>②对于任意一个节点，左子树和右子树的高度差不能超过1</p><p>③平横二叉树的高度和节点的数量之间的关系也是O(logn)的</p><p>④AVL常常用于查询较多的情况下</p><p>⑤他的左右子树均为AVL树</p><p>⑥如果一棵二叉树是高度平衡的，他就是AVL树，如果他有n个节点，其高度可保持在<script type="math/tex">O(log_{2}N)</script>搜索的时间复杂度为<script type="math/tex">O(log_{2}N)</script>  </p><p>⑦AVL树中的任意节点的BF只可能是-1 0 1；</p><p>如下图为一颗AVL树：</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/ssss.png" alt=""></p><h2 id="AVL的实现"><a href="#AVL的实现" class="headerlink" title="AVL的实现"></a>AVL的实现</h2><blockquote><p>实现AVL树的逻辑</p></blockquote><ol><li>首先在<code>AVLTree</code>中定义一个节点内部类Node;</li><li>构造函数初始化AVL树</li><li>基于二分搜索树的实现AVL树</li></ol><blockquote><p>实现Node节点的代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>     <span class="hljs-keyword">public</span> K key;<br>     <span class="hljs-keyword">public</span> V value;<br>     <span class="hljs-keyword">public</span> Node left, right;<br>     <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> height;<br><br>     <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(K key, V value)</span> &#123;<br>         <span class="hljs-built_in">this</span>.key = key;<br>         <span class="hljs-built_in">this</span>.value = value;<br>         left = <span class="hljs-literal">null</span>;<br>         right = <span class="hljs-literal">null</span>;<br>         height = <span class="hljs-number">1</span>;<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>定义一个节点主要存储他的key和value （一般只用value 就可以这里复用了BSTMap的结构算法）</p><blockquote><p>对<code>AVLTree</code> 树的初始化</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//私有成员变量root和size并在构造函数里面初始化操作 </span><br><span class="hljs-keyword">private</span> Node root;    <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AVLTree</span><span class="hljs-params">()</span> &#123;<br>        root = <span class="hljs-literal">null</span>;<br>        size = <span class="hljs-number">0</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p>判断该树是否为一个二分搜索树（这个可以省略）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//判断是否为二分搜索树 </span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isBST</span><span class="hljs-params">()</span> &#123;<br>        ArrayList&lt;K&gt; keys = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>       <span class="hljs-comment">//判断是否有序</span><br>    inOrder(root, keys);<br>    <span class="hljs-comment">//由上一步可以的出整棵树的顺序均在keys容器中存放</span><br>    <span class="hljs-comment">//遍历容器让后者根前者比较如果后者小于前者则证明不是个二分搜索树</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; keys.size(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (keys.get(i - <span class="hljs-number">1</span>).compareTo(keys.get(i)) &gt; <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><span class="hljs-comment">//中序遍历法：如果有序则结果也有序</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inOrder</span><span class="hljs-params">(Node node, ArrayList&lt;K&gt; keys)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        inOrder(node.left, keys);<br>        <span class="hljs-comment">//将节点数据拿出向ArrayList中添加keys值便于isBST判断</span><br>        keys.add(node.key);<br>        inOrder(node.right, keys);<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p>一些辅助函数<code>contains() --set()---get()</code></p></blockquote><p><code>minimun()</code>得到对应子树下的最小的节点值属于一个递归函数</p><p><code>contains(K key)</code>该函数主要证明所查的节点是否在该树内</p><p><code>get(K key)</code>得到键值为key得value值（对于AVL树来说可以不需要）</p><p><code>set(K key ,V newValue)</code>将键值为key得地方的值修改为value 如果存在进行覆盖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//拿到传入节点的最小的值   </span><br><span class="hljs-keyword">private</span> Node <span class="hljs-title function_">minimum</span><span class="hljs-params">(Node node)</span> &#123;<br>       <span class="hljs-comment">//递归终止的条件最左边为null</span><br>       <span class="hljs-keyword">if</span> (node.left == <span class="hljs-literal">null</span>) &#123;<br>           <span class="hljs-keyword">return</span> node;<br>       &#125;<br>       <span class="hljs-comment">//进入递归将左子树的左子树传入</span><br>       <span class="hljs-keyword">return</span> minimum(node.left);<br>   &#125;<br><br><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(K key)</span> &#123;<br>       <span class="hljs-keyword">return</span> getNode(root, key) != <span class="hljs-literal">null</span>;<br>   &#125;<br><br><br>   <span class="hljs-keyword">public</span> V <span class="hljs-title function_">get</span><span class="hljs-params">(K key)</span> &#123;<br>       <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> getNode(root, key);<br>       <span class="hljs-keyword">return</span> node == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : node.value;<br>   &#125;<br><br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(K key, V newValue)</span> &#123;<br>       <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> getNode(root, key);<br>       <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(key + <span class="hljs-string">&quot;doesn&#x27;t exist!&quot;</span>);<br>       &#125;<br>       node.value = newValue;<br>   &#125;<br><span class="hljs-comment">//得到数的元素个数</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-keyword">return</span> size;<br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-keyword">return</span> size==<span class="hljs-number">0</span>;<br>   &#125;<br><span class="hljs-comment">//得到以node为节点树的高度</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getHeight</span><span class="hljs-params">(Node node)</span>&#123;<br>       <span class="hljs-keyword">if</span>(node==<span class="hljs-literal">null</span>)&#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>       &#125;<br>       <span class="hljs-keyword">return</span> node.height;<br>   &#125;<br></code></pre></td></tr></table></figure><blockquote><p>辅助函数判断该树是否为一颗二叉平衡树</p></blockquote><p><strong>这里可以创建一个<code>isBalanced()</code>函数通过递归调用最终的出结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isBalanced</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> isBalanced(root);<br>&#125;<br> <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isBalanced</span><span class="hljs-params">(Node node)</span> &#123;<br>     <span class="hljs-comment">//递归终止的条件只有当节点为空的时候返回true</span><br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>     <span class="hljs-comment">//得到当前节点的平衡因数；</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">balanceFactor</span> <span class="hljs-operator">=</span> getBalanceFactor(node);<br>     <span class="hljs-comment">//因为平衡因数的绝对值不可能大于一，一旦大于一直接返回false</span><br>        <span class="hljs-keyword">if</span> (Math.abs(balanceFactor) &gt; <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>     <span class="hljs-comment">//最后递归调用左子树和右子树分别进行判断直至全部遍历完成</span><br>        <span class="hljs-keyword">return</span> isBalanced(node.left) &amp;&amp; isBalanced(node.right);<br>    &#125;<br><span class="hljs-comment">//私有函数能够的到当前的平衡因数这里规定左子树的高度-右子树的高度</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getBalanceFactor</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> getHeight(node.left) - getHeight(node.right);<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p>向<code>AVL</code>树中添加元素</p></blockquote><p><strong>基本逻辑</strong></p><ol><li>传入三个元素 root ,key ,value 先判断根节点是否为空是的话维护size 然后创建一个新节点。</li><li>当元素不为空的时候比较插入的位置是左子树还是右子树</li><li>当插入元素以后更新树的高度，可以利用上面的辅助函数<code>getHeight()</code>函数，得到根节点的高度。</li><li>计算平衡因子以便于维护AVL树的平衡</li><li>辅助函数LL、RR、LR、RL函数共同来维持加入一个元素后树的平衡性。</li></ol><p>①当添加一个新的节点后构成LL（左子树的左孩子）则需要进行右旋转</p><p>②当添加一个新的节点后构成RR（右子树的右孩子）则需要进行左旋转</p><p>③当添加一个新的节点后构成LR（左子树的右孩子）则需要对左子树进行左旋转，然后整体右旋转</p><p>④当添加一个新的节点后构成RL（右子树的左孩子）则需要对右子树进行右旋转，然后整体左旋转</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/uuu1.png" alt=""></p><p>​    图片解析 上图主要介绍了三个旋转LL、RR、RL旋转LR旋转和RL旋转相反应该先对以左子树为根节点进行左转，然后再以根节点为中心进行右转可以的到；</p><blockquote><p>右旋转<code>rightRotate(Node y)</code> 的实现及其原理</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Node <span class="hljs-title function_">rightRotate</span><span class="hljs-params">(Node y)</span>&#123;<br>   <span class="hljs-comment">//首先用x暂存节点y的左子树</span><br>    Node x=y.left;<br>    <span class="hljs-comment">//其次用节点temp存储x的右子树</span><br>    Node temp=x.right;<br>    <span class="hljs-comment">//接着让x的右指针指向y</span><br>    x.rignt=y;<br>    <span class="hljs-comment">//最后将x原本的右子树挂到y的左子树上</span><br>    y.left=temp;<br>    <span class="hljs-comment">//旋转完成后要更新height的值</span><br>    <span class="hljs-comment">//总体来说只有y和x的高度变了其余的高度正常</span><br>    y.height=Math.max(getHeight(y.left),getHeight(y.right))+<span class="hljs-number">1</span>;<br>    x.height=Math.max(getHeight(x.left),getHeight(x.right))+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>左旋转 <code>leftRotate(Node y)</code> 的实现及其原理和右子树正好相反</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Node <span class="hljs-title function_">leftRotate</span><span class="hljs-params">(Node y)</span> &#123;  <br>    <span class="hljs-type">Node</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> y.right;<br>       <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> x.left;<br>       x.left = y;<br>       y.right = temp;<br>       <span class="hljs-comment">//更新height的 值</span><br>       y.height = Math.max(getHeight(y.left), getHeight(y.right)) + <span class="hljs-number">1</span>;<br>       x.height = Math.max(getHeight(x.left), getHeight(x.right)) + <span class="hljs-number">1</span>;<br>       <span class="hljs-keyword">return</span> x;<br>   &#125;<br></code></pre></td></tr></table></figure><blockquote><p>add函数的实现</p></blockquote><p>主要功能：实现元素的增加；代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(K key,V value)</span>&#123;<br>    root=add(root,key,value);<br>&#125;<br><br><span class="hljs-keyword">private</span> Node <span class="hljs-title function_">add</span><span class="hljs-params">(Node node,K key,V value)</span>&#123;<br>    <span class="hljs-comment">//最简单的情况 整棵树为null</span><br>    <span class="hljs-keyword">if</span>(node==<span class="hljs-literal">null</span>)&#123;<br>        size++;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(key,value);<br>    &#125;<br>    <span class="hljs-comment">//如果key小于根节点 遍历加入左子树</span><br>    <span class="hljs-keyword">if</span>(key.compareTo(node.key)&lt;<span class="hljs-number">0</span>)<br>        node.left=add(node.left,key,value);<br>    <span class="hljs-comment">//当key大于根节点在右子树上插入</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(key.compareTo(node.key) &gt; <span class="hljs-number">0</span>)<br>        node.right=add(node.right,key,value);<br>    <span class="hljs-comment">//反之当两者相同时 替换value值</span><br>    <span class="hljs-keyword">else</span><br>        node.value=value;<br>    <br>    <span class="hljs-comment">//以上完成插入数据后开始调节平衡度</span><br>    <span class="hljs-comment">//首先先更新下树的高度</span><br>    node.height=<span class="hljs-number">1</span>+Math.max(getHeight(node.left),getHeight(node.right));<br>    <span class="hljs-comment">//接着得到树的高度后开始计算平衡因子</span><br>    <span class="hljs-type">int</span> balanceFactor=getBalanceFactor(node);<br>    <span class="hljs-keyword">if</span>(Math.abs(balanceFactor)&gt;<span class="hljs-number">1</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;unbalanced:&quot;</span>+balanceFactor);<br>    &#125;<br>    <span class="hljs-comment">//得到平衡因数后开始维护平衡性</span><br>     <span class="hljs-comment">//LL  因为balanceFactor左子树高度-右子树高度</span><br>    <span class="hljs-comment">//后一个参数确定了该树就是左左类型的树直接调用右旋转</span><br>        <span class="hljs-keyword">if</span> (balanceFactor &gt; <span class="hljs-number">1</span> &amp;&amp; getBalanceFactor(node.left) &gt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">//右旋转</span><br>            <span class="hljs-keyword">return</span> rightRotate(node);<br>        &#125;<br>        <span class="hljs-comment">//RR  &amp;&amp;后的参数确保了该树是一个RR树</span><br>        <span class="hljs-keyword">if</span> (balanceFactor &lt; -<span class="hljs-number">1</span> &amp;&amp; getBalanceFactor(node.right) &lt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> leftRotate(node);<br>        &#125;<br>        <span class="hljs-comment">//LR</span><br>        <span class="hljs-keyword">if</span> (balanceFactor &gt; <span class="hljs-number">1</span> &amp;&amp; getBalanceFactor(node.left) &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">//先以左孩子为节点进行左旋转</span><br>            node.left = leftRotate(node.left);<br>            <span class="hljs-comment">//其次在以node为根节点进行右旋正好构建成功</span><br>            <span class="hljs-keyword">return</span> rightRotate(node);<br>        &#125;<br>        <span class="hljs-comment">//RL</span><br>        <span class="hljs-keyword">if</span> (balanceFactor &lt; -<span class="hljs-number">1</span> &amp;&amp; getBalanceFactor(node.right) &gt; <span class="hljs-number">0</span>) &#123;<br>            node.right = rightRotate(node.right);<br>            <span class="hljs-keyword">return</span> leftRotate(node);<br>        &#125;<br>        <span class="hljs-keyword">return</span> node;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> AVL_;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AVLTree</span>&lt;K <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Comparable</span>&lt;K&gt;, V&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>        <span class="hljs-keyword">public</span> K key;<br>        <span class="hljs-keyword">public</span> V value;<br>        <span class="hljs-keyword">public</span> Node left, right;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> height;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(K key, V value)</span> &#123;<br>            <span class="hljs-built_in">this</span>.key = key;<br>            <span class="hljs-built_in">this</span>.value = value;<br>            left = <span class="hljs-literal">null</span>;<br>            right = <span class="hljs-literal">null</span>;<br>            height = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Node root;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AVLTree</span><span class="hljs-params">()</span> &#123;<br>        root = <span class="hljs-literal">null</span>;<br>        size = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isBST</span><span class="hljs-params">()</span> &#123;<br>        ArrayList&lt;K&gt; keys = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        inOrder(root, keys);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; keys.size(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (keys.get(i - <span class="hljs-number">1</span>).compareTo(keys.get(i)) &gt; <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inOrder</span><span class="hljs-params">(Node node, ArrayList&lt;K&gt; keys)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        inOrder(node.left, keys);<br>        keys.add(node.key);<br>        inOrder(node.right, keys);<br>    &#125;<br><br>    <span class="hljs-comment">//判断是否是一颗二叉平衡树</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isBalanced</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> isBalanced(root);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isBalanced</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">balanceFactor</span> <span class="hljs-operator">=</span> getBalanceFactor(node);<br>        <span class="hljs-keyword">if</span> (Math.abs(balanceFactor) &gt; <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> isBalanced(node.left) &amp;&amp; isBalanced(node.right);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size == <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getHeight</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> node.height;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getBalanceFactor</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> getHeight(node.left) - getHeight(node.right);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(K key, V value)</span> &#123;<br>        root = add(root, key, value);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">add</span><span class="hljs-params">(Node node, K key, V value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            size++;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(key, value);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (key.compareTo(node.key) &lt; <span class="hljs-number">0</span>) &#123;<br>            node.left = add(node.left, key, value);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key.compareTo(node.key) &gt; <span class="hljs-number">0</span>) &#123;<br>            node.right = add(node.right, key, value);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            node.value = value;<br>        &#125;<br>        <span class="hljs-comment">//更新height</span><br>        node.height = <span class="hljs-number">1</span> + Math.max(getHeight(node.right), getHeight(node.left));<br>        <span class="hljs-comment">//计算平衡因子</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">balanceFactor</span> <span class="hljs-operator">=</span> getBalanceFactor(node);<br>        <span class="hljs-keyword">if</span> (Math.abs(balanceFactor) &gt; <span class="hljs-number">1</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;unbalanced:&quot;</span> + balanceFactor);<br>        &#125;<br>        <span class="hljs-comment">//维护平衡性</span><br>        <span class="hljs-comment">//LL</span><br>        <span class="hljs-keyword">if</span> (balanceFactor &gt; <span class="hljs-number">1</span> &amp;&amp; getBalanceFactor(node.left) &gt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">//右旋转</span><br>            <span class="hljs-keyword">return</span> rightRotate(node);<br>        &#125;<br>        <span class="hljs-comment">//RR</span><br>        <span class="hljs-keyword">if</span> (balanceFactor &lt; -<span class="hljs-number">1</span> &amp;&amp; getBalanceFactor(node.right) &lt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> leftRotate(node);<br>        &#125;<br>        <span class="hljs-comment">//LR</span><br>        <span class="hljs-keyword">if</span> (balanceFactor &gt; <span class="hljs-number">1</span> &amp;&amp; getBalanceFactor(node.left) &lt; <span class="hljs-number">0</span>) &#123;<br>            node.left = leftRotate(node.left);<br>            <span class="hljs-keyword">return</span> rightRotate(node);<br>        &#125;<br>        <span class="hljs-comment">//RL</span><br>        <span class="hljs-keyword">if</span> (balanceFactor &lt; -<span class="hljs-number">1</span> &amp;&amp; getBalanceFactor(node.right) &gt; <span class="hljs-number">0</span>) &#123;<br>            node.right = rightRotate(node.right);<br>            <span class="hljs-keyword">return</span> leftRotate(node);<br>        &#125;<br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br><br>    <span class="hljs-comment">//右旋转</span><br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">rightRotate</span><span class="hljs-params">(Node y)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> y.left;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> x.right;<br>        x.right = y;<br>        y.left = temp;<br>        <span class="hljs-comment">//更新height值</span><br>        y.height = Math.max(getHeight(y.left), getHeight(y.right)) + <span class="hljs-number">1</span>;<br>        x.height = Math.max(getHeight(x.left), getHeight(x.right)) + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br><br>    <span class="hljs-comment">//左旋转</span><br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">leftRotate</span><span class="hljs-params">(Node y)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> y.right;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> x.left;<br>        x.left = y;<br>        y.right = temp;<br>        <span class="hljs-comment">//更新height的 值</span><br>        y.height = Math.max(getHeight(y.left), getHeight(y.right)) + <span class="hljs-number">1</span>;<br>        x.height = Math.max(getHeight(x.left), getHeight(x.right)) + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">getNode</span><span class="hljs-params">(Node node, K key)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (key.compareTo(node.key) == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> node;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key.compareTo(node.key) &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> getNode(node.left, key);<br>        &#125; <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> getNode(node.right, key);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">remove</span><span class="hljs-params">(K key)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> getNode(root, key);<br>        <span class="hljs-keyword">if</span> (node != <span class="hljs-literal">null</span>) &#123;<br>            root = remove(root, key);<br>            <span class="hljs-keyword">return</span> node.value;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//删除掉以node为根的二分搜索树中键为key的节点，递归算法</span><br>    <span class="hljs-comment">//返回删除节点后新的二分搜索树的根</span><br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">remove</span><span class="hljs-params">(Node node, K key)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        Node retNode;<br>        <span class="hljs-keyword">if</span> (key.compareTo(node.key) &lt; <span class="hljs-number">0</span>) &#123;<br>            node.left = remove(node.left, key);<br>            retNode = node;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key.compareTo(node.key) &gt; <span class="hljs-number">0</span>) &#123;<br>            node.right = remove(node.right, key);<br>            retNode = node;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//待删除的左子树为空</span><br>            <span class="hljs-keyword">if</span> (node.left == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">Node</span> <span class="hljs-variable">rightNode</span> <span class="hljs-operator">=</span> node.right;<br>                node.right = <span class="hljs-literal">null</span>;<br>                size--;<br>                retNode = rightNode;<br>            &#125;<br>            <span class="hljs-comment">//待删除的右子树为空</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (node.right == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">Node</span> <span class="hljs-variable">leftNode</span> <span class="hljs-operator">=</span> node.left;<br>                node.left = <span class="hljs-literal">null</span>;<br>                size--;<br>                retNode = leftNode;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//待删除左右子树都不为空</span><br>                <span class="hljs-type">Node</span> <span class="hljs-variable">successor</span> <span class="hljs-operator">=</span> minimum(node.right);<br>                successor.right = remove(node.right, successor.key);<br>                successor.left = node.left;<br>                node.left = node.right = <span class="hljs-literal">null</span>;<br>                retNode = successor;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (retNode == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-comment">//看是否需要维护平衡</span><br>            <span class="hljs-comment">//计算平衡因子</span><br>            <span class="hljs-comment">//更新height</span><br>            retNode.height = <span class="hljs-number">1</span> + Math.max(getHeight(retNode.right), getHeight(retNode.left));<br>            <span class="hljs-comment">//计算平衡因子</span><br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">balanceFactor</span> <span class="hljs-operator">=</span> getBalanceFactor(retNode);<br>            <span class="hljs-keyword">if</span> (Math.abs(balanceFactor) &gt; <span class="hljs-number">1</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;unbalanced:&quot;</span> + balanceFactor);<br>            &#125;<br><br>            <span class="hljs-comment">//维护平衡性</span><br>            <span class="hljs-comment">//LL</span><br>            <span class="hljs-keyword">if</span> (balanceFactor &gt; <span class="hljs-number">1</span> &amp;&amp; getBalanceFactor(retNode.left) &gt;= <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">//右旋转</span><br>                <span class="hljs-keyword">return</span> rightRotate(retNode);<br>            &#125;<br>            <span class="hljs-comment">//RR</span><br>            <span class="hljs-keyword">if</span> (balanceFactor &lt; -<span class="hljs-number">1</span> &amp;&amp; getBalanceFactor(retNode.right) &lt;= <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> leftRotate(retNode);<br>            &#125;<br>            <span class="hljs-comment">//LR</span><br>            <span class="hljs-keyword">if</span> (balanceFactor &gt; <span class="hljs-number">1</span> &amp;&amp; getBalanceFactor(retNode.left) &lt; <span class="hljs-number">0</span>) &#123;<br>                retNode.left = leftRotate(retNode.left);<br>                <span class="hljs-keyword">return</span> rightRotate(retNode);<br>            &#125;<br>            <span class="hljs-comment">//RL</span><br>            <span class="hljs-keyword">if</span> (balanceFactor &lt; -<span class="hljs-number">1</span> &amp;&amp; getBalanceFactor(retNode.right) &gt; <span class="hljs-number">0</span>) &#123;<br>                retNode.right = rightRotate(retNode.right);<br>                <span class="hljs-keyword">return</span> leftRotate(retNode);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> retNode;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">minimum</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node.left == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> node;<br>        &#125;<br>        <span class="hljs-keyword">return</span> minimum(node.left);<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(K key)</span> &#123;<br>        <span class="hljs-keyword">return</span> getNode(root, key) != <span class="hljs-literal">null</span>;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">get</span><span class="hljs-params">(K key)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> getNode(root, key);<br>        <span class="hljs-keyword">return</span> node == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : node.value;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(K key, V newValue)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> getNode(root, key);<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(key + <span class="hljs-string">&quot;doesn&#x27;t exist!&quot;</span>);<br>        &#125;<br>        node.value = newValue;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="2-3树"><a href="#2-3树" class="headerlink" title="2-3树"></a>2-3树</h1><blockquote><p>引导</p></blockquote><p>学习红黑树之前我们先来了解2-3树。顾名思义一个节点位置有一个或者两个元素。2-3树的基本性质如下：</p><p>①满足二分搜索树的基本性质</p><p>②节点可以存放一个元素或者两个元素</p><p>③每个节点有两个孩子或者三个孩子</p><p>④两个孩子叫做2节点 三个孩子叫做三节点</p><p>⑤2-3树是一棵绝对平衡的树</p><p>⑥红黑树和2-3树等价&amp;&amp;<strong>所有的红色节点都是向左倾斜（自定义）</strong></p><p>下面我们给出一个2-3树的图像：</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/1231.png" alt=""></p><p>由于红黑树的添加删除操作较为复杂这里值写出2-3树的添加操作如下图（和红黑树完全相同）：</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/ggg.png" alt=""></p><p>每次加入元素后都能保持数的绝对平衡。</p><h2 id="红黑树的实现"><a href="#红黑树的实现" class="headerlink" title="红黑树的实现"></a>红黑树的实现</h2><h3 id="实现准备"><a href="#实现准备" class="headerlink" title="实现准备"></a>实现准备</h3><ol><li>首先定义红黑色常量值</li><li>初始值均为红色</li><li>构建一个判断是否为红色节点的函数</li><li>构建左旋转<code>leftRotate()</code>右旋转<code>rightRotate()</code>和颜色翻转函数<code>flipColors()</code>函数</li><li>跟据以上准备实现红黑树</li></ol><h3 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h3><blockquote><p>结论</p></blockquote><p><strong>1.每个节点要么是红色要么是黑色</strong><br><strong>2.根节点是黑色的</strong><br><strong>3.每一个叶子节点（最后的空节点）是黑色的</strong><br><strong>4.如果一个节点是红色的 那么他的孩子节点都是黑色的，黑色节点的右孩子一定是黑色的</strong><br><strong>5.从任意一个节点到叶子节点，经过的黑色节点是一样的</strong></p><p><strong>红黑树的性能分析：最大高度2*logn 时间复杂度O(logn)</strong></p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/lllkk.png" alt=""></p><hr><p>总体和AVL树一样不过多了一个颜色的判断；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">BLACK</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">RED</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><span class="hljs-comment">//在Node节点中加入一个color共有属性 布尔类型的值</span><br><span class="hljs-comment">//并在Node的构造函数中使颜色初始值为RED</span><br></code></pre></td></tr></table></figure><blockquote><p>完成实现准备的代码</p><p>颜色翻转代码：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//颜色翻转</span><br> <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">flipColors</span><span class="hljs-params">(Node node)</span> &#123;<br>     node.color = RED;<br>     node.left.color = BLACK;<br>     node.right.color = BLACK;<br> &#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>添加新的元素代码：</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">//像红黑树中添加新的元素<br> public void add(K key, V value) &#123;<br>     root = add(root, key, value);<br>     root.color = BLACK;<br> &#125;<br></code></pre></td></tr></table></figure><p><strong>判断是否为红色：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isRed</span><span class="hljs-params">(Node node)</span> &#123;<br>     <span class="hljs-comment">//主要规避null叶子节点  </span><br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) <br>          <span class="hljs-keyword">return</span> BLACK;<br>      <span class="hljs-keyword">return</span> node.color;<br>  &#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>如果红黑树的添加节点后该节点右子树为红色并且其左子树不为红色则需要进行左反转：</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Node <span class="hljs-title function_">leftRotate</span><span class="hljs-params">(Node node)</span> &#123;<br>    <span class="hljs-comment">//左旋转</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> node.right;<br>    node.right = x.left;<br>    x.left = node;<br>    <span class="hljs-comment">//当翻转完成后 需要对颜色进行调换</span><br>    x.color = node.color;<br>    node.color = RED;<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>如果红黑树的添加节点后该节点左子树为红色并且其左子树的左孩子为红色则需要进行右反转：</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Node <span class="hljs-title function_">rightRotate</span><span class="hljs-params">(Node node)</span> &#123;<br>    <span class="hljs-comment">//右旋转</span><br>      <span class="hljs-type">Node</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> node.left;<br>      node.left = x.right;<br>      x.right = node;<br>    <span class="hljs-comment">//颜色调换</span><br>      x.color = node.color;<br>      node.color = RED;<br>      <span class="hljs-keyword">return</span> x;<br>  &#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>当添加元素的左孩子和右孩子均为红色的时候需要进行颜色的翻转</strong>最终实现的add函数为</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//向以node为根的红黑树中插入新的元素</span><br><span class="hljs-keyword">private</span> Node <span class="hljs-title function_">add</span><span class="hljs-params">(Node node, K key, V value)</span> &#123;<br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>        size++;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(key, value);  <span class="hljs-comment">//默认插入一个红色的节点</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (key.compareTo(node.key) &lt; <span class="hljs-number">0</span>) &#123;<br>        node.left = add(node.left, key, value);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key.compareTo(node.key) &gt; <span class="hljs-number">0</span>) &#123;<br>        node.right = add(node.right, key, value);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        node.value = value;<br>    &#125;<br>    <span class="hljs-comment">//红黑树的维护过程</span><br>    <span class="hljs-keyword">if</span> (isRed(node.right) &amp;&amp; !isRed(node.left)) &#123;<br>        node = leftRotate(node);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (isRed(node.left) &amp;&amp; isRed(node.left.left))<br>        node = rightRotate(node);<br>    <span class="hljs-keyword">if</span> (isRed(node.left) &amp;&amp; isRed(node.right))<br>        flipColors(node);<br><br>    <span class="hljs-keyword">return</span> node;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="红黑树的总结"><a href="#红黑树的总结" class="headerlink" title="红黑树的总结"></a>红黑树的总结</h3><p>1.对于完全随机的数据，普通的二分搜索树很好用 缺点：极端情况下退化成链表（高度不平衡）</p><p>2.对于查询较多的情况下 AVL很好用</p><p>3.红黑树牺牲了平衡性（2logn的高度）</p><p>4.统计性能更优（常用于增删改查的所有操作）</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AVL和红黑树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并查集</title>
      <link href="/2022/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
      <url>/2022/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><h2 id="1-概论"><a href="#1-概论" class="headerlink" title="1.概论"></a>1.概论</h2><blockquote><p><strong>定义</strong></p></blockquote><p>并查集是一种树形的数据结构，用于处理一些不相交集合的合并以及查询的问题，他的本质是通过一个一维数组来维护一个森林，开始时森林中的每一个节点都是孤立的，各成一个树，进行若干次的合并操作，每次合并将两个树合并为一个更大的树。</p><p>​       <strong>主要解决问题：链接问题和路径问题</strong>。</p><p>​    <strong>并查集在一些有N个元素的集合应用问题中，我们通常是在开始时让每个元素构成一个单元素的集合，然后按一定顺序将属于同一组的元素所在的集合<code>合并</code>，其间要反复<code>查找</code>一个元素在哪个集合中。</strong></p><blockquote><p>操作</p></blockquote><ol><li>将两个集合合并</li><li>询问两个数是否在一个集合中</li></ol><blockquote><p>基本原理</p></blockquote><p>每个集合用一棵树来表示。树根的编号就是整个集合的编号，每个节点存储他的父节点，也就是孩子指向父亲。</p><h2 id="由简单到深入"><a href="#由简单到深入" class="headerlink" title="由简单到深入"></a>由简单到深入</h2><p>公共接口:    设计两个接口 主要对其下标进行比较 <code>isConnected</code> 判断是否联合，<code>unionElements</code> 联合两个节点。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">int getSize();<br>boolean isConnected(int p,int q);<br>void unionElements(int p,int q);<br></code></pre></td></tr></table></figure><p>id               0        1        2         3         4        5        6        7        8        9</p><p>parent      0        1        0         1          0        1        0        1        0        1</p><blockquote><p>①由上述格式可知道判断两个元素是否连接可以比较他们的下标值是否相同。完成<code>find()</code> 函数。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span>&#123;<br>    <span class="hljs-keyword">if</span>(p&lt;<span class="hljs-number">0</span>&amp;&amp;p&gt;=id.length)&#123;<br>         <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;p is out of bound!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> id[p];        <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>②接着实现<code>isConnected()</code> 函数 主要判断两个元素是否属于同一个其中p,q是编号</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isConnected</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> q)</span> &#123;<br>       <span class="hljs-keyword">return</span> find(p)==find(q);<br>   &#125;<br></code></pre></td></tr></table></figure><blockquote><p>③实现两个编号下元素的融合<code>unionElements()</code> </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">pubilc <span class="hljs-keyword">void</span> <span class="hljs-title function_">unionElements</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> q)</span>&#123;<br>    <span class="hljs-type">int</span> pID=find(p);<br>    <span class="hljs-type">int</span> qID=find(q);<br>    <span class="hljs-keyword">if</span>(pID==qID)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;id.length;i++)&#123;<br>        <span class="hljs-keyword">if</span>(id[i]==pID)<br>            id[i]=qID;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里我们那上个id 和parent 的例子当编号1和4融合后的结果为</p><p>id               0        1        2         3         4        5        6        7        8        9</p><p>parent      0        0        0         0          0        0        0        0        0        0</p><p>因为上面的一工可以分为两波，当把他们不同的两个连接起来相当于整个元素全部连接了起来</p><h3 id="首先定义一个公共的接口类-以下不同的提高均需要用到"><a href="#首先定义一个公共的接口类-以下不同的提高均需要用到" class="headerlink" title="首先定义一个公共的接口类 以下不同的提高均需要用到"></a>首先定义一个公共的接口类 以下不同的提高均需要用到</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UF</span> &#123;<br>    <span class="hljs-comment">//设计两个接口 主要对其下标进行比较</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span>;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isConnected</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> q)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">unionElements</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> q)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="程序源代码"><a href="#程序源代码" class="headerlink" title="程序源代码"></a>程序源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnionFind1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UF</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] id;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UnionFind1</span><span class="hljs-params">(<span class="hljs-type">int</span> size)</span> &#123;<br>        id = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[size];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; id.length; i++) &#123;<br>            id[i] = i;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span> &#123;<br>        <span class="hljs-keyword">if</span> (p &lt; <span class="hljs-number">0</span> &amp;&amp; p &gt;= id.length) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;p is out of bound!&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> id[p];<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id.length;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isConnected</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> q)</span> &#123;<br>        <span class="hljs-keyword">return</span> find(p) == find(q);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unionElements</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> q)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">pID</span> <span class="hljs-operator">=</span> find(p);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">qID</span> <span class="hljs-operator">=</span> find(q);<br>        <span class="hljs-keyword">if</span> (pID == qID) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; id.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (id[i] == pID)<br>                id[i] = qID;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Quick-Union"><a href="#Quick-Union" class="headerlink" title="Quick Union"></a>Quick Union</h2><p>  <strong>将每一个元素，看做是一个节点。</strong> 该过程适用于有序序列从0开始</p><p>id               0        1        2         3         4        5        6        7        8        9</p><p>parent      0        1        2         3         4        5        6        7        8        9</p><p><strong>对于以上来说根据下图可以看出联合过程每次联合元素都找到他的祖先 ,让祖先进行连接</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/QQ01233319.png" alt=""></p><p>图片解析：对于<code>union(4,3)</code> 这里规定将4连接到3；起初他们都是孤立的节点指向自己本身即 p=parent(p);连接4，3时首先找到4，3的根节点都为其本身，其次让4的根节点指向3即 4的祖先指向3 先存储4，3的祖先为pRoot，qRoot然后连接 parent[pRoot]=qRoot;然后就实现了连接 </p><blockquote><p>所以我们可以对<code>find()</code>函数进行修改每次需要找到他的祖先,初始化的时候让id==parent</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span>&#123;<br>     <span class="hljs-keyword">if</span>(p&lt;<span class="hljs-number">0</span>&amp;&amp;p&gt;=id.length)&#123;<br>         <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;p is out of bound!&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//此处开始寻找其祖先</span><br>    <span class="hljs-keyword">while</span>(p!=parent[p])&#123;<br>        p=parent[p];<br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>对其联合两组元素情况代码最终让patent指向根节点</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unionElements</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> q)</span> &#123;<br>    <span class="hljs-comment">//得到p的根节点   </span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">pRoot</span> <span class="hljs-operator">=</span> find(p);<br>    <span class="hljs-comment">//得到q的根节点</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">qRoot</span> <span class="hljs-operator">=</span> find(q);<br>     <span class="hljs-keyword">if</span> (pRoot == qRoot) &#123;<br>           <span class="hljs-keyword">return</span>;<br>       &#125;<br>    <span class="hljs-comment">//最终让pRoot指向qRoot实现了连接</span><br>       parent[pRoot] = qRoot;<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="程序源代码-1"><a href="#程序源代码-1" class="headerlink" title="程序源代码"></a>程序源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnionFind2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UF</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] parent;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UnionFind2</span><span class="hljs-params">(<span class="hljs-type">int</span> size)</span> &#123;<br>        parent = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[size];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>            parent[i] = i;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> parent.length;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span> &#123;<br>        <span class="hljs-keyword">if</span> (p &lt; <span class="hljs-number">0</span> &amp;&amp; p &gt;= parent.length)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;p is out of bound&quot;</span>);<br>        <span class="hljs-keyword">while</span> (p != parent[p]) &#123;<br>            p = parent[p];<br>        &#125;<br>        <span class="hljs-keyword">return</span> p;<br>    &#125;<br><br>    <span class="hljs-comment">//判断p和q是否在同一个集合</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isConnected</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> q)</span> &#123;<br>        <span class="hljs-keyword">return</span> find(p) == find(q);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unionElements</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> q)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">pRoot</span> <span class="hljs-operator">=</span> find(p);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">qRoot</span> <span class="hljs-operator">=</span> find(q);<br>        <span class="hljs-keyword">if</span> (pRoot == qRoot) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        parent[pRoot] = qRoot;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="基于size的优化"><a href="#基于size的优化" class="headerlink" title="基于size的优化"></a>基于size的优化</h2><p>​    在第二版本的并查集中<code>find()</code> 是一个不断索引的过程 不是顺次的访问，而是在不同的地址跳转所以访问较慢，其复杂度为O(h)，<code>isConnected()</code>复杂度高。</p><p>​     为了使形成的树不会因为不断连接而形成一条链表，所以我们让元素少的根节点指向元素多的根节点，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/asd123.png" alt=""></p><p>按照正常情况连接成一条链表增加了树的高度提升了时间复杂度使效率变慢。但是考虑到size()情况后可以让元素少的指向元素多的，这样就避免了单链表的形成。</p><blockquote><p>具体修改代码如下：</p></blockquote><p>①首先添加私有成员变量<code>private int []sz</code> 便是以i为根的集合中元素的个数</p><p>②修改构造函数中对于初始化的数组每个节点添加<code>sz[i]=1</code>;</p><p>③<code>find()</code>函数和第版一致</p><p>④<code>unionElements()</code>函数进行修改操作如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unionElements</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> q)</span>&#123;<br>    <span class="hljs-type">int</span> pRoot=find(p);<br>    <span class="hljs-type">int</span> qRoot=fin(q);<br>    <span class="hljs-keyword">if</span>(pRoot==qRoot)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">//以下判断size的大小进行不同的连接方式可以实现树的深度降低;</span><br>    <span class="hljs-keyword">if</span>(sz[pRoot]&lt;sz[qRoot])&#123;<br>        parent(pRoot)=qRoot;<br>        sz[qRoot]+=sz(pRoot);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        parent[qRoot]=pRoot;<br>        sz[pRoot]+=sz[qRoot];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="程序源代码-2"><a href="#程序源代码-2" class="headerlink" title="程序源代码"></a>程序源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">//基于size的优化</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnionFind3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UF</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] parent;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] sz;  <span class="hljs-comment">//sz[i]表示以i为根的集合中元素的个数</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UnionFind3</span><span class="hljs-params">(<span class="hljs-type">int</span> size)</span> &#123;<br>        parent = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[size];<br>        sz = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[size];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>            parent[i] = i;<br>            sz[i] = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> parent.length;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span> &#123;<br>        <span class="hljs-keyword">if</span> (p &lt; <span class="hljs-number">0</span> &amp;&amp; p &gt;= parent.length)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;p is out of bound&quot;</span>);<br>        <span class="hljs-keyword">while</span> (p != parent[p]) &#123;<br>            p = parent[p];<br>        &#125;<br>        <span class="hljs-keyword">return</span> p;<br>    &#125;<br><br>    <span class="hljs-comment">//判断p和q是否在同一个集合</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isConnected</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> q)</span> &#123;<br>        <span class="hljs-keyword">return</span> find(p) == find(q);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unionElements</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> q)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">pRoot</span> <span class="hljs-operator">=</span> find(p);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">qRoot</span> <span class="hljs-operator">=</span> find(q);<br>        <span class="hljs-keyword">if</span> (pRoot == qRoot) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (sz[pRoot] &lt; sz[qRoot]) &#123;<br>            parent[pRoot] = qRoot;<br>            sz[qRoot] += sz[pRoot];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            parent[qRoot] = pRoot;<br>            sz[pRoot] += sz[qRoot];<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="基于rank的优化"><a href="#基于rank的优化" class="headerlink" title="基于rank的优化"></a>基于rank的优化</h2><p>目的：为了使每次两个不同的集合连接后数的高度尽量不增加此处我们进行rank优化代码与基于size优化代码类似 只不过将<code>private int []sz</code> 改为<code>private int []rank</code> 并且在构造函数中赋予初始高度为1；</p><p>下面主要修改<code>unionElements()</code>函数</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/zzzz11.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unionElements</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> q)</span>&#123;<br>    <span class="hljs-type">int</span> pRoot=find(p);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">qRoot</span> <span class="hljs-operator">=</span> find(q);<br>    <span class="hljs-keyword">if</span> (pRoot == qRoot) &#123;<br>       <span class="hljs-keyword">return</span>;<br>     &#125;<br>    <span class="hljs-comment">//根据两个元素所在树的rank不同判断合并的方向</span><br>    <span class="hljs-comment">//将rank低的集合合并到rank高的集合上,代码实现逻辑如下</span><br>    <span class="hljs-keyword">if</span>(rank[pRoot]&lt;rank[qRoot])&#123;<br>        parent[pRoot]=qRoot;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(rank[qRoot]&lt;rank[pRoot])&#123;<br>        parent[qRoot]=pRoot;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">//当两个的rank相同时则合并后整体高度+1</span><br>        parent[qRoot]=pRoot;<br>        rank[pRoot]+=<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="基于rank的优化和路径压缩"><a href="#基于rank的优化和路径压缩" class="headerlink" title="基于rank的优化和路径压缩"></a>基于rank的优化和路径压缩</h2><p>目的：解决单链表的问题，这个解决方法发生在find过程中，在find过程中实现路径压缩在向上遍历的时候执行<code>parent[p]=parent[parent[p]]</code>  整体代码和基于rank的代码相同 原理图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/yyyy11.png" alt=""></p><p>图片解析：首先当<code>find(4)</code>的时候让其parent指向父亲的父亲也就是2。其次构成树Ⅱ然后走向节点2让其parent指向父亲的父亲构成树Ⅲ，当p!=parent[p]时终止条件此时的优化已经完成。</p><p><code>find()</code>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span> &#123;<br>        <span class="hljs-keyword">if</span> (p &lt; <span class="hljs-number">0</span> &amp;&amp; p &gt;= parent.length)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;p is out of bound&quot;</span>);<br>        <span class="hljs-keyword">while</span> (p != parent[p]) &#123;<br>            parent[p] = parent[parent[p]];<br>            p = parent[p];<br>        &#125;<br>        <span class="hljs-keyword">return</span> p;<br>    &#125;<br><br><span class="hljs-comment">//也可以递归的实现find的路径压缩</span><br>   <span class="hljs-comment">//find的递归实现</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span> &#123;<br>        <span class="hljs-keyword">if</span> (p &lt; <span class="hljs-number">0</span> &amp;&amp; p &gt;= parent.length)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;p is out of bound&quot;</span>);<br>        <span class="hljs-keyword">if</span> (p != parent[p]) &#123;<br>            <span class="hljs-comment">//路径压缩</span><br>            parent[p] = find(parent[p]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> parent[p];<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="程序源代码-3"><a href="#程序源代码-3" class="headerlink" title="程序源代码"></a>程序源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnionFind6</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UF</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] parent;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] rank;  <span class="hljs-comment">//sz[i]表示以i为根的集合中元素的个数</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UnionFind6</span><span class="hljs-params">(<span class="hljs-type">int</span> size)</span> &#123;<br>        parent = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[size];<br>        rank = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[size];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>            parent[i] = i;<br>            rank[i] = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> parent.length;<br>    &#125;<br><br>    <span class="hljs-comment">//find的递归实现</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span> &#123;<br>        <span class="hljs-keyword">if</span> (p &lt; <span class="hljs-number">0</span> &amp;&amp; p &gt;= parent.length)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;p is out of bound&quot;</span>);<br>        <span class="hljs-keyword">if</span> (p != parent[p]) &#123;<br>            <span class="hljs-comment">//路径压缩</span><br>            parent[p] = find(parent[p]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> parent[p];<br>    &#125;<br>    <span class="hljs-comment">//判断p和q是否在同一个集合</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isConnected</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> q)</span> &#123;<br>        <span class="hljs-keyword">return</span> find(p) == find(q);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unionElements</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> q)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">pRoot</span> <span class="hljs-operator">=</span> find(p);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">qRoot</span> <span class="hljs-operator">=</span> find(q);<br>        <span class="hljs-keyword">if</span> (pRoot == qRoot) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//根据两个元素所在树的rank不同判断合并的方向</span><br>        <span class="hljs-comment">//将rank低的集合合并到rank高的集合上</span><br>        <span class="hljs-keyword">if</span> (rank[pRoot] &lt; rank[qRoot]) &#123;<br>            parent[pRoot] = qRoot;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rank[qRoot] &lt; rank[pRoot]) &#123;<br>            parent[qRoot] = pRoot;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            parent[qRoot] = pRoot;<br>            rank[pRoot] += <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理</title>
      <link href="/2022/08/31/%E5%A4%A7%E4%B8%89%E4%B8%8A%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/"/>
      <url>/2022/08/31/%E5%A4%A7%E4%B8%89%E4%B8%8A%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机系统概述"><a href="#计算机系统概述" class="headerlink" title="计算机系统概述"></a>计算机系统概述</h1><p>（一）计算机的发展历程</p><p>（二）计算机的系统层次结构</p><ol><li>计算机系统的基本组成</li><li>计算机硬件的基本组成</li><li>计算机软件和硬件的关系</li><li>计算机的工作过程</li></ol><p>（三）计算机的性能指标</p><p>吞吐量、响应时间、CPU时钟周期、主频、CPI、CPU执行时间、MIPS、MFLOPS、GFLOPS、TFLOPS、PFLOPS</p><h2 id="核心考点"><a href="#核心考点" class="headerlink" title="核心考点"></a>核心考点</h2><p>1.冯·诺依曼计算机的基本特点与指令执行过程</p><p>2.计算机的各种性能指标</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/adadad.png" alt=""></p><h2 id="1-1计算机的分类"><a href="#1-1计算机的分类" class="headerlink" title="1.1计算机的分类"></a>1.1计算机的分类</h2><blockquote><p>电子模拟计算机</p></blockquote><p>  模拟计算机根据相似原理，用一种连续变化的 <strong>模拟量</strong> 作为被运算对象。模拟计算机以<strong>电子线路</strong>构成基本部件，主要由运算部件、控制部件、输入输出设备等组成，核心部件是<strong>运算放大器</strong>。</p><blockquote><p>电子数字计算机</p></blockquote><p>​    数字计算机根据<strong>算盘原理</strong>发展而来，用离散数字表示数量的大小。数字计算机的主要特点是<strong>按位运算</strong>，并且通过<strong>程序控制</strong>方式不连续地跳动计算。</p><p><strong>ENIAC 宣告人类进入电子计算机时代。</strong> 他是世界上第一台实际运行的存储程序式电子计算机。</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/aa143712.png" alt=""></p><blockquote><p>数字计算机的分类</p></blockquote><p>根据计算机的效率、速度价格和运行经济性适应性分为两类：专用计算机和通用计算机</p><blockquote><p>通用计算机的分类</p></blockquote><p>超级计算机、大型机、服务器、PC机、单片机</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/uyuu144108.png" alt=""></p><h2 id="1-2-计算机发展简史"><a href="#1-2-计算机发展简史" class="headerlink" title="1.2 计算机发展简史"></a>1.2 计算机发展简史</h2><blockquote><p>计算机的性能指标</p></blockquote><p><strong>吞吐量</strong>：表征一台计算机在某一时间间隔内能够处理的信息量，单位是字节/秒（B/S）</p><p><strong>响应时间</strong>：表征从输入有效到系统产生响应之间的时间度量，用时间单位来度量 微妙（10^-6^S）、纳秒(10^-9^S)</p><p><strong>利用率</strong>：表示在给定的时间间隔内，系统被实际使用的时间所占的比率，一般用百分比表示。</p><p><strong>处理机字长</strong>：指处理机运算器中一次能够完成二进制数运算的位数。当前处理机的字长有8位、16位、32位、64位。</p><p><strong>字长越长，表示计算的精度越高。计算机的性能指标</strong></p><p><strong>总线宽度</strong>：CPU运算器与存储器之间进行互连的内部总线二进制位数。</p><p><strong>存储器容量</strong>：存储器中所有存储单元的总数目，通常用KB、MB、GB、TB来表示。其K=210，M=220，G=230，T=240，B=8位（1个字节  ）。存储器容量越大，记忆的二进制数越多。</p><p><strong>存储器带宽</strong>：存储器的速度指标，单位时间内从存储器读出的二进制数信息量，一般用字节数/秒表示。</p><p><strong>主频/时钟周期</strong>：CPU的工作节拍受主时钟控制，主时钟不断产生固定频率的时钟，主时钟的频率（f）叫CPU的主频。度量单位是MHz（兆赫兹）、GHz（吉赫兹）</p><p>主频的倒数称为CPU的时钟周期（T）即T=1/f，度量单位是微秒、纳秒。</p><p>CPU的执行时间：表示CPU执行一段程序所占用的CPU时间，用下列式子计算：</p><p>​     <strong>CPU执行时间 =CPU时钟周期数×CPU时钟周期长</strong></p><p>CPI表示每条指令占据的周期数，即执行一条指令所需的平均时钟周期数。用下式计算：</p><script type="math/tex; mode=display">CPI=\frac{执行某段程序所需的CPU时钟周期数}{该程序包含的指令条数}</script><p>MIPS  表示每条百万条指令数目，用下式计算：</p><script type="math/tex; mode=display">MIPS=\frac{指令条数}{程序执行时间×10^6}=\frac{时钟频率}{CPI×10^6}</script><p>程序执行时间Te为：</p><script type="math/tex; mode=display">程序执行时间为Te=\frac{指令条数}{MIP×10^6}</script><p>MFLOPS 表示每秒百万次浮点操作次数，用下式计算：</p><script type="math/tex; mode=display">MFLOPS=\frac{程序中的浮点数}{程序执行时间×10^6}</script><p>MIPS是单位时间内执行的百万条顶点指令数，MIPS值越高说明极其速度越快</p><p>MFLOPS是基于操作而非指令的，只能用来衡量机器浮点操作的性能，而不能体现机器的整体性能。</p><p>TFLOPS表示每秒万亿次浮点操作次数，该技术指标一般在超级计算机中使用。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>【例1.1】对于一个给定的程序，<strong><script type="math/tex">I_N</script></strong>表示执行程序中的指令总数，<strong><script type="math/tex">t_{CPU}</script></strong>表示执行该程序所需的<strong>CPU</strong>时间，<strong>T</strong>为时钟周期，<strong>f</strong>为时钟频率（T的倒数），<strong><script type="math/tex">N_C</script></strong>为<strong>CPU</strong>时钟周期数。设<strong>CPI</strong>表示每条指令的平均时钟周期数，<strong>MIPS</strong>表示每秒钟执行的百万条指令，请写出如下四种参数的表达式：</p><script type="math/tex; mode=display">(1) t_{CPU}     (2)CPI      (3)MIPS     (4)N_C</script><blockquote><p>解：有题可知</p></blockquote><script type="math/tex; mode=display">(1)t_{CPU}=N_{C}×T=N_C÷f=I_N×CPI×T=\sum_{i=1}^{n}(CPI~i~×\frac{I_i}{I_N})</script><script type="math/tex; mode=display">(2) CPI=\frac{N_C}{I_N}=\sum_{i=1}^{n}(CPI_i×\frac{I_i}{I_N}) --- CPI_i表示i种指令所需平均时钟周期数</script><script type="math/tex; mode=display">(3)MIPS=\frac{I_N}{t_{CPU}}×10^{-6}=\frac{f}{CPI×10^6}----n为指令种类</script><script type="math/tex; mode=display">\frac{1}{MIPS}×10^{-6}=\frac{t_{CPU}}{I_N}=\frac{CPI}{f}=CPI×T-----表示每条指令的平均执行时间</script><script type="math/tex; mode=display">（4）N_C=\sum_{i=1}^{n}(CPI_i×I_i) -----I_i表示i种指令在程序中执行的次数</script><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/屏幕截图 2022-08-31 161257.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/20220831161503.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/20220831161746.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/20220831161954.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/20220831162025.png" alt=""></p><blockquote><p>CPU的时钟频率越高，机器的速度就越快，对吗?</p></blockquote><p>​     在其他因素不变的情况下，CPU的时钟频率越高，机器的速度肯定越快。但是，  程序执行的速度除了与CPU的速度有关外，还与存储器和IO模块的存取速度、总线的传输速度、Cache的设计策略等有很大关系。因此，机器的速度不是只由CPU的时钟频率决定的.</p><blockquote><p>执行时间(响应时间)与CPI是什么关系?</p></blockquote><p>​    通常，一条特定指令的CPI是一个确定的值，而某个程序的CPI是一个平均值。一个程序的执行时间取决于该程序所包含的指令数、CPI和时钟周期。在指令数和时钟周期一定的情况下，CPI越大，执行时间越长.</p><h2 id="数字计算机基本组成"><a href="#数字计算机基本组成" class="headerlink" title="数字计算机基本组成"></a>数字计算机基本组成</h2><p>控制器：人的大脑的操作控制功能</p><p>运算器：人的大脑的计算功能</p><p>存储器：人的大脑的记忆功能</p><p>输入设备：交互接口，笔</p><p>输出设备：交互接口，纸</p><blockquote><p>冯诺依曼计算机</p></blockquote><p>​    （1）计算机由运算器、存储器、控制器、输入设备和输出设备五大部件组成。</p><p>​    （2）指令和数据以同等的地位保存于存储器内，并可按照地址访问存储器。</p><p>​    （3）指令和数据均用二进制代码表示。</p><p>​    （4）指令由 操作码和地址码组成，操作码用来表示操作的性质（是加法还是减法，或者其他操作），地址码用来表示操作数在存储器中的位置。</p><p>​    （5）指令在存储器内按顺序存放。通常指令是按顺序执行的，在特定条件下，可根据运算结果或设定的条件改变执行顺序</p><p>​    （6）机器以运算器为中心，  输入/输出设备与存储器之间的数据传送通过运算器完成</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/20220831163834.png" alt=""></p><blockquote><p>（1）存储器</p></blockquote><p>​    存储器分为主存储器（简称主存，  也称内存储器）和辅助存储器（简称辅存，也称外存储器)。CPU能够<strong>直接访问</strong>的存储器是主存储器。<strong>主存储器</strong>是存放程序和数据的部件。</p><p>​    <strong>辅助存储器</strong>用于帮助主存储器记忆更多的信息，辅助存储器中的信息必须调入主存后，才能被CPU访问</p><blockquote><p>（2）控制器</p></blockquote><p>​    指令和程序：指令的形式（操作和地址码、存储程序的概念、指令中程序和数据的存放、指令系统。</p><p>​           操作码———————-地址码</p><p>​    <strong>操作码</strong>指出指令所进行的操作，如加、减、乘、除、取数、  存数等。</p><p>​    <strong>地址码</strong>表示参加运算的数据应从存储器的哪个单元中取来，或运算的结果应该存到哪个单元中去。</p><p>​    <strong>指令</strong>的操作码和地址码用二进制代码来表示。</p><blockquote><p>指令和数据存储</p></blockquote><p>​    存储器既可存放数据也可存放指令，将程序(指令序列)存放到存储器中称为存储程序，而控制器  依据存储的程序来控制-协调完成计算任务叫做程序控制。</p><p><strong>控制器的任务</strong>： 按照顺序一条一条的执行指令（取指令，指令译码、执行指令）。取址周期和执行周期。也可以区分开那些是指令字，那些是数据字。取指周期中从内存读出的信息流是指令流，它流向控制器；而在执行器周期中从内存读出的信息流是数据流，它由内存流向运算器。</p><h1 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h1><blockquote><p>1.比较电子数字计算机和电子模拟计算机的特点。</p></blockquote><p>电子数字计算机：数据表式为数字0和1 ，计算方式为 数字计数 控制方式为：程序控制 精度高，数据存储量大，逻辑判断能力强。</p><p>电子模拟计算机：数据表示方式为电压，计算方式为电压组合和测量值，控制方式为：盘上连线，精度低、数据存储量小、无逻辑判断能力。</p><blockquote><p>2.冯诺依曼计算机的主要设计思想是什么？它包括那些主要组成部分？</p></blockquote><p>主要设计思想：</p><p>①采用二级制表示数据和指令，指令由操作码和地址码组成。</p><p>②存储程序，程序控制：将程序和数据存放在存储器中，并可按照地址访问存储器完成计算。</p><p>③指令在存储器内按顺序存放。通常指令是按顺序执行的，在特定条件下，可根据运算结果或设定的条件改变执行顺序</p><p>④机器以运算器为中心，  输入/输出设备与存储器之间的数据传送通过运算器完成</p><p>主要组成部分：存储器、运算器、控制器、输入设备、输出设备</p><blockquote><p>3.什么是存储容量？什么是单元地址？什么是数据字？什么是指令字？</p></blockquote><p><strong>存储容量</strong>：存储器所有存储单元的总数称为存储器的存储容量，通常用单位KB、MB来表示存储容量越大，表示计算机记忆存储的信息越多</p><p><strong>单元地址</strong>：： 单元地址简称地址， 在存储器中每个存储单元都有唯一的地址编号， 称为单元地<br>址。</p><p><strong>数据字</strong>：某字代表要处理的数据</p><p><strong>指令字</strong>：某字为一条指令</p><blockquote><p>6.什么是指令？什么是程序？</p></blockquote><p>每一个基本操作就叫做条指令，而解算某一问题的一串指令序列叫做该问题的计算程序简称为程序</p><blockquote><p>7.指令和数据均存放在内存中，计算机如何区分他们是指令还是数据？</p></blockquote><p>在取指周期中从存储器读出的信息即指令信息， 而在执行周期中从存储器中读出的信息即为数据信息</p><blockquote><p>8.什么是内存？什么是外存？什么是CPU？什么是适配器？简述其功能。</p></blockquote><p> 一般由半导体存储器构成， 装在底版上， 可直接和 CPU 交换信息的存储器称为内存储器， 简称内存。</p><p>外存： 为了扩大存储容量， 又不使成本有很大的提高， 在计算机中还配备了存储容量更大的<br>磁盘存储器和光盘存储器， 称为外存储器， 简称外存。 外存可存储大量的信息， 计算机需要使用时， 再调入内存。</p><p>CPU： 包括运算器和控制器。 基本功能为： 指令控制、 操作控制、时间控制、 数据加工。</p><p>适配器： 连接主机和外设的部件， 起一个转换器的作用， 以使主机和外设协调工作。</p><blockquote><p>10.说明软件的发展的演变过程</p></blockquote><p> 汇编语言的发展  手编程序—&gt;汇编语言程序——&gt;高级程序</p><p>系统软件的发展：操作系统———-&gt;数据库管理系统</p><blockquote><p>12.为什么软件能够转换为硬件，硬件能够转换为软件？实现这种转换的媒介是什么？</p></blockquote><p>​    随着大规模集成电路技术的发展和软件硬化的趋势,要明确划分计算机系统软、硬件界限已经显得比较困难了,因为任何操作可以由软件来实现,也可以由软件来完成,对于某一机器功能采用硬件方案还是软件方案,取决于价格、速度、可靠性、存储容量、变更周期等因素。</p><blockquote><p>13.CPU的性能指标有哪些？其概念是什么？</p></blockquote><p>cpu的性能指标有主频、外频、倍频系数和制程技术</p><p>主频：CPU的时钟频率，一个时钟周期完成的指令数是固定的，主频越高，CPU的速度也就越快</p><p>外频：外频是CPU的基准频率，CPU的外频决定着整块主板的运行速度。</p><p>倍频系数：倍频系数是指CPU主频与外频之间的相对比例关系。在相同的外频下，倍频越高CPU的频率也越高。</p><p>制程技术：制程越小发热量越小，这样就可以集成更多的晶体管，CPU效率也就更高</p><blockquote><p>计算题1</p></blockquote><p>设有主频24MHz 的CPU，平均每条指令的执行时间为2个机器周期，每个机器周期由2个时钟周期组成试求:</p><p>1）机器的工作速度。</p><p>2）假如每个指令周期中有一个是访存周期，需插入2个时钟周期的等待时间，求机器的工作速度。</p><blockquote><p>计算题二</p></blockquote><p>用一个时钟频率为40MHz的处理器执行标准测试程序，它所包含的混合指令数和响应所需的时钟周期见表1-10。试求出有效的CPI、MIPS速率和程序的执行时间（假设有N条指令)。</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/20220831190857.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树学习</title>
      <link href="/2022/08/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
      <url>/2022/08/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h1><p>​     用途：线段树主要用来搜寻一个区间里的最大或者最小值亦或者一个区间内的数据之和，线段树是一种<a href="https://baike.baidu.com/item/二叉搜索树/7077855?fromModule=lemma_inlink">二叉搜索树</a>，与<a href="https://baike.baidu.com/item/区间树/5772433?fromModule=lemma_inlink">区间树</a>相似，它将一个区间划分成一些单元区间，每个单元区间对应线段树中的一个叶结点，使用线段树可以快速的查找某一个节点在若干条线段中出现的次数，时间复杂度为O(logN)。而未优化的空间复杂度未2N，实际应用时一般还要开4N的数组已免越界，因此有时候需要离散化让空间压缩。</p><h2 id="1-线段树的原理"><a href="#1-线段树的原理" class="headerlink" title="1.线段树的原理"></a>1.线段树的原理</h2><ol><li><code>E[]tree</code>  线段树   <code>E[] data</code>线段树的私有数组 存储传进来的数组  <code>Merger&lt;E&gt; merger</code> 一个函数接口 用于对线段树找到的一个区间内的值进行比较。</li><li><code>public SegmentTree(E[]arr,Merger&lt;E&gt;merger)</code> 对传入的数组进行初始化到<code>data</code>数组中,对接口也进行初始化 然后在调用<code>buildSegmentTree()</code> 函数。</li><li><code>buildSegmentTree(int treeIndex,int l,int r)</code>该函数是建造线段树</li><li><code>E get(int index)</code> 得到下标为index的值</li><li><code>getSize()</code> 得到传入数组的大小</li><li><code>leftChild(index) rightChild</code> 得到下标为index的左右孩子的下标</li><li><code>query(int queryL,int queryR)</code> 公共接口调用重构函数<code>query(treeIndex,l,R,quaryL,quaryR)</code> 函数</li><li><code>query(int treeIndex, int l, int r, int queryL, int queryR)</code> 该函数实现查找一个区间内元素并进行Merger操作；</li><li><code>set(int index,E e)</code> 该函数寻找下标为index的值并对其进行修改操作递归调用其私有函数<code>set(int treeIndex, int l, int r, int index, E e)</code> </li><li><code>set(int treeIndex, int l, int r, int index, E e)</code> 当修改元素成功后 对一个区间内的元素进行Merger操作实现动态操作</li></ol><ul><li><p>线段树的原理：线段树除了最后一层之外，是一颗满<a href="https://so.csdn.net/so/search?q=二叉树&amp;spm=1001.2101.3001.7020">二叉树</a>，假设区间中存在n个数据，则倒数第二层节点数大于为n，从第一层到倒数第三层的节点数大约为n-1，最后一层节点数很少，但是为了使用数组存储整棵树，最后一层大约需要开2n的空间，因此一共需要开辟4n的空间存储线段树。</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/195253.png" alt=""></p></li></ul><p><strong>为了使该线段树方便构造A[0]下面应该也有两个null的左右子树同理A[1]~A[7]都有</strong></p><p><u>在这里我们让左子树的数目少于右子树 即当区间分割时向下取整</u> </p><p>理论原理：假如我们搜寻区间下标[2-5]则从根节点出发 因为 mid :7/2=3(向下取整) 2<3 &&5>3 所以该区间在根节点的左右子树上  然后我们来到左子树 以左子树[0,3]作为根节点 mid: 3/2=1 因为2&gt;1故改区间为[2,3]  同理 可以求出右子树上的区间范围为[4,5];最后将两个区间进行合并求merger操作；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//(1)SegmentTree 构造函数</span><br> <span class="hljs-keyword">public</span> <span class="hljs-title function_">SegmentTree</span><span class="hljs-params">(E[] arr, Merger&lt;E&gt; merger)</span> &#123;<br>          <span class="hljs-comment">//对改merger操作进行初始化</span><br>        <span class="hljs-built_in">this</span>.merger = merger;     <br>        <span class="hljs-comment">//!!将data类型 格式转化为Objiect 并赋予与arr.length 一样的空间</span><br>        data = (E[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[arr.length];  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            data[i] = arr[i];  <span class="hljs-comment">//arr将数组中的值进行拷贝到data</span><br>        &#125;<br>     <span class="hljs-comment">//首先对线段树的内存空间进行初始化 并对其进行类型的转换然后才能接收到data[]内的值</span><br>        tree = (E[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">4</span> * arr.length]; <br>        <span class="hljs-comment">//建造线段树 (节点0，最小下标，和最大下标)</span><br>       <span class="hljs-comment">//调用建造线段树的函数</span><br>        buildSegmentTree(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, data.length - <span class="hljs-number">1</span>); <br>    &#125;<br>   <span class="hljs-comment">//当一切都进行初始化完毕然后就调用私有函数buildSegmentTree</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildSegmentTree</span><span class="hljs-params">(<span class="hljs-type">int</span> treeIndex, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> &#123;<br>        <span class="hljs-comment">// 该函数是个递归函数 先考虑结束情况当r==l是程序结束 也就是只剩下一个叶子节点 </span><br>        <span class="hljs-keyword">if</span> (r == l) &#123;<br>            tree[treeIndex] = data[r];  <span class="hljs-comment">//将叶子节点挂在tree树上</span><br>            <span class="hljs-keyword">return</span>;      <br>        &#125;<br>      <span class="hljs-comment">//线段树的建造流程 </span><br>       <span class="hljs-comment">//首先进行中间下标的求解 这样写是为了防止越界</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> l + (r - l) / <span class="hljs-number">2</span>;    <br>      <span class="hljs-comment">//得到左右孩子的下标用于作为根节点进行递归调用 </span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">leftTreeIndex</span> <span class="hljs-operator">=</span> leftChild(treeIndex);  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">rightTreeIndex</span> <span class="hljs-operator">=</span> rightChild(treeIndex); <br>    <span class="hljs-comment">//开始递归的调用该函数首先以左孩子下标为跟节点建造 区间（L,mid）同理右孩子为(mid+1,r)</span><br>        buildSegmentTree(leftTreeIndex, l, mid);<br>        buildSegmentTree(rightTreeIndex, mid + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-comment">//当调用到底层的时候也就是 叶子节点 他们存的值为 自己左右孩子进行外部接口的merger操作后存入该节点 同理递归的往上调用</span><br>        tree[treeIndex] = merger.merge(tree[leftTreeIndex], tree[rightTreeIndex]);<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>当线段树构造完成以后完成一些以上函数所调用的函数</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> E <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;   <br>       <span class="hljs-comment">//获取下标为index的值 需要判断数组是否越界了</span><br>       <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt;= data.length)<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Index is illegal&quot;</span>);<br>         <span class="hljs-comment">//然后在data数组中直接返回</span><br>       <span class="hljs-keyword">return</span> data[index];  <br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">return</span> data.length;<br>   &#125;<br>   <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">leftChild</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>       <span class="hljs-comment">//根据二叉树的性质可以得出左孩子下标和有孩子下标</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * index + <span class="hljs-number">1</span>;  <br>   &#125;<br>   <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">rightChild</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * index + <span class="hljs-number">2</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>当以上两步都完成的时候，可以进行查询区间的操作</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//该函数因为需要递归调用 所以要传入根节点 左右下标和 查询的左右区间下标  </span><br><span class="hljs-keyword">private</span> E <span class="hljs-title function_">query</span><span class="hljs-params">(<span class="hljs-type">int</span> treeIndex, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> queryL, <span class="hljs-type">int</span> queryR)</span> &#123;<br>    <span class="hljs-comment">//首先对递归到第的情况进行判断 就是当l和r与查询的queryL,queryR的下标相同时直接返回根节点的值   </span><br>    <span class="hljs-keyword">if</span> (l == queryL &amp;&amp; r == queryR) &#123;  <br>            <span class="hljs-keyword">return</span> tree[treeIndex];<br>        &#125;<br>    <span class="hljs-comment">//正常流程先 求取中间值的下标</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> l + (r - l) / <span class="hljs-number">2</span>;<br>    <span class="hljs-comment">//得到左右孩子的下标</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">leftTreeIndex</span> <span class="hljs-operator">=</span> leftChild(treeIndex);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rightTreeIndex</span> <span class="hljs-operator">=</span> rightChild(treeIndex);<br>    <span class="hljs-comment">//判断该区间是否在 线段树的右子树如果是的化就以右孩子为根节点搜寻[mid+1,r]内的值</span><br>        <span class="hljs-keyword">if</span> (queryL &gt;= mid + <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> query(rightTreeIndex, mid + <span class="hljs-number">1</span>, r, queryL, queryR);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (queryR &lt;= mid) &#123; <br>            <span class="hljs-comment">//判断是否在左子树上 如果是则递归调用query直至找到</span><br>            <span class="hljs-keyword">return</span> query(leftTreeIndex, l, mid, queryL, queryR);<br>        &#125;<br>    <span class="hljs-comment">//当即不再左子树又不在右子树上的时候就是mid在【queryL,queryR】的中间</span><br>    <span class="hljs-comment">//则需要顶一个E 类型的变量分别接收最后返回的【l,mid】和[mid+1,r]的值</span><br>    <span class="hljs-comment">//然后对两个区间的结果进行merger操作并返回</span><br>        <span class="hljs-type">E</span> <span class="hljs-variable">leftResult</span> <span class="hljs-operator">=</span> query(leftTreeIndex, l, mid, queryL, mid);<br>        <span class="hljs-type">E</span> <span class="hljs-variable">rightResult</span> <span class="hljs-operator">=</span> query(rightTreeIndex, mid + <span class="hljs-number">1</span>, r, mid + <span class="hljs-number">1</span>, queryR);<br>        <span class="hljs-keyword">return</span> merger.merge(leftResult, rightResult);<br>    &#125;<br><br></code></pre></td></tr></table></figure><h2 id="2-线段树的动态查询"><a href="#2-线段树的动态查询" class="headerlink" title="2.线段树的动态查询"></a>2.线段树的动态查询</h2><blockquote><p>拓展</p></blockquote><p>以上是对于一个固定区间固定数值的操作然而现实中也需要，当修改一个数据后能够更新整个线段树然后在查找一个区间进行相关的操作具体函数如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//首先将位于index下标的值进行修改</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(<span class="hljs-type">int</span> index, E e)</span> &#123;<br>    <span class="hljs-comment">//每次进行下标搜查需要考虑是否越界和下标是否合法</span><br>        <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt;= data.length)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Index is illegal&quot;</span>);<br>        data[index] = e;     <span class="hljs-comment">//修改</span><br>        <span class="hljs-comment">//调用set的重构函数对区间【0,data.lengt-1】内的一个下标进行修改为e</span><br>      set(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, data.length - <span class="hljs-number">1</span>, index, e); <br>    &#125;<br> <span class="hljs-comment">//重构函数定义为私有变量防止外部调用参数意义（根节点,左范围，右范围,索引值，要修改的值）</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(<span class="hljs-type">int</span> treeIndex, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> index, E e)</span> &#123;<br>        <span class="hljs-comment">//递归终止的条件就是当l==r也就是找到那个元素了</span><br>        <span class="hljs-keyword">if</span> (l == r) &#123;  <br>            tree[treeIndex] = e;  <span class="hljs-comment">//修改</span><br>            <span class="hljs-keyword">return</span>;  <br>        &#125;<br>        <span class="hljs-comment">//正常流程 首先得到中间的下标</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> l + (r - l) / <span class="hljs-number">2</span>;<br>        <span class="hljs-comment">//其次得到左右孩子的下标 后面递归使用</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">leftTreeIndex</span> <span class="hljs-operator">=</span> leftChild(treeIndex);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rightTreeIndex</span> <span class="hljs-operator">=</span> rightChild(treeIndex);<br>        <span class="hljs-comment">//接着 `index &gt;= mid + 1`:如果要搜查的值在右子树则对右子树递归调用以 rightTreeIndex为根节点 </span><br>        <span class="hljs-keyword">if</span> (index &gt;= mid + <span class="hljs-number">1</span>) &#123;<br>            set(rightTreeIndex, mid + <span class="hljs-number">1</span>, r, index, e);<br>        &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">//反之则在左子树同右子树相同不过根节点换成了左孩子的下标值</span><br>            set(leftTreeIndex, l, mid, index, e);<br>        &#125;<br>        <span class="hljs-comment">//当找到后不是整个线段树的节点值都改变在index以后的值节点保持不变而在index以前的节点值要改变</span><br>        <span class="hljs-comment">//所以这里直接调用调用merger函数即可以自动实现。</span><br>        tree[treeIndex] = merger.merge(tree[leftTreeIndex], tree[rightTreeIndex]);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="3-LeeCode练习题讲解"><a href="#3-LeeCode练习题讲解" class="headerlink" title="3.LeeCode练习题讲解"></a>3.LeeCode练习题讲解</h2><h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3><p>力扣题303<a href="[303. 区域和检索 - 数组不可变 - 力扣（LeetCode）](https://leetcode.cn/problems/range-sum-query-immutable/">区域和检索-数组不可变</a>)   该题是要实现一个NumArray类实现一个区间内元素的总和所以解题步骤：</p><ol><li>首先定义一个私有变量sum数组存储从0-n 个区间的总和 例如sum[6]表示 sum[0]+…+sum[5] 故有此情形可以知道sum的空间开辟大小为nums.length+1 ,而且sum[0]=0;</li><li>对数据成员对象的初始化将 nums内的元素相加和拷贝到sum数组中</li><li>实现sumRange类 返回结过 例如：如果要求下标【4，8】区间内元素的总和则需要sum[9]-sum[4] 就可以。</li></ol><blockquote><p>代码如下所示</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NumArray</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> []sum;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NumArray</span><span class="hljs-params">(<span class="hljs-type">int</span> []nums)</span>&#123;<br>        sum=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[nums.length+<span class="hljs-number">1</span>];<br>        sum[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//对sum[1]~sum[n]逐个进行赋值 从i=1开始 sum[1]=sum[0]+nums[0];sum[2]=sum[1]+nums[1]...</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; sum.length; i++) &#123;<br>            sum[i]=sum[i-<span class="hljs-number">1</span>]+nums[i-<span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//返回最终结果</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sumRange</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j)</span>&#123;<br>        <span class="hljs-keyword">return</span> sum[j+<span class="hljs-number">1</span>]-sum[i];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Trie前缀树"><a href="#Trie前缀树" class="headerlink" title="Trie前缀树"></a><code>Trie</code>前缀树</h1><blockquote><p>概念介绍</p></blockquote><p>前缀树又称为字典树，是一种有序的树，它用于保存关联的数组，其中的键通常是字符串，也就是这个节点对应的字符串，而根节点对应字符串，一般情况下，不是所有的节点都有对应的值，只有叶子节点和部分的内部节点所对应的键才有的相关的值。</p><p><img src="https://cdn.jsdelivr.net/gh/7756JokerQAQ/picodemoo/img/hehehe.png" alt=""></p><blockquote><p>前缀树的3个基本性质</p></blockquote><ol><li>根节点不包含字符，除根节点外每一个节点都只包含一个字符。</li><li>从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串</li><li>每个节点的所有子节点包含的字符都不相同。</li></ol><blockquote><p>tire树的应用</p></blockquote><p>常用于搜索的提示，例如输入一个网址出现可能的结果，还用于微信聊天记录的搜寻。时间复杂度O(longN)</p><blockquote><p>tire树的实现</p></blockquote><ul><li>首先定义一个节点类<code>class Node</code> 其中函数如下</li><li><code>public boolean isWorld</code> 表示到该节点是否为一个单词</li><li><code>public TreeMap&lt;Character,Node&gt;next</code> 表示下一个节点所存储的结构</li><li><code>Node(boolean isWorld)</code> 对节点的初始化和next的初始化</li><li>此处开始定义<code>class Trie</code> 内的函数 <code>Node root</code> 定义一个节点 <code>int size</code> 该tire树的大小。</li><li><code>add(String word)</code> 添加一个单词word</li><li><code>contains（String word）</code> 查询单词word是否在Tire中</li><li><code>isPrefix(String prefix)</code> 判断该单词是否是前缀</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>（1）首先定义一个节点内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> isWorld;<br>        <span class="hljs-comment">//Character是个假设 可以适用于不同的情况 能够分为一个一个的单元</span><br>        <span class="hljs-keyword">public</span> TreeMap&lt;Character, Node&gt; next;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">boolean</span> isWorld)</span> &#123;<br>            <span class="hljs-built_in">this</span>.isWorld = isWorld;<br>            next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;();<br>        &#125;<br><span class="hljs-comment">//当该节点不是个单词的时候直接赋值为false </span><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-built_in">this</span>(<span class="hljs-literal">false</span>);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>（2）在Trie类中定义相关的函数和私有变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">private</span> Node root;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br><span class="hljs-comment">//初始化 Tire 并对成员变量初始化赋值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Trie</span><span class="hljs-params">()</span> &#123;<br>        root = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>();<br>        size = <span class="hljs-number">0</span>;<br>    &#125;<br><span class="hljs-comment">//得到该Trie树中单词的数目</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size;<br>    &#125;<br></code></pre></td></tr></table></figure><p>（3）实现add函数 向Tire中添加单词word</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String word)</span> &#123;<br>    <span class="hljs-comment">//首相从根节点开始 顶一个cur指针指向根节点</span><br>     <span class="hljs-type">Node</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> root;<br>     <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; word.length(); i++) &#123; <span class="hljs-comment">//其对对传入的单词进行遍历</span><br>         <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> word.charAt(i);  <span class="hljs-comment">//将第i个字母赋值给c</span><br>         <span class="hljs-keyword">if</span> (cur.next.get(c) == <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">//判断cur的下一个节点是否为空如果是的话，则新建一个节点直接将该字母放在cur.next的下一个节点</span><br>             cur.next.put(c, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>());<br>         &#125;<br>         <span class="hljs-comment">//如果不为空的话让cur指针指向该不为空的节点便于下次循环操作</span><br>         cur = cur.next.get(c);<br>     &#125;<br>    <span class="hljs-comment">//当所有的节点都add上了后 此时判断该节点下的isWorld是否为true,不是的话改为true并且size++</span><br>     <span class="hljs-keyword">if</span> (!cur.isWorld) &#123;<br>         cur.isWorld = <span class="hljs-literal">true</span>;<br>         size++;<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>(3) contains 函数的实现类似于add函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查询单词 word是否在Trie中</span><br> <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(String word)</span>&#123;<br>     Node cur=root;  <span class="hljs-comment">//定义指针指向根节点</span><br>     <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; word.length(); i++) &#123; <span class="hljs-comment">//遍历word单词</span><br>         <span class="hljs-type">char</span> c=word.charAt(i);<br>         <span class="hljs-keyword">if</span>(cur.next.get(c)==<span class="hljs-literal">null</span>)&#123; <span class="hljs-comment">//如果cur.next为空的话则直接判断不存在</span><br>             <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>         &#125;<br>         cur= cur.next.get(c);  <span class="hljs-comment">//不为空的话 开始对下一个字母进行校验</span><br>     &#125;<br>     <span class="hljs-keyword">return</span> cur.isWorld;  <span class="hljs-comment">//当上面的while循环完成 则直接返回cur.isWrold证明该单词存在</span><br> &#125;<br></code></pre></td></tr></table></figure><p>（4）isPrefix函数判断该前缀是否存在tire树内于以上两种方法相似</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPrefix</span><span class="hljs-params">(String prefix)</span>&#123;<br>    Node cur=root;   <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;prefix.length();i++)&#123;<br>        <span class="hljs-type">char</span> c=prefix.charAt(i);<br>        <span class="hljs-keyword">if</span>(cur.next.get(c)==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        cur=cur.next.get(c);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="LeeCode题目讲解"><a href="#LeeCode题目讲解" class="headerlink" title="LeeCode题目讲解"></a>LeeCode题目讲解</h2><p>1.<a href="[208. 实现 Trie (前缀树">实现Trie前缀树</a> - 力扣（LeetCode）](<a href="https://leetcode.cn/problems/implement-trie-prefix-tree/">https://leetcode.cn/problems/implement-trie-prefix-tree/</a>)) 跟以上过程完全相似</p><p>（1）存在四个函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Trie</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Trie</span><span class="hljs-params">()</span> &#123;  <span class="hljs-comment">//初始化</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(String word)</span> &#123;  <span class="hljs-comment">//增加</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">search</span><span class="hljs-params">(String word)</span> &#123;  <span class="hljs-comment">//查找</span><br>    &#125;    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">startsWith</span><span class="hljs-params">(String prefix)</span> &#123;  <span class="hljs-comment">//前缀</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>代码实现</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Trie</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> isWorld;<br>        <span class="hljs-comment">//Character是个假设 可以适用于不同的情况 能够分为一个一个的单元</span><br>        <span class="hljs-keyword">public</span> TreeMap&lt;Character, Node&gt; next;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">boolean</span> isWorld)</span> &#123;<br>            <span class="hljs-built_in">this</span>.isWorld = isWorld;<br>            next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;();<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-built_in">this</span>(<span class="hljs-literal">false</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">private</span> Node root;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Trie</span><span class="hljs-params">()</span> &#123;<br>        root = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(String word)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> root;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; word.length(); i++) &#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> word.charAt(i);<br>            <span class="hljs-keyword">if</span> (cur.next.get(c) == <span class="hljs-literal">null</span>) &#123;<br>                cur.next.put(c, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>());<br>            &#125;<br>            cur = cur.next.get(c);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!cur.isWorld) &#123;<br>            cur.isWorld = <span class="hljs-literal">true</span>;<br><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">search</span><span class="hljs-params">(String word)</span> &#123;<br>        Node cur=root;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; word.length(); i++) &#123;<br>            <span class="hljs-type">char</span> c=word.charAt(i);<br>            <span class="hljs-keyword">if</span>(cur.next.get(c)==<span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            cur= cur.next.get(c);<br>        &#125;<br>        <span class="hljs-keyword">return</span> cur.isWorld;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">startsWith</span><span class="hljs-params">(String prefix)</span> &#123;<br>        Node cur=root;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; prefix.length(); i++) &#123;<br>            <span class="hljs-type">char</span> c=prefix.charAt(i);<br>            <span class="hljs-keyword">if</span>(cur.next.get(c)==<span class="hljs-literal">null</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            cur=cur.next.get(c);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.[<a href="https://leetcode.cn/problems/design-add-and-search-words-data-structure/">211. 添加与搜索单词 </a>] 题目简介设计一个数据结构，指出添加新的单词和查找字符串是否与任何先前添加的字符串匹配。</p><ul><li>还有内部节点Node类 其中的定义与上文相同这里不需要定义私有变量size。</li><li><code>WordDictionary</code> 对该字典类的初始化</li><li><code>addWorld</code> 与上文的add函数相同</li><li>重点实现<code>search(String word)</code> 函数</li></ul><blockquote><p>相同代码预览</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>      <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> isWorld;<br>      <span class="hljs-comment">//Character是个假设 可以适用于不同的情况 能够分为一个一个的单元</span><br>      <span class="hljs-keyword">public</span> TreeMap&lt;Character, Node&gt; next;<br>      <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">boolean</span> isWorld)</span> &#123;<br>          <span class="hljs-built_in">this</span>.isWorld = isWorld;<br>          next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;();<br>      &#125;<br>      <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">()</span> &#123;<br>          <span class="hljs-built_in">this</span>(<span class="hljs-literal">false</span>);<br>      &#125;<br>  &#125;<br>  <span class="hljs-keyword">private</span> Node root;<br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">WordDictionary</span><span class="hljs-params">()</span> &#123;<br>      root = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>();<br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addWord</span><span class="hljs-params">(String word)</span> &#123;<br>      <span class="hljs-type">Node</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> root;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; word.length(); i++) &#123;<br>          <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> word.charAt(i);<br>          <span class="hljs-keyword">if</span> (cur.next.get(c) == <span class="hljs-literal">null</span>) &#123;<br>              cur.next.put(c, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>());<br>          &#125;<br>          cur = cur.next.get(c);<br>      &#125;<br>      cur.isWorld = <span class="hljs-literal">true</span>;<br>  &#125;<br></code></pre></td></tr></table></figure><p><strong>(2)重点实现的search函数和match函数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">search</span><span class="hljs-params">(String word)</span> &#123;<br>     <span class="hljs-keyword">return</span> match(root, word, <span class="hljs-number">0</span>);  <span class="hljs-comment">//调用match函数从根节点开始 word单词 0为下标</span><br> &#125;<br></code></pre></td></tr></table></figure><p><strong>接着实现match函数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//从根节点开始 搜查单词为word 下标为index=0开始</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">match</span><span class="hljs-params">(Node node, String word, <span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span> (index == word.length()) &#123;  <span class="hljs-comment">//首先判断递归到底的情况就是index=单词的长度</span><br>            <span class="hljs-keyword">return</span> node.isWorld;  <span class="hljs-comment">//返回true 证明找到了</span><br>        &#125;<br>    <span class="hljs-comment">//先取出word的第一个字母进行匹配</span><br>        <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> word.charAt(index);  <br>        <span class="hljs-keyword">if</span> (c != <span class="hljs-string">&#x27;.&#x27;</span>) &#123;  <span class="hljs-comment">//因为体感说&#x27;.&#x27;表示一个任意的字母 当不为.的时候</span><br>            <span class="hljs-keyword">if</span> (node.next.get(c) == <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">//先判断c的下一个单词是否存在 不存在直接返回false</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-comment">//如果存在的话就递归调用以当前node.next.get(C)为节点 index+1 为下标的匹配函数</span><br>            <span class="hljs-keyword">return</span> match(node.next.get(c), word, index + <span class="hljs-number">1</span>); <br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//当然当下一个单词为&#x27;.&#x27;的时候可以直接遍历nextChar数组的 ‘keySet（）’--它表示的是取出word的下一个字母 </span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> nextChar :<br>                    node.next.keySet()) &#123;<br>                <span class="hljs-comment">// 此处以下一个字母为根节点 查找word 然后下标继续为index+1</span><br>                <span class="hljs-keyword">if</span> (match(node.next.get(nextChar), word, index + <span class="hljs-number">1</span>))<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微机接口</title>
      <link href="/2022/08/29/%E5%A4%A7%E4%B8%89%E4%B8%8A%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E5%BE%AE%E6%9C%BA%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/"/>
      <url>/2022/08/29/%E5%A4%A7%E4%B8%89%E4%B8%8A%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E5%BE%AE%E6%9C%BA%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="微机接口技术"><a href="#微机接口技术" class="headerlink" title="微机接口技术"></a>微机接口技术</h2><h4 id="课程学习内容及目的"><a href="#课程学习内容及目的" class="headerlink" title="课程学习内容及目的"></a>课程学习内容及目的</h4><p>  <strong>成绩=期末×0.7+平时×0.3</strong></p><p>1.汇编语言就是机器语言，熟知底层编程，了解计算机工作原理</p><p>2.微机接口技术就是把处理器、存储器等组成的基本系统与外部设备连接起来，从而实现计算机或者（CPU）与外部设备通信的一门技术，学习微机接口技术对微机在工业控制，数据采集和系统控制等领域的应用具有非常重要的作用；</p><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="1-1-微型计算机系统的组成"><a href="#1-1-微型计算机系统的组成" class="headerlink" title="1.1 微型计算机系统的组成"></a>1.1 微型计算机系统的组成</h3><pre><code>   应用软件- -&gt;  操作系统 --&gt; 硬件驱动层（软件）- -&gt;  指令层(ISA) --&gt; 硬件层(主板)     `计算机系统层次结构`</code></pre><p>硬件包括 处理芯片和外围硬件</p><p>软件：操作系统 编译器 各种应用软件</p><p>1.硬件层：其功能实在程序控制下的自动完成计算机的物理操作</p><p>2.硬件驱动层：（抽象层）：这些驱动层的软件直接控制着底层硬件的运行。这种组织结构，是的用户对硬件功能的调用不必了解其原理；</p><p>3.操作系统：计算机的所有软硬件资源的控制着，决定着计算机各种资源的使用和分配。</p><p>4.应用软件：通过操作系统提供的服务，BIOS提供的服务即使对计算机底层硬件的直接控制，完成对计算机各个方面应用的具体要求。</p><p>5.指令集：指示计算机硬件执行某种运算、处理功能的命令称为指令，CPU固有的指令系统</p><h4 id="1-1-2-卫星计算机软件"><a href="#1-1-2-卫星计算机软件" class="headerlink" title="1.1.2 卫星计算机软件"></a>1.1.2 卫星计算机软件</h4><h4 id="1-1-3-微型计算机的基本工作方法"><a href="#1-1-3-微型计算机的基本工作方法" class="headerlink" title="1.1.3 微型计算机的基本工作方法"></a>1.1.3 微型计算机的基本工作方法</h4><p>1.指令</p><p>指令在微处理器内是以二进制代码形式出现和施展控制的，每一条指令都有一个唯一的指令代码；</p><p>2.程序</p><p>​    当人们要用计算机我弄成某项工作时，就要把指令排列起来 这就是程序。</p><p>3.存储程序和控制程序</p><p>微处理器就顺序的、周而复始的从内存中取出指令，八至零码变成控制序列信号（指令译码）完成指令规定的操作（称为指令执行）完成全部指令称为（执行程序）    ——-执行程序必须调入内存运行。</p><h4 id="1-1-4-微机系统的启动和操作系统的装载"><a href="#1-1-4-微机系统的启动和操作系统的装载" class="headerlink" title="1.1.4 微机系统的启动和操作系统的装载"></a>1.1.4 微机系统的启动和操作系统的装载</h4><p>1.BIOS（主板自带的软件）是一个ROM</p><p>2.存储器地址  </p><h3 id="1-2-IA-32-微处理器体系结构"><a href="#1-2-IA-32-微处理器体系结构" class="headerlink" title="1.2 IA-32 微处理器体系结构"></a>1.2 IA-32 微处理器体系结构</h3><p>1.EU  指令</p><p>2.BIU 接口</p><p> CS SS DS ES IP  内部暂存器——&gt;通过地址的加法器 ——&gt;总线控制逻辑 ——&gt;指令对立寄存器</p>]]></content>
      
      
      <categories>
          
          <category> 微机课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微机理论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记模板</title>
      <link href="/2022/08/27/%E4%BB%A3%E7%A0%81%E5%BF%AB%E6%BC%94%E7%A4%BA/%E6%BC%94%E7%A4%BA/"/>
      <url>/2022/08/27/%E4%BB%A3%E7%A0%81%E5%BF%AB%E6%BC%94%E7%A4%BA/%E6%BC%94%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="Page-模板"><a href="#Page-模板" class="headerlink" title="Page 模板"></a>Page 模板</h1><p> title: 【必须】 页面标题<br> date: 【必需】页面创建日期<br> updated: 【可选】页面更新日期<br> type: 【必需】标签、分类和友情链接三个页面需要配置<br> comments: 【可选】显示页面评论模块(默认 true)<br> description: 【可选】页面描述<br> keywords: 【可选】页面关键字<br> top_img: 【可选】页面顶部图片<br> highlight_shrink: 【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)</p><h3 id="直接复制"><a href="#直接复制" class="headerlink" title="直接复制"></a>直接复制</h3><p> title:<br> date:<br> type:<br> comments:<br> description:<br> keywords:<br> updated:<br> top_img:<br> highlight_shrink:</p><h1 id="文章设置"><a href="#文章设置" class="headerlink" title="文章设置"></a>文章设置</h1><p> title: 【必需】文章标题<br> date: 【必需】文章创建日期<br> updated: 【可选】文章更新日期<br> tags: 【可选】文章标签<br> categories: 【可选】文章分类<br> keywords: 【可选】文章关键字<br> description: 【可选】文章描述<br> top_img: 【可选】文章顶部图片<br> cover:【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)<br> copyright: 【可选】显示文章版权模块(默认为设置中post_copyright的enable配置<br> copyright_author: 【可选】文章版权模块的文章作者<br> copyright_author_href: 【可选】文章版权模块的文章作者链接<br> copyright_url: 【可选】文章版权模块的文章连结链接<br> copyright_info: 【可选】文章版权模块的版权声明文字 </p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
